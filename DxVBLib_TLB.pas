unit DxVBLib_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// PASTLWTR : 1.2
// File generated on 2009-3-24 22:02:43 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\WINDOWS\system32\dx7vb.dll (1)
// LIBID: {E1211242-8E94-11D1-8808-00C04FC2C602}
// LCID: 0
// Helpfile: C:\WINDOWS\system32\directx.chm
// HelpString: DirectX 7 for Visual Basic Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// Errors:
//   Hint: Symbol 'type' renamed to 'type_'
//   Hint: Parameter 'to' of DirectPlay4.GetMessageQueue changed to 'to_'
//   Hint: Parameter 'object' of Direct3DRMEnumerateObjectsCallback.CallbackRMEnumerateObjects changed to 'object_'
//   Hint: Parameter 'array' of DirectDrawSurface4.GetLockedArray changed to 'array_'
//   Hint: Parameter 'file' of DirectDraw4.CreateSurfaceFromFile changed to 'file_'
//   Hint: Parameter 'file' of DirectDraw4.CreateSurfaceFromResource changed to 'file_'
//   Hint: Parameter 'array' of DirectDrawSurface7.GetLockedArray changed to 'array_'
//   Hint: Parameter 'file' of DirectDraw7.CreateSurfaceFromFile changed to 'file_'
//   Hint: Parameter 'file' of DirectDraw7.CreateSurfaceFromResource changed to 'file_'
//   Hint: Parameter 'end' of Direct3DRMFrame3.GetSceneFogParams changed to 'end_'
//   Hint: Parameter 'end' of Direct3DRMFrame3.SetSceneFogParams changed to 'end_'
//   Hint: Parameter 'array' of Direct3DRMMeshBuilder3.AddFaces changed to 'array_'
//   Hint: Parameter 'array' of Direct3DRMMeshBuilder3.AddFacesJava changed to 'array_'
//   Hint: Parameter 'end' of Direct3DRMFrameInterpolator.SetSceneFogParams changed to 'end_'
//   Hint: Parameter 'type' of DirectMusicPerformance.AddNotificationType changed to 'type_'
//   Hint: Parameter 'type' of DirectMusicPerformance.RemoveNotificationType changed to 'type_'
//   Error creating palette bitmap of (TDirectX7) : Server C:\WINDOWS\system32\dx7vb.dll contains no icons
// ************************************************************************ //
// *************************************************************************//
// NOTE:                                                                      
// Items guarded by $IFDEF_LIVE_SERVER_AT_DESIGN_TIME are used by properties  
// which return objects that may need to be explicitly created via a function 
// call prior to any access via the property. These items have been disabled  
// in order to prevent accidental use from within the object inspector. You   
// may enable them by defining LIVE_SERVER_AT_DESIGN_TIME or by selectively   
// removing them from the $IFDEF blocks. However, such items must still be    
// programmatically created via a method of the appropriate CoClass before    
// they can be used.                                                          
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
interface

uses Windows, ActiveX, Classes, Graphics, OleServer, StdVCL, Variants;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  DxVBLibMajorVersion = 1;
  DxVBLibMinorVersion = 0;

  LIBID_DxVBLib: TGUID = '{E1211242-8E94-11D1-8808-00C04FC2C602}';

  IID_DirectPlayAddress: TGUID = '{9F76FF05-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectPlayLobbyConnection: TGUID = '{9F76FF06-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectPlaySessionData: TGUID = '{9F76FF12-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectPlayEnumConnections: TGUID = '{9F76FF0A-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectPlayEnumPlayers: TGUID = '{9F76FF0B-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectPlayEnumSessions: TGUID = '{9F76FF0C-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectPlayEnumServiceProviders: TGUID = '{9F76FF0D-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectPlayEnumLocalApplications: TGUID = '{9F76FF0E-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectPlayMessage: TGUID = '{9F76FF11-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectPlay4: TGUID = '{9F76FF0F-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectPlayLobby3: TGUID = '{9F76FF10-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMEnumerateObjectsCallback: TGUID = '{BBD5AD04-8E91-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMObject: TGUID = '{9F76FE0E-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMCallback: TGUID = '{BBD5AD03-8E91-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMLoadCallback: TGUID = '{BBD5AD0A-8E91-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMLoadTextureCallback3: TGUID = '{BBD5AD16-8E91-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMTexture3: TGUID = '{9F76FE28-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectDrawSurface4: TGUID = '{BCAA7DA3-F7EF-11D2-93FD-00C04FC2C602}';
  IID_DirectDrawClipper: TGUID = '{9F76FDCA-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectDraw4: TGUID = '{BCAA7DA2-F7EF-11D2-93FD-00C04FC2C602}';
  IID_DirectDrawPalette: TGUID = '{9F76FDC9-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectDrawEnumModes: TGUID = '{9F76FFFF-8E92-11D1-8808-00C04FC2C602}';
  IID_IFont: TGUID = '{BEF6E002-A874-101A-8BBA-00AA00300CAB}';
  IID_Direct3D7: TGUID = '{9F76FDD5-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectDrawSurface7: TGUID = '{9F76FDE8-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectDrawEnumSurfaces: TGUID = '{9F76FDE6-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectDraw7: TGUID = '{9F76FDE7-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectDrawIdentifier: TGUID = '{BCAA7DA4-F7EF-11D2-93FD-00C04FC2C602}';
  IID_DirectDrawColorControl: TGUID = '{9F76FDE0-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectDrawGammaControl: TGUID = '{9F76FDE9-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DDevice7: TGUID = '{9F76FDD7-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DVertexBuffer7: TGUID = '{9F76FDDA-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DEnumPixelFormats: TGUID = '{9F76FDD6-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DEnumDevices: TGUID = '{9F76FDD3-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectDrawEnum: TGUID = '{9F76FDE1-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMVisual: TGUID = '{9F76FE0F-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMFace2: TGUID = '{9F76FE32-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMMaterial2: TGUID = '{9F76FE21-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMLight: TGUID = '{9F76FE03-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMFrame3: TGUID = '{9F76FE25-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMFrameMoveCallback3: TGUID = '{9F76FE33-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMFrameArray: TGUID = '{9F76FE14-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMLightArray: TGUID = '{9F76FE16-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMVisualArray: TGUID = '{9F76FE15-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMPick2Array: TGUID = '{9F76FE19-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMMesh: TGUID = '{9F76FE06-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMWrap: TGUID = '{9F76FE08-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMObjectArray: TGUID = '{9F76FE11-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMDeviceArray: TGUID = '{9F76FE12-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMDevice3: TGUID = '{9F76FE27-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMDeviceUpdateCallback3: TGUID = '{9F76FE34-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMViewportArray: TGUID = '{9F76FE13-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMViewport2: TGUID = '{9F76FE20-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMPickArray: TGUID = '{9F76FE17-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMFaceArray: TGUID = '{9F76FE18-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMAnimationArray: TGUID = '{9F76FE35-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMAnimation2: TGUID = '{9F76FE22-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMShadow2: TGUID = '{9F76FE36-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMAnimationSet2: TGUID = '{9F76FE23-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRM3: TGUID = '{9F76FE24-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMMeshBuilder3: TGUID = '{9F76FE26-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMProgressiveMesh: TGUID = '{9F76FE31-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMClippedVisual: TGUID = '{9F76FE30-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMMeshInterpolator: TGUID = '{5F4637E3-62AC-11D2-90B1-00C04FC2C602}';
  IID_Direct3DRMTextureInterpolator: TGUID = '{5F4637E5-62AC-11D2-90B1-00C04FC2C602}';
  IID_Direct3DRMMaterialInterpolator: TGUID = '{5F4637E6-62AC-11D2-90B1-00C04FC2C602}';
  IID_Direct3DRMFrameInterpolator: TGUID = '{5F4637E2-62AC-11D2-90B1-00C04FC2C602}';
  IID_Direct3DRMViewportInterpolator: TGUID = '{5F4637E1-62AC-11D2-90B1-00C04FC2C602}';
  IID_Direct3DRMLightInterpolator: TGUID = '{5F4637E4-62AC-11D2-90B1-00C04FC2C602}';
  IID_DirectSound: TGUID = '{9F76FB00-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectSoundBuffer: TGUID = '{9F76FB01-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectSound3DListener: TGUID = '{9F76FB02-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectSound3DBuffer: TGUID = '{9F76FB03-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectSoundCapture: TGUID = '{9F76FB04-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectSoundCaptureBuffer: TGUID = '{9F76FB05-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectSoundEnum: TGUID = '{9F76FB07-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectInput: TGUID = '{9F76FA02-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectInputDevice: TGUID = '{9F76FA03-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectInputEnumDeviceObjects: TGUID = '{9F76FA08-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectInputDeviceObjectInstance: TGUID = '{9F76FA05-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectInputDeviceInstance: TGUID = '{9F76FA04-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectInputEffect: TGUID = '{BCAA7DA9-F7EF-11D2-93FD-00C04FC2C602}';
  IID_DirectInputEnumEffects: TGUID = '{BCAA7DAA-F7EF-11D2-93FD-00C04FC2C602}';
  IID_DirectInputEnumDevices: TGUID = '{9F76FA09-8E92-11D1-8808-00C04FC2C602}';
  IID_Direct3DRMInterpolator: TGUID = '{9F76FE29-8E92-11D1-8808-00C04FC2C602}';
  IID_DirectMusicLoader: TGUID = '{FAFA35A0-8B72-11D2-90B2-00C04FC2C602}';
  IID_DirectMusicSegment: TGUID = '{FAFA35A1-8B72-11D2-90B2-00C04FC2C602}';
  IID_DirectMusicPerformance: TGUID = '{FAFA35A7-8B72-11D2-90B2-00C04FC2C602}';
  IID_DirectMusicSegmentState: TGUID = '{FAFA35A6-8B72-11D2-90B2-00C04FC2C602}';
  IID_DirectMusicStyle: TGUID = '{FAFA35A4-8B72-11D2-90B2-00C04FC2C602}';
  IID_DirectMusicBand: TGUID = '{FAFA35A3-8B72-11D2-90B2-00C04FC2C602}';
  IID_DirectMusicChordMap: TGUID = '{FAFA35A5-8B72-11D2-90B2-00C04FC2C602}';
  IID_DirectMusicCollection: TGUID = '{FAFA35A8-8B72-11D2-90B2-00C04FC2C602}';
  IID_DirectMusicComposer: TGUID = '{FAFA35A2-8B72-11D2-90B2-00C04FC2C602}';
  IID_DirectXEvent: TGUID = '{FAFA35B0-8B72-11D2-90B2-00C04FC2C602}';
  IID_IDirectX7: TGUID = '{FAFA3599-8B72-11D2-90B2-00C04FC2C602}';
  CLASS_DirectX7: TGUID = '{E1211353-8E94-11D1-8808-00C04FC2C602}';

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
// Constants for enum CONST_D3DVERTEXBLENDFLAGS
type
  CONST_D3DVERTEXBLENDFLAGS = TOleEnum;
const
  D3DVBLEND_DISABLE = $00000000;
  D3DVBLEND_1WEIGHT = $00000001;
  D3DVBLEND_2WEIGHTS = $00000002;
  D3DVBLEND_3WEIGHTS = $00000003;

// Constants for enum CONST_D3DTEXTURETRANSFORMFLAGS
type
  CONST_D3DTEXTURETRANSFORMFLAGS = TOleEnum;
const
  D3DTTFF_DISABLE = $00000000;
  D3DTTFF_COUNT1 = $00000001;
  D3DTTFF_COUNT2 = $00000002;
  D3DTTFF_COUNT3 = $00000003;
  D3DTTFF_COUNT4 = $00000004;
  D3DTTFF_PROJECTED = $00000100;

// Constants for enum CONST_D3DVTXPCAPSFLAGS
type
  CONST_D3DVTXPCAPSFLAGS = TOleEnum;
const
  D3DVTXPCAPS_TEXGEN = $00000001;
  D3DVTXPCAPS_MATERIALSOURCE7 = $00000002;
  D3DVTXPCAPS_VERTEXFOG = $00000004;
  D3DVTXPCAPS_DIRECTIONALLIGHTS = $00000008;
  D3DVTXPCAPS_POSITIONALLIGHTS = $00000010;
  D3DVTXPCAPS_NONLOCALVIEWER = $00000020;

// Constants for enum CONST_D3DFDSFLAGS
type
  CONST_D3DFDSFLAGS = TOleEnum;
const
  D3DFDS_COLORMODE = $00000001;
  D3DFDS_GUID = $00000002;
  D3DFDS_HARDWARE = $00000004;
  D3DFDS_TRIANGLES = $00000008;
  D3DFDS_LINES = $00000010;
  D3DFDS_MISCCAPS = $00000020;
  D3DFDS_RASTERCAPS = $00000040;
  D3DFDS_ZCMPCAPS = $00000080;
  D3DFDS_ALPHACMPCAPS = $00000100;
  D3DFDS_SRCBLENDCAPS = $00000200;
  D3DFDS_DSTBLENDCAPS = $00000400;
  D3DFDS_SHADECAPS = $00000800;
  D3DFDS_TEXTURECAPS = $00001000;
  D3DFDS_TEXTUREFILTERCAPS = $00002000;
  D3DFDS_TEXTUREBLENDCAPS = $00004000;
  D3DFDS_TEXTUREADDRESSCAPS = $00008000;

// Constants for enum CONST_D3DTEXOPCAPSFLAGS
type
  CONST_D3DTEXOPCAPSFLAGS = TOleEnum;
const
  D3DTEXOPCAPS_DISABLE = $00000001;
  D3DTEXOPCAPS_SELECTARG1 = $00000002;
  D3DTEXOPCAPS_SELECTARG2 = $00000004;
  D3DTEXOPCAPS_MODULATE = $00000008;
  D3DTEXOPCAPS_MODULATE2X = $00000010;
  D3DTEXOPCAPS_MODULATE4X = $00000020;
  D3DTEXOPCAPS_ADD = $00000040;
  D3DTEXOPCAPS_ADDSIGNED = $00000080;
  D3DTEXOPCAPS_ADDSIGNED2X = $00000100;
  D3DTEXOPCAPS_SUBTRACT = $00000200;
  D3DTEXOPCAPS_ADDSMOOTH = $00000400;
  D3DTEXOPCAPS_BLENDDIFFUSEALPHA = $00000800;
  D3DTEXOPCAPS_BLENDTEXTUREALPHA = $00001000;
  D3DTEXOPCAPS_BLENDFACTORALPHA = $00002000;
  D3DTEXOPCAPS_BLENDTEXTUREALPHAPM = $00004000;
  D3DTEXOPCAPS_BLENDCURRENTALPHA = $00008000;
  D3DTEXOPCAPS_PREMODULATE = $00010000;
  D3DTEXOPCAPS_MODULATEALPHA_ADDCOLOR = $00020000;
  D3DTEXOPCAPS_MODULATECOLOR_ADDALPHA = $00040000;
  D3DTEXOPCAPS_MODULATEINVALPHA_ADDCOLOR = $00080000;
  D3DTEXOPCAPS_MODULATEINVCOLOR_ADDALPHA = $00100000;
  D3DTEXOPCAPS_BUMPENVMAP = $00200000;
  D3DTEXOPCAPS_BUMPENVMAPLUMINANCE = $00400000;
  D3DTEXOPCAPS_DOTPRODUCT3 = $00800000;

// Constants for enum CONST_D3DDPFLAGS
type
  CONST_D3DDPFLAGS = TOleEnum;
const
  D3DDP_DEFAULT = $00000000;
  D3DDP_WAIT = $00000001;

// Constants for enum CONST_D3DCLEARFLAGS
type
  CONST_D3DCLEARFLAGS = TOleEnum;
const
  D3DCLEAR_TARGET = $00000001;
  D3DCLEAR_ZBUFFER = $00000002;
  D3DCLEAR_STENCIL = $00000004;
  D3DCLEAR_ALL = $00000007;

// Constants for enum CONST_D3DLIGHTCAPSFLAGS
type
  CONST_D3DLIGHTCAPSFLAGS = TOleEnum;
const
  D3DLIGHTCAPS_POINT = $00000001;
  D3DLIGHTCAPS_SPOT = $00000002;
  D3DLIGHTCAPS_DIRECTIONAL = $00000004;

// Constants for enum CONST_D3DVOPFLAGS
type
  CONST_D3DVOPFLAGS = TOleEnum;
const
  D3DVOP_LIGHT = $00000400;
  D3DVOP_TRANSFORM = $00000001;
  D3DVOP_CLIP = $00000004;
  D3DVOP_EXTENTS = $00000008;

// Constants for enum CONST_D3DCOLORMODEL
type
  CONST_D3DCOLORMODEL = TOleEnum;
const
  D3DCOLOR_MONO = $00000001;
  D3DCOLOR_RGB = $00000002;

// Constants for enum CONST_D3DLIGHTTYPE
type
  CONST_D3DLIGHTTYPE = TOleEnum;
const
  D3DLIGHT_POINT = $00000001;
  D3DLIGHT_SPOT = $00000002;
  D3DLIGHT_DIRECTIONAL = $00000003;

// Constants for enum CONST_D3DLIGHTINGMODELFLAGS
type
  CONST_D3DLIGHTINGMODELFLAGS = TOleEnum;
const
  D3DLIGHTINGMODEL_RGB = $00000001;
  D3DLIGHTINGMODEL_MONO = $00000002;

// Constants for enum CONST_D3DCAPSRASTER
type
  CONST_D3DCAPSRASTER = TOleEnum;
const
  D3DPRASTERCAPS_DITHER = $00000001;
  D3DPRASTERCAPS_ROP2 = $00000002;
  D3DPRASTERCAPS_XOR = $00000004;
  D3DPRASTERCAPS_PAT = $00000008;
  D3DPRASTERCAPS_ZTEST = $00000010;
  D3DPRASTERCAPS_SUBPIXEL = $00000020;
  D3DPRASTERCAPS_SUBPIXELX = $00000040;
  D3DPRASTERCAPS_FOGVERTEX = $00000080;
  D3DPRASTERCAPS_FOGTABLE = $00000100;
  D3DPRASTERCAPS_STIPPLE = $00000200;
  D3DPRASTERCAPS_ANTIALIASSORTDEPENDENT = $00000400;
  D3DPRASTERCAPS_ANTIALIASSORTINDEPENDENT = $00000800;
  D3DPRASTERCAPS_ANTIALIASEDGES = $00001000;
  D3DPRASTERCAPS_MIPMAPLODBIAS = $00002000;
  D3DPRASTERCAPS_ZBIAS = $00004000;
  D3DPRASTERCAPS_ZBUFFERLESSHSR = $00008000;
  D3DPRASTERCAPS_FOGRANGE = $00010000;
  D3DPRASTERCAPS_ANISOTROPY = $00020000;
  D3DPRASTERCAPS_WBUFFER = $00040000;
  D3DPRASTERCAPS_WFOG = $00100000;
  D3DPRASTERCAPS_ZFOG = $00200000;

// Constants for enum CONST_D3DCAPSCMP
type
  CONST_D3DCAPSCMP = TOleEnum;
const
  D3DPCMPCAPS_NEVER = $00000001;
  D3DPCMPCAPS_LESS = $00000002;
  D3DPCMPCAPS_EQUAL = $00000004;
  D3DPCMPCAPS_LESSEQUAL = $00000008;
  D3DPCMPCAPS_GREATER = $00000010;
  D3DPCMPCAPS_NOTEQUAL = $00000020;
  D3DPCMPCAPS_GREATEREQUAL = $00000040;
  D3DPCMPCAPS_ALWAYS = $00000080;

// Constants for enum CONST_D3DCAPSBLEND
type
  CONST_D3DCAPSBLEND = TOleEnum;
const
  D3DPBLENDCAPS_ZERO = $00000001;
  D3DPBLENDCAPS_ONE = $00000002;
  D3DPBLENDCAPS_SRCCOLOR = $00000004;
  D3DPBLENDCAPS_INVSRCCOLOR = $00000008;
  D3DPBLENDCAPS_SRCALPHA = $00000010;
  D3DPBLENDCAPS_INVSRCALPHA = $00000020;
  D3DPBLENDCAPS_DESTALPHA = $00000040;
  D3DPBLENDCAPS_INVDESTALPHA = $00000080;
  D3DPBLENDCAPS_DESTCOLOR = $00000100;
  D3DPBLENDCAPS_INVDESTCOLOR = $00000200;
  D3DPBLENDCAPS_SRCALPHASAT = $00000400;
  D3DPBLENDCAPS_BOTHSRCALPHA = $00000800;
  D3DPBLENDCAPS_BOTHINVSRCALPHA = $00001000;

// Constants for enum CONST_D3DCAPSSHADE
type
  CONST_D3DCAPSSHADE = TOleEnum;
const
  D3DPSHADECAPS_COLORFLATMONO = $00000001;
  D3DPSHADECAPS_COLORFLATRGB = $00000002;
  D3DPSHADECAPS_COLORGOURAUDMONO = $00000004;
  D3DPSHADECAPS_COLORGOURAUDRGB = $00000008;
  D3DPSHADECAPS_COLORPHONGMONO = $00000010;
  D3DPSHADECAPS_COLORPHONGRGB = $00000020;
  D3DPSHADECAPS_SPECULARFLATMONO = $00000040;
  D3DPSHADECAPS_SPECULARFLATRGB = $00000080;
  D3DPSHADECAPS_SPECULARGOURAUDMONO = $00000100;
  D3DPSHADECAPS_SPECULARGOURAUDRGB = $00000200;
  D3DPSHADECAPS_SPECULARPHONGMONO = $00000400;
  D3DPSHADECAPS_SPECULARPHONGRGB = $00000800;
  D3DPSHADECAPS_ALPHAFLATBLEND = $00001000;
  D3DPSHADECAPS_ALPHAFLATSTIPPLED = $00002000;
  D3DPSHADECAPS_ALPHAGOURAUDBLEND = $00004000;
  D3DPSHADECAPS_ALPHAGOURAUDSTIPPLED = $00008000;
  D3DPSHADECAPS_ALPHAPHONGBLEND = $00010000;
  D3DPSHADECAPS_ALPHAPHONGSTIPPLED = $00020000;
  D3DPSHADECAPS_FOGFLAT = $00040000;
  D3DPSHADECAPS_FOGGOURAUD = $00080000;
  D3DPSHADECAPS_FOGPHONG = $00100000;

// Constants for enum CONST_D3DCAPSTEXTURE
type
  CONST_D3DCAPSTEXTURE = TOleEnum;
const
  D3DPTEXTURECAPS_PERSPECTIVE = $00000001;
  D3DPTEXTURECAPS_POW2 = $00000002;
  D3DPTEXTURECAPS_ALPHA = $00000004;
  D3DPTEXTURECAPS_TRANSPARENCY = $00000008;
  D3DPTEXTURECAPS_BORDER = $00000010;
  D3DPTEXTURECAPS_SQUAREONLY = $00000020;
  D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE = $00000040;
  D3DPTEXTURECAPS_ALPHAPALETTE = $00000080;
  D3DPTEXTURECAPS_NONPOW2CONDITIONAL = $00000100;
  D3DPTEXTURECAPS_TEXTURETRANSFORM = $00000200;
  D3DPTEXTURECAPS_PROJECTED = $00000400;
  D3DPTEXTURECAPS_CUBEMAP = $00000800;
  D3DPTEXTURECAPS_COLORKEYBLEND = $00001000;

// Constants for enum CONST_D3DCAPSTEXTUREFILTER
type
  CONST_D3DCAPSTEXTUREFILTER = TOleEnum;
const
  D3DPTFILTERCAPS_NEAREST = $00000001;
  D3DPTFILTERCAPS_LINEAR = $00000002;
  D3DPTFILTERCAPS_MIPNEAREST = $00000004;
  D3DPTFILTERCAPS_MIPLINEAR = $00000008;
  D3DPTFILTERCAPS_LINEARMIPNEAREST = $00000010;
  D3DPTFILTERCAPS_LINEARMIPLINEAR = $00000020;

// Constants for enum CONST_D3DCAPSTEXTUREADDRESS
type
  CONST_D3DCAPSTEXTUREADDRESS = TOleEnum;
const
  D3DPTADDRESSCAPS_WRAP = $00000001;
  D3DPTADDRESSCAPS_MIRROR = $00000002;
  D3DPTADDRESSCAPS_CLAMP = $00000004;
  D3DPTADDRESSCAPS_BORDER = $00000008;
  D3DPTADDRESSCAPS_INDEPENDENTUV = $00000010;

// Constants for enum CONST_D3DDEVICEDESCCAPS
type
  CONST_D3DDEVICEDESCCAPS = TOleEnum;
const
  D3DDEVCAPS_FLOATTLVERTEX = $00000001;
  D3DDEVCAPS_SORTINCREASINGZ = $00000002;
  D3DDEVCAPS_SORTDECREASINGZ = $00000004;
  D3DDEVCAPS_SORTEXACT = $00000008;
  D3DDEVCAPS_TLVERTEXSYSTEMMEMORY = $00000040;
  D3DDEVCAPS_TLVERTEXVIDEOMEMORY = $00000080;
  D3DDEVCAPS_TEXTURESYSTEMMEMORY = $00000100;
  D3DDEVCAPS_TEXTUREVIDEOMEMORY = $00000200;
  D3DDEVCAPS_DRAWPRIMTLVERTEX = $00000400;
  D3DDEVCAPS_CANRENDERAFTERFLIP = $00000800;
  D3DDEVCAPS_TEXTURENONLOCALVIDMEM = $00001000;
  D3DDEVCAPS_SEPARATETEXTUREMEMORIES = $00004000;
  D3DDEVCAPS_HWTRANSFORMANDLIGHT = $00008000;
  D3DDEVCAPS_CANBLTSYSTONONLOCAL = $00020000;
  D3DDEVCAPS_HWRASTERIZATION = $00080000;

// Constants for enum CONST_D3DCLIPFLAGS
type
  CONST_D3DCLIPFLAGS = TOleEnum;
const
  D3DCLIP_LEFT = $00000001;
  D3DCLIP_RIGHT = $00000002;
  D3DCLIP_TOP = $00000004;
  D3DCLIP_BOTTOM = $00000008;
  D3DCLIP_FRONT = $00000010;
  D3DCLIP_BACK = $00000020;
  D3DCLIP_GEN0 = $00000040;
  D3DCLIP_GEN1 = $00000080;
  D3DCLIP_GEN2 = $00000100;
  D3DCLIP_GEN3 = $00000200;
  D3DCLIP_GEN4 = $00000400;
  D3DCLIP_GEN5 = $00000800;
  D3DSTATUS_CLIPINTERSECTIONLEFT = $00001000;
  D3DSTATUS_CLIPINTERSECTIONRIGHT = $00002000;
  D3DSTATUS_CLIPINTERSECTIONTOP = $00004000;
  D3DSTATUS_CLIPINTERSECTIONBOTTOM = $00008000;
  D3DSTATUS_CLIPINTERSECTIONFRONT = $00010000;
  D3DSTATUS_CLIPINTERSECTIONBACK = $00020000;
  D3DSTATUS_CLIPINTERSECTIONGEN0 = $00040000;
  D3DSTATUS_CLIPINTERSECTIONGEN1 = $00080000;
  D3DSTATUS_CLIPINTERSECTIONGEN2 = $00100000;
  D3DSTATUS_CLIPINTERSECTIONGEN3 = $00200000;
  D3DSTATUS_CLIPINTERSECTIONGEN4 = $00400000;
  D3DSTATUS_CLIPINTERSECTIONGEN5 = $00800000;
  D3DSTATUS_CLIPUNIONLEFT = $00000001;
  D3DSTATUS_CLIPUNIONRIGHT = $00000002;
  D3DSTATUS_CLIPUNIONTOP = $00000004;
  D3DSTATUS_CLIPUNIONBOTTOM = $00000008;
  D3DSTATUS_CLIPUNIONFRONT = $00000010;
  D3DSTATUS_CLIPUNIONBACK = $00000020;
  D3DSTATUS_CLIPUNIONGEN0 = $00000040;
  D3DSTATUS_CLIPUNIONGEN1 = $00000080;
  D3DSTATUS_CLIPUNIONGEN2 = $00000100;
  D3DSTATUS_CLIPUNIONGEN3 = $00000200;
  D3DSTATUS_CLIPUNIONGEN4 = $00000400;
  D3DSTATUS_CLIPUNIONGEN5 = $00000800;
  D3DSTATUS_ZNOTVISIBLE = $01000000;
  D3DSTATUS_CLIPUNIONALL = $00FFF000;
  D3DSTATUS_CLIPINTERSECTIONALL = $00FFF000;
  D3DSTATUS_DEFAULT = $01FFF000;

// Constants for enum CONST_D3DCLIPSTATUSFLAGS
type
  CONST_D3DCLIPSTATUSFLAGS = TOleEnum;
const
  D3DCLIPSTATUS_STATUS = $00000001;
  D3DCLIPSTATUS_EXTENTS2 = $00000002;
  D3DCLIPSTATUS_EXTENTS3 = $00000004;

// Constants for enum CONST_D3DLIGHTFLAGS
type
  CONST_D3DLIGHTFLAGS = TOleEnum;
const
  D3DLIGHT_ACTIVE = $00000001;
  D3DLIGHT_NO_SPECULAR = $00000002;
  D3DLIGHT_ALL = $00000003;

// Constants for enum CONST_DDPALFLAGS
type
  CONST_DDPALFLAGS = TOleEnum;
const
  PC_DEFAULT = $00000000;
  PC_RESERVED = $00000001;
  PC_EXPLICIT = $00000002;
  PC_NOCOLLAPSE = $00000004;

// Constants for enum CONST_DDDEVICEIDFLAGS
type
  CONST_DDDEVICEIDFLAGS = TOleEnum;
const
  DDGDI_DEFAULT = $00000000;
  DDGDI_GETHOSTIDENTIFIER = $00000001;

// Constants for enum CONST_D3DVBCAPSFLAGS
type
  CONST_D3DVBCAPSFLAGS = TOleEnum;
const
  D3DVBCAPS_SYSTEMMEMORY = $00000800;
  D3DVBCAPS_WRITEONLY = $00010000;
  D3DVBCAPS_OPTIMIZED = $80000000;
  D3DVBCAPS_DONOTCLIP = $00000001;
  D3DVBCAPS_DEFAULT = $00000000;

// Constants for enum CONST_D3DFVFCAPSFLAGS
type
  CONST_D3DFVFCAPSFLAGS = TOleEnum;
const
  D3DFVFCAPS_TEXCOORDCOUNTMASK = $0000FFFF;
  D3DFVFCAPS_DONOTSTRIPELEMENTS = $00080000;

// Constants for enum CONST_D3DFVFFLAGS
type
  CONST_D3DFVFFLAGS = TOleEnum;
const
  D3DFVF_XYZ = $00000002;
  D3DFVF_XYZRHW = $00000004;
  D3DFVF_XYZB1 = $00000006;
  D3DFVF_XYZB2 = $00000008;
  D3DFVF_XYZB3 = $0000000A;
  D3DFVF_XYZB4 = $0000000C;
  D3DFVF_XYZB5 = $0000000E;
  D3DFVF_NORMAL = $00000010;
  D3DFVF_DIFFUSE = $00000040;
  D3DFVF_SPECULAR = $00000080;
  D3DFVF_TEX0 = $00000000;
  D3DFVF_TEX1 = $00000100;
  D3DFVF_TEX2 = $00000200;
  D3DFVF_TEX3 = $00000300;
  D3DFVF_TEX4 = $00000400;
  D3DFVF_TEX5 = $00000500;
  D3DFVF_TEX6 = $00000600;
  D3DFVF_TEX7 = $00000700;
  D3DFVF_TEX8 = $00000800;
  D3DFVF_VERTEX = $00000112;
  D3DFVF_LVERTEX = $000001E2;
  D3DFVF_TLVERTEX = $000001C4;

// Constants for enum CONST_D3DTAFLAGS
type
  CONST_D3DTAFLAGS = TOleEnum;
const
  D3DTA_SELECTMASK = $0000000F;
  D3DTA_DIFFUSE = $00000000;
  D3DTA_CURRENT = $00000001;
  D3DTA_TEXTURE = $00000002;
  D3DTA_TFACTOR = $00000003;
  D3DTA_COMPLEMENT = $00000010;
  D3DTA_ALPHAREPLICATE = $00000020;
  D3DTA_SPECULAR = $00000004;

// Constants for enum CONST_D3DCAPSMISC
type
  CONST_D3DCAPSMISC = TOleEnum;
const
  D3DPMISCCAPS_MASKPLANES = $00000001;
  D3DPMISCCAPS_MASKZ = $00000002;
  D3DPMISCCAPS_CONFORMANT = $00000008;
  D3DPMISCCAPS_CULLNONE = $00000010;
  D3DPMISCCAPS_CULLCW = $00000020;
  D3DPMISCCAPS_CULLCCW = $00000040;

// Constants for enum CONST_D3D
type
  CONST_D3D = TOleEnum;
const
  D3DRENDERSTATE_WRAPBIAS = $00000080;
  D3DDP_MAXTEXCOORD = $00000008;
  D3DWRAPCOORD_0 = $00000001;
  D3DWRAPCOORD_1 = $00000002;
  D3DWRAPCOORD_2 = $00000004;
  D3DWRAPCOORD_3 = $00000008;

// Constants for enum CONST_D3DRMCREATEDEVICEFLAGS
type
  CONST_D3DRMCREATEDEVICEFLAGS = TOleEnum;
const
  D3DRMDEVICE_DEFAULT = $00000000;
  D3DRMDEVICE_NOZBUFFER = $00000001;

// Constants for enum CONST_D3DRMADDFACESFLAGS
type
  CONST_D3DRMADDFACESFLAGS = TOleEnum;
const
  D3DRMADDFACES_DEFAULT = $00000000;
  D3DRMADDFACES_VERTICESONLY = $00000001;

// Constants for enum CONST_D3DRMMESHBUILDERENABLEFLAGS
type
  CONST_D3DRMMESHBUILDERENABLEFLAGS = TOleEnum;
const
  D3DRMMESHBUILDER_RENDERENABLE = $00000001;
  D3DRMMESHBUILDER_PICKENABLE = $00000002;
  D3DRMMESHBUILDER_PICKANDRENDERENABLE = $00000003;

// Constants for enum CONST_D3DRMMESHBUILDERAGEFLAGS
type
  CONST_D3DRMMESHBUILDERAGEFLAGS = TOleEnum;
const
  D3DRMMESHBUILDERAGE_GEOMETRY = $00000001;
  D3DRMMESHBUILDERAGE_MATERIALS = $00000002;
  D3DRMMESHBUILDERAGE_TEXTURES = $00000004;

// Constants for enum CONST_D3DRMPARENTINGFLAGS
type
  CONST_D3DRMPARENTINGFLAGS = TOleEnum;
const
  D3DRMMESHBUILDER_DIRECTPARENT = $00000001;
  D3DRMMESHBUILDER_ROOTMESH = $00000002;

// Constants for enum CONST_D3DRMADDMESHBUILDERFLAGS
type
  CONST_D3DRMADDMESHBUILDERFLAGS = TOleEnum;
const
  D3DRMADDMESHBUILDER_DONTCOPYAPPDATA = $00000001;
  D3DRMADDMESHBUILDER_FLATTENSUBMESHES = $00000002;
  D3DRMADDMESHBUILDER_NOSUBMESHES = $00000004;

// Constants for enum CONST_D3DRMGENERATENORMALSFLAGS
type
  CONST_D3DRMGENERATENORMALSFLAGS = TOleEnum;
const
  D3DRMGENERATENORMALS_PRECOMPACT = $00000001;
  D3DRMGENERATENORMALS_USECREASEANGLE = $00000002;

// Constants for enum CONST_D3DRMTEXTURECACHEFLAGS
type
  CONST_D3DRMTEXTURECACHEFLAGS = TOleEnum;
const
  D3DRMTEXTURE_FORCERESIDENT = $00000001;
  D3DRMTEXTURE_STATIC = $00000002;
  D3DRMTEXTURE_DOWNSAMPLEPOINT = $00000004;
  D3DRMTEXTURE_DOWNSAMPLEBILINEAR = $00000008;
  D3DRMTEXTURE_DOWNSAMPLEREDUCEDEPTH = $00000010;
  D3DRMTEXTURE_DOWNSAMPLENONE = $00000020;

// Constants for enum CONST_D3DRMLIGHTTYPE
type
  CONST_D3DRMLIGHTTYPE = TOleEnum;
const
  D3DRMLIGHT_AMBIENT = $00000000;
  D3DRMLIGHT_POINT = $00000001;
  D3DRMLIGHT_SPOT = $00000002;
  D3DRMLIGHT_DIRECTIONAL = $00000003;

// Constants for enum CONST_D3DRMVIEWPORTCLEARFLAGS
type
  CONST_D3DRMVIEWPORTCLEARFLAGS = TOleEnum;
const
  D3DRMCLEAR_TARGET = $00000001;
  D3DRMCLEAR_ZBUFFER = $00000002;
  D3DRMCLEAR_DIRTYRECTS = $00000004;
  D3DRMCLEAR_ALL = $00000007;

// Constants for enum CONST_D3DRMRENDERQUALITY
type
  CONST_D3DRMRENDERQUALITY = TOleEnum;
const
  D3DRMSHADE_FLAT = $00000000;
  D3DRMSHADE_GOURAUD = $00000001;
  D3DRMSHADE_PHONG = $00000002;
  D3DRMSHADE_MASK = $00000007;
  D3DRMSHADE_MAX = $00000008;
  D3DRMLIGHT_OFF = $00000000;
  D3DRMLIGHT_ON = $00000008;
  D3DRMLIGHT_MASK = $00000038;
  D3DRMLIGHT_MAX = $00000040;
  D3DRMFILL_POINTS = $00000000;
  D3DRMFILL_WIREFRAME = $00000040;
  D3DRMFILL_SOLID = $00000080;
  D3DRMFILL_MASK = $000001C0;
  D3DRMFILL_MAX = $00000200;
  D3DRMRENDER_WIREFRAME = $00000040;
  D3DRMRENDER_UNLITFLAT = $00000080;
  D3DRMRENDER_FLAT = $00000088;
  D3DRMRENDER_GOURAUD = $00000089;
  D3DRMRENDER_PHONG = $0000008A;

// Constants for enum CONST_D3DRMTEXTURECHANGEDFLAGS
type
  CONST_D3DRMTEXTURECHANGEDFLAGS = TOleEnum;
const
  D3DRMTEXTURE_CHANGEDPIXELS = $00000040;
  D3DRMTEXTURE_CHANGEDPALETTE = $00000080;
  D3DRMTEXTURE_INVALIDATEONLY = $00000100;

// Constants for enum CONST_D3DRMTEXTUREQUALITY
type
  CONST_D3DRMTEXTUREQUALITY = TOleEnum;
const
  D3DRMTEXTURE_NEAREST = $00000000;
  D3DRMTEXTURE_LINEAR = $00000001;
  D3DRMTEXTURE_MIPNEAREST = $00000002;
  D3DRMTEXTURE_MIPLINEAR = $00000003;
  D3DRMTEXTURE_LINEARMIPNEAREST = $00000004;
  D3DRMTEXTURE_LINEARMIPLINEAR = $00000005;

// Constants for enum CONST_D3DRMCOMBINETYPE
type
  CONST_D3DRMCOMBINETYPE = TOleEnum;
const
  D3DRMCOMBINE_REPLACE = $00000000;
  D3DRMCOMBINE_BEFORE = $00000001;
  D3DRMCOMBINE_AFTER = $00000002;

// Constants for enum CONST_D3DRMPALETTEFLAGS
type
  CONST_D3DRMPALETTEFLAGS = TOleEnum;
const
  D3DRMPALETTE_FREE = $00000000;
  D3DRMPALETTE_READONLY = $00000001;
  D3DRMPALETTE_RESERVED = $00000002;

// Constants for enum CONST_D3DRMWRAPTYPE
type
  CONST_D3DRMWRAPTYPE = TOleEnum;
const
  D3DRMWRAP_FLAT = $00000000;
  D3DRMWRAP_CYLINDER = $00000001;
  D3DRMWRAP_SPHERE = $00000002;
  D3DRMWRAP_CHROME = $00000003;

// Constants for enum CONST_D3DRMPROJECTIONTYPE
type
  CONST_D3DRMPROJECTIONTYPE = TOleEnum;
const
  D3DRMPROJECT_PERSPECTIVE = $00000000;
  D3DRMPROJECT_ORTHOGRAPHIC = $00000001;
  D3DRMPROJECT_RIGHTHANDPERSPECTIVE = $00000002;
  D3DRMPROJECT_RIGHTHANDORTHOGRAPHIC = $00000003;

// Constants for enum CONST_D3DRMXOFFORMAT
type
  CONST_D3DRMXOFFORMAT = TOleEnum;
const
  D3DRMXOF_BINARY = $00000000;
  D3DRMXOF_COMPRESSED = $00000001;
  D3DRMXOF_TEXT = $00000002;

// Constants for enum CONST_D3DRMCOLORSOURCE
type
  CONST_D3DRMCOLORSOURCE = TOleEnum;
const
  D3DRMCOLOR_FROMFACE = $00000000;
  D3DRMCOLOR_FROMVERTEX = $00000001;

// Constants for enum CONST_D3DRMFRAMECONSTRAINT
type
  CONST_D3DRMFRAMECONSTRAINT = TOleEnum;
const
  D3DRMCONSTRAIN_Z = $00000000;
  D3DRMCONSTRAIN_Y = $00000001;
  D3DRMCONSTRAIN_X = $00000002;

// Constants for enum CONST_D3DRMMATERIALMODE
type
  CONST_D3DRMMATERIALMODE = TOleEnum;
const
  D3DRMMATERIAL_FROMMESH = $00000000;
  D3DRMMATERIAL_FROMPARENT = $00000001;
  D3DRMMATERIAL_FROMFRAME = $00000002;

// Constants for enum CONST_D3DRMFOGMODE
type
  CONST_D3DRMFOGMODE = TOleEnum;
const
  D3DRMFOG_LINEAR = $00000000;
  D3DRMFOG_EXPONENTIAL = $00000001;
  D3DRMFOG_EXPONENTIALSQUARED = $00000002;

// Constants for enum CONST_D3DRMZBUFFERMODE
type
  CONST_D3DRMZBUFFERMODE = TOleEnum;
const
  D3DRMZBUFFER_FROMPARENT = $00000000;
  D3DRMZBUFFER_ENABLE = $00000001;
  D3DRMZBUFFER_DISABLE = $00000002;

// Constants for enum CONST_D3DRMSORTMODE
type
  CONST_D3DRMSORTMODE = TOleEnum;
const
  D3DRMSORT_FROMPARENT = $00000000;
  D3DRMSORT_NONE = $00000001;
  D3DRMSORT_FRONTTOBACK = $00000002;
  D3DRMSORT_BACKTOFRONT = $00000003;

// Constants for enum CONST_D3DRMRAYPICKFLAGS
type
  CONST_D3DRMRAYPICKFLAGS = TOleEnum;
const
  D3DRMRAYPICK_ONLYBOUNDINGBOXES = $00000001;
  D3DRMRAYPICK_IGNOREFURTHERPRIMITIVES = $00000002;
  D3DRMRAYPICK_INTERPOLATEUV = $00000004;
  D3DRMRAYPICK_INTERPOLATECOLOR = $00000008;
  D3DRMRAYPICK_INTERPOLATENORMAL = $00000010;

// Constants for enum CONST_D3DRMADDTRIANGLESVT
type
  CONST_D3DRMADDTRIANGLESVT = TOleEnum;
const
  D3DRMFVF_TYPE = $00000001;
  D3DRMFVF_NORMAL = $00000002;
  D3DRMFVF_COLOR = $00000004;
  D3DRMFVF_TEXTURECOORDS = $00000008;

// Constants for enum CONST_D3DRMADDTRIANGLESFLAGS
type
  CONST_D3DRMADDTRIANGLESFLAGS = TOleEnum;
const
  D3DRMVERTEX_STRIP = $00000001;
  D3DRMVERTEX_FAN = $00000002;
  D3DRMVERTEX_LIST = $00000004;

// Constants for enum CONST_D3DRMFOGMETHOD
type
  CONST_D3DRMFOGMETHOD = TOleEnum;
const
  D3DRMFOGMETHOD_VERTEX = $00000001;
  D3DRMFOGMETHOD_TABLE = $00000002;
  D3DRMFOGMETHOD_ANY = $00000004;

// Constants for enum CONST_D3DRMTRAVERALFLAGS
type
  CONST_D3DRMTRAVERALFLAGS = TOleEnum;
const
  D3DRMFRAME_RENDERENABLE = $00000001;
  D3DRMFRAME_PICKENABLE = $00000002;
  D3DRMFRAME_RENDERANDPICKENABLE = $00000003;

// Constants for enum CONST_D3DRMINTERPOLATIONFLAGS
type
  CONST_D3DRMINTERPOLATIONFLAGS = TOleEnum;
const
  D3DRMINTERPOLATION_OPEN = $00000001;
  D3DRMINTERPOLATION_CLOSED = $00000002;
  D3DRMINTERPOLATION_NEAREST = $00000100;
  D3DRMINTERPOLATION_LINEAR = $00000004;
  D3DRMINTERPOLATION_SPLINE = $00000008;
  D3DRMINTERPOLATION_VERTEXCOLOR = $00000040;
  D3DRMINTERPOLATION_SLERPNORMALS = $00000080;

// Constants for enum CONST_D3DRMHANDEDNESS
type
  CONST_D3DRMHANDEDNESS = TOleEnum;
const
  D3DRMOPTIONS_LEFTHANDED = $00000001;
  D3DRMOPTIONS_RIGHTHANDED = $00000002;

// Constants for enum CONST_D3DRMWIREFRAMEFLAGS
type
  CONST_D3DRMWIREFRAMEFLAGS = TOleEnum;
const
  D3DRMWIREFRAME_CULL = $00000001;
  D3DRMWIREFRAME_HIDDENLINE = $00000002;
  D3DRMWIREFRAME_CULLANDHIDELINES = $00000003;

// Constants for enum CONST_D3DRMCALLBACKORDERFLAGS
type
  CONST_D3DRMCALLBACKORDERFLAGS = TOleEnum;
const
  D3DRMCALLBACK_PREORDER = $00000000;
  D3DRMCALLBACK_POSTORDER = $00000001;

// Constants for enum CONST_D3DRMRENDERMODEFLAGS
type
  CONST_D3DRMRENDERMODEFLAGS = TOleEnum;
const
  D3DRMRENDERMODE_DEFAULT = $00000000;
  D3DRMRENDERMODE_BLENDEDTRANSPARENCY = $00000001;
  D3DRMRENDERMODE_SORTEDTRANSPARENCY = $00000002;
  D3DRMRENDERMODE_LIGHTINMODELSPACE = $00000008;
  D3DRMRENDERMODE_VIEWDEPENDENTSPECULAR = $00000010;
  D3DRMRENDERMODE_DISABLESORTEDALPHAZWRITE = $00000020;

// Constants for enum CONST_D3DRMPMESHSTATUSFLAGS
type
  CONST_D3DRMPMESHSTATUSFLAGS = TOleEnum;
const
  D3DRMPMESHSTATUS_VALID = $00000001;
  D3DRMPMESHSTATUS_INTERRUPTED = $00000002;
  D3DRMPMESHSTATUS_BASEMESHCOMPLETE = $00000004;
  D3DRMPMESHSTATUS_COMPLETE = $00000008;
  D3DRMPMESHSTATUS_RENDERABLE = $00000010;

// Constants for enum CONST_D3DRMPMESHEVENTFLAGS
type
  CONST_D3DRMPMESHEVENTFLAGS = TOleEnum;
const
  D3DRMPMESHEVENT_BASEMESH = $00000001;
  D3DRMPMESHEVENT_COMPLETE = $00000002;

// Constants for enum CONST_D3DRMFPTFFLAGS
type
  CONST_D3DRMFPTFFLAGS = TOleEnum;
const
  D3DRMFPTF_ALPHA = $00000001;
  D3DRMFPTF_NOALPHA = $00000002;
  D3DRMFPTF_PALETTIZED = $00000004;
  D3DRMFPTF_NOTPALETTIZED = $00000008;

// Constants for enum CONST_D3DRMMAPPINGFLAGS
type
  CONST_D3DRMMAPPINGFLAGS = TOleEnum;
const
  D3DRMMAP_WRAPU = $00000001;
  D3DRMMAP_WRAPV = $00000002;
  D3DRMMAP_PERSPCORRECT = $00000004;

// Constants for enum CONST_D3DRMSTATECHANGEFLAGS
type
  CONST_D3DRMSTATECHANGEFLAGS = TOleEnum;
const
  D3DRMSTATECHANGE_UPDATEONLY = $00000001;
  D3DRMSTATECHANGE_VOLATILE = $00000002;
  D3DRMSTATECHANGE_NONVOLATILE = $00000004;
  D3DRMSTATECHANGE_RENDER = $00000020;
  D3DRMSTATECHANGE_LIGHT = $00000040;

// Constants for enum CONST_D3DRMLOADFLAGS
type
  CONST_D3DRMLOADFLAGS = TOleEnum;
const
  D3DRMLOAD_FROMFILE = $00000000;
  D3DRMLOAD_FROMRESOURCE = $00000001;
  D3DRMLOAD_FROMMEMORY = $00000002;
  D3DRMLOAD_FROMSTREAM = $00000004;
  D3DRMLOAD_FROMUR = $00000008;
  D3DRMLOAD_BYNAME = $00000010;
  D3DRMLOAD_BYPOSITION = $00000020;
  D3DRMLOAD_BYGUID = $00000040;
  D3DRMLOAD_FIRST = $00000080;
  D3DRMLOAD_INSTANCEBYREFERENCE = $00000100;
  D3DRMLOAD_INSTANCEBYCOPYING = $00000200;
  D3DRMLOAD_ASYNCHRONOUS = $00000400;

// Constants for enum CONST_D3DRMSAVEFLAGS
type
  CONST_D3DRMSAVEFLAGS = TOleEnum;
const
  D3DRMXOFSAVE_NORMALS = $00000001;
  D3DRMXOFSAVE_TEXTURECOORDINATES = $00000002;
  D3DRMXOFSAVE_MATERIALS = $00000004;
  D3DRMXOFSAVE_TEXTURENAMES = $00000008;
  D3DRMXOFSAVE_ALL = $0000000F;
  D3DRMXOFSAVE_TEMPLATES = $00000010;
  D3DRMXOFSAVE_TEXTURETOPOLOGY = $00000020;

// Constants for enum CONST_D3DRMMATERIALOVERRIDEFLAGS
type
  CONST_D3DRMMATERIALOVERRIDEFLAGS = TOleEnum;
const
  D3DRMMATERIALOVERRIDE_DIFFUSE_ALPHAONLY = $00000001;
  D3DRMMATERIALOVERRIDE_DIFFUSE_RGBONLY = $00000002;
  D3DRMMATERIALOVERRIDE_DIFFUSE = $00000003;
  D3DRMMATERIALOVERRIDE_AMBIENT = $00000004;
  D3DRMMATERIALOVERRIDE_EMISSIVE = $00000008;
  D3DRMMATERIALOVERRIDE_SPECULAR = $00000010;
  D3DRMMATERIALOVERRIDE_POWER = $00000020;
  D3DRMMATERIALOVERRIDE_TEXTURE = $00000040;
  D3DRMMATERIALOVERRIDE_DIFFUSE_ALPHAMULTIPLY = $00000080;
  D3DRMMATERIALOVERRIDE_ALL = $000000FF;

// Constants for enum CONST_D3DSHADEMODE
type
  CONST_D3DSHADEMODE = TOleEnum;
const
  D3DSHADE_FLAT = $00000001;
  D3DSHADE_GOURAUD = $00000002;
  D3DSHADE_PHONG = $00000003;

// Constants for enum CONST_D3DFILLMODE
type
  CONST_D3DFILLMODE = TOleEnum;
const
  D3DFILL_POINT = $00000001;
  D3DFILL_WIREFRAME = $00000002;
  D3DFILL_SOLID = $00000003;

// Constants for enum CONST_D3DBLEND
type
  CONST_D3DBLEND = TOleEnum;
const
  D3DBLEND_ZERO = $00000001;
  D3DBLEND_ONE = $00000002;
  D3DBLEND_SRCCOLOR = $00000003;
  D3DBLEND_INVSRCCOLOR = $00000004;
  D3DBLEND_SRCALPHA = $00000005;
  D3DBLEND_INVSRCALPHA = $00000006;
  D3DBLEND_DESTALPHA = $00000007;
  D3DBLEND_INVDESTALPHA = $00000008;
  D3DBLEND_DESTCOLOR = $00000009;
  D3DBLEND_INVDESTCOLOR = $0000000A;
  D3DBLEND_SRCALPHASAT = $0000000B;
  D3DBLEND_BOTHSRCALPHA = $0000000C;
  D3DBLEND_BOTHINVSRCALPHA = $0000000D;

// Constants for enum CONST_D3DTEXTUREADDRESS
type
  CONST_D3DTEXTUREADDRESS = TOleEnum;
const
  D3DTADDRESS_WRAP = $00000001;
  D3DTADDRESS_MIRROR = $00000002;
  D3DTADDRESS_CLAMP = $00000003;
  D3DTADDRESS_BORDER = $00000004;

// Constants for enum CONST_D3DCULL
type
  CONST_D3DCULL = TOleEnum;
const
  D3DCULL_NONE = $00000001;
  D3DCULL_CW = $00000002;
  D3DCULL_CCW = $00000003;

// Constants for enum CONST_D3DCMPFUNC
type
  CONST_D3DCMPFUNC = TOleEnum;
const
  D3DCMP_NEVER = $00000001;
  D3DCMP_LESS = $00000002;
  D3DCMP_EQUAL = $00000003;
  D3DCMP_LESSEQUAL = $00000004;
  D3DCMP_GREATER = $00000005;
  D3DCMP_NOTEQUAL = $00000006;
  D3DCMP_GREATEREQUAL = $00000007;
  D3DCMP_ALWAYS = $00000008;

// Constants for enum CONST_D3DSTENCILOP
type
  CONST_D3DSTENCILOP = TOleEnum;
const
  D3DSTENCILOP_KEEP = $00000001;
  D3DSTENCILOP_ZERO = $00000002;
  D3DSTENCILOP_REPLACE = $00000003;
  D3DSTENCILOP_INCRSAT = $00000004;
  D3DSTENCILOP_DECRSAT = $00000005;
  D3DSTENCILOP_INVERT = $00000006;
  D3DSTENCILOP_INCR = $00000007;
  D3DSTENCILOP_DECR = $00000008;

// Constants for enum CONST_D3DFOGMODE
type
  CONST_D3DFOGMODE = TOleEnum;
const
  D3DFOG_NONE = $00000000;
  D3DFOG_EXP = $00000001;
  D3DFOG_EXP2 = $00000002;
  D3DFOG_LINEAR = $00000003;

// Constants for enum CONST_D3DZBUFFERTYPE
type
  CONST_D3DZBUFFERTYPE = TOleEnum;
const
  D3DZB_FALSE = $00000000;
  D3DZB_TRUE = $00000001;
  D3DZB_USEW = $00000002;

// Constants for enum CONST_D3DANTIALIASMODE
type
  CONST_D3DANTIALIASMODE = TOleEnum;
const
  D3DANTIALIAS_NONE = $00000000;
  D3DANTIALIAS_SORTDEPENDENT = $00000001;
  D3DANTIALIAS_SORTINDEPENDENT = $00000002;

// Constants for enum CONST_D3DPROCESSVERTICESFLAGS
type
  CONST_D3DPROCESSVERTICESFLAGS = TOleEnum;
const
  D3DPV_DEFAULT = $00000000;
  D3DPV_DONOTCOPYDATA = $00000001;

// Constants for enum CONST_D3DPRIMITIVETYPE
type
  CONST_D3DPRIMITIVETYPE = TOleEnum;
const
  D3DPT_POINTLIST = $00000001;
  D3DPT_LINELIST = $00000002;
  D3DPT_LINESTRIP = $00000003;
  D3DPT_TRIANGLELIST = $00000004;
  D3DPT_TRIANGLESTRIP = $00000005;
  D3DPT_TRIANGLEFAN = $00000006;

// Constants for enum CONST_D3DTRANSFORMSTATETYPE
type
  CONST_D3DTRANSFORMSTATETYPE = TOleEnum;
const
  D3DTRANSFORMSTATE_WORLD = $00000001;
  D3DTRANSFORMSTATE_VIEW = $00000002;
  D3DTRANSFORMSTATE_PROJECTION = $00000003;

// Constants for enum CONST_D3DRENDERSTATETYPE
type
  CONST_D3DRENDERSTATETYPE = TOleEnum;
const
  D3DRENDERSTATE_ANTIALIAS = $00000002;
  D3DRENDERSTATE_TEXTUREPERSPECTIVE = $00000004;
  D3DRENDERSTATE_ZENABLE = $00000007;
  D3DRENDERSTATE_FILLMODE = $00000008;
  D3DRENDERSTATE_SHADEMODE = $00000009;
  D3DRENDERSTATE_LINEPATTERN = $0000000A;
  D3DRENDERSTATE_ZWRITEENABLE = $0000000E;
  D3DRENDERSTATE_ALPHATESTENABLE = $0000000F;
  D3DRENDERSTATE_LASTPIXEL = $00000010;
  D3DRENDERSTATE_SRCBLEND = $00000013;
  D3DRENDERSTATE_DESTBLEND = $00000014;
  D3DRENDERSTATE_CULLMODE = $00000016;
  D3DRENDERSTATE_ZFUNC = $00000017;
  D3DRENDERSTATE_ALPHAREF = $00000018;
  D3DRENDERSTATE_ALPHAFUNC = $00000019;
  D3DRENDERSTATE_DITHERENABLE = $0000001A;
  D3DRENDERSTATE_ALPHABLENDENABLE = $0000001B;
  D3DRENDERSTATE_FOGENABLE = $0000001C;
  D3DRENDERSTATE_SPECULARENABLE = $0000001D;
  D3DRENDERSTATE_ZVISIBLE = $0000001E;
  D3DRENDERSTATE_STIPPLEDALPHA = $00000021;
  D3DRENDERSTATE_FOGCOLOR = $00000022;
  D3DRENDERSTATE_FOGTABLEMODE = $00000023;
  D3DRENDERSTATE_EDGEANTIALIAS = $00000028;
  D3DRENDERSTATE_COLORKEYENABLE = $00000029;
  D3DRENDERSTATE_ZBIAS = $0000002F;
  D3DRENDERSTATE_RANGEFOGENABLE = $00000030;
  D3DRENDERSTATE_STENCILENABLE = $00000034;
  D3DRENDERSTATE_STENCILFAIL = $00000035;
  D3DRENDERSTATE_STENCILZFAIL = $00000036;
  D3DRENDERSTATE_STENCILPASS = $00000037;
  D3DRENDERSTATE_STENCILFUNC = $00000038;
  D3DRENDERSTATE_STENCILREF = $00000039;
  D3DRENDERSTATE_STENCILMASK = $0000003A;
  D3DRENDERSTATE_STENCILWRITEMASK = $0000003B;
  D3DRENDERSTATE_TEXTUREFACTOR = $0000003C;
  D3DRENDERSTATE_WRAP0 = $00000080;
  D3DRENDERSTATE_WRAP1 = $00000081;
  D3DRENDERSTATE_WRAP2 = $00000082;
  D3DRENDERSTATE_WRAP3 = $00000083;
  D3DRENDERSTATE_WRAP4 = $00000084;
  D3DRENDERSTATE_WRAP5 = $00000085;
  D3DRENDERSTATE_WRAP6 = $00000086;
  D3DRENDERSTATE_WRAP7 = $00000087;
  D3DRENDERSTATE_CLIPPING = $00000088;
  D3DRENDERSTATE_LIGHTING = $00000089;
  D3DRENDERSTATE_EXTENTS = $0000008A;
  D3DRENDERSTATE_AMBIENT = $0000008B;
  D3DRENDERSTATE_FOGVERTEXMODE = $0000008C;
  D3DRENDERSTATE_COLORVERTEX = $0000008D;
  D3DRENDERSTATE_LOCALVIEWER = $0000008E;
  D3DRENDERSTATE_NORMALIZENORMALS = $0000008F;
  D3DRENDERSTATE_COLORKEYBLENDENABLE = $00000090;
  D3DRENDERSTATE_DIFFUSEMATERIALSOURCE = $00000091;
  D3DRENDERSTATE_SPECULARMATERIALSOURCE = $00000092;
  D3DRENDERSTATE_AMBIENTMATERIALSOURCE = $00000093;
  D3DRENDERSTATE_EMISSIVEMATERIALSOURCE = $00000094;
  D3DRENDERSTATE_ALPHASOURCE = $00000095;
  D3DRENDERSTATE_FOGFACTORSOURCE = $00000096;
  D3DRENDERSTATE_VERTEXBLEND = $00000097;
  D3DRENDERSTATE_CLIPPLANEENABLE = $00000098;

// Constants for enum CONST_D3DRENDERSTATESINGLE
type
  CONST_D3DRENDERSTATESINGLE = TOleEnum;
const
  D3DRENDERSTATE_FOGSTART = $00000024;
  D3DRENDERSTATE_FOGEND = $00000025;
  D3DRENDERSTATE_FOGDENSITY = $00000026;

// Constants for enum CONST_DDLOCKFLAGS
type
  CONST_DDLOCKFLAGS = TOleEnum;
const
  DDLOCK_SURFACEMEMORYPTR = $00000000;
  DDLOCK_WAIT = $00000001;
  DDLOCK_EVENT = $00000002;
  DDLOCK_READONLY = $00000010;
  DDLOCK_WRITEONLY = $00000020;
  DDLOCK_NOSYSLOCK = $00000800;
  DDLOCK_DONOTWAIT = $00004000;

// Constants for enum CONST_DDPCAPSFLAGS
type
  CONST_DDPCAPSFLAGS = TOleEnum;
const
  DDPCAPS_4BIT = $00000001;
  DDPCAPS_8BITENTRIES = $00000002;
  DDPCAPS_8BIT = $00000004;
  DDPCAPS_INITIALIZE = $00000008;
  DDPCAPS_PRIMARYSURFACE = $00000010;
  DDPCAPS_PRIMARYSURFACELEFT = $00000020;
  DDPCAPS_ALLOW256 = $00000040;
  DDPCAPS_VSYNC = $00000080;
  DDPCAPS_1BIT = $00000100;
  DDPCAPS_2BIT = $00000200;
  DDPCAPS_ALPHA = $00000400;

// Constants for enum CONST_DDEDMFLAGS
type
  CONST_DDEDMFLAGS = TOleEnum;
const
  DDEDM_DEFAULT = $00000000;
  DDEDM_REFRESHRATES = $00000001;
  DDEDM_STANDARDVGAMODES = $00000002;

// Constants for enum CONST_DDSCLFLAGS
type
  CONST_DDSCLFLAGS = TOleEnum;
const
  DDSCL_FULLSCREEN = $00000001;
  DDSCL_ALLOWREBOOT = $00000002;
  DDSCL_NOWINDOWCHANGES = $00000004;
  DDSCL_NORMAL = $00000008;
  DDSCL_EXCLUSIVE = $00000010;
  DDSCL_ALLOWMODEX = $00000040;
  DDSCL_CREATEDEVICEWINDOW = $00000200;
  DDSCL_MULTITHREADED = $00000400;
  DDSCL_SETDEVICEWINDOW = $00000100;
  DDSCL_SETFOCUSWINDOW = $00000080;

// Constants for enum CONST_DDSDMFLAGS
type
  CONST_DDSDMFLAGS = TOleEnum;
const
  DDSDM_DEFAULT = $00000000;
  DDSDM_STANDARDVGAMODE = $00000001;

// Constants for enum CONST_DDBLTFLAGS
type
  CONST_DDBLTFLAGS = TOleEnum;
const
  DDBLT_ASYNC = $00000200;
  DDBLT_COLORFILL = $00000400;
  DDBLT_DDFX = $00000800;
  DDBLT_DDROPS = $00001000;
  DDBLT_KEYDEST = $00002000;
  DDBLT_KEYDESTOVERRIDE = $00004000;
  DDBLT_KEYSRC = $00008000;
  DDBLT_KEYSRCOVERRIDE = $00010000;
  DDBLT_ROP = $00020000;
  DDBLT_ROTATIONANGLE = $00040000;
  DDBLT_WAIT = $01000000;
  DDBLT_DEPTHFILL = $02000000;
  DDBLT_DONOTWAIT = $08000000;

// Constants for enum CONST_DDBLTFASTFLAGS
type
  CONST_DDBLTFASTFLAGS = TOleEnum;
const
  DDBLTFAST_NOCOLORKEY = $00000000;
  DDBLTFAST_SRCCOLORKEY = $00000001;
  DDBLTFAST_DESTCOLORKEY = $00000002;
  DDBLTFAST_WAIT = $00000010;
  DDBLTFAST_DONOTWAIT = $00000020;

// Constants for enum CONST_DDFLIPFLAGS
type
  CONST_DDFLIPFLAGS = TOleEnum;
const
  DDFLIP_WAIT = $00000001;
  DDFLIP_EVEN = $00000002;
  DDFLIP_ODD = $00000004;
  DDFLIP_NOVSYNC = $00000008;
  DDFLIP_STEREO = $00000010;
  DDFLIP_DONOTWAIT = $00000020;
  DDFLIP_INTERFVAL2 = $20000000;
  DDFLIP_INTERFVAL3 = $30000000;
  DDFLIP_INTERFVAL4 = $40000000;

// Constants for enum CONST_DDENUMOVERLAYZFLAGS
type
  CONST_DDENUMOVERLAYZFLAGS = TOleEnum;
const
  DDENUMOVERLAYZ_BACKTOFRONT = $00000000;
  DDENUMOVERLAYZ_FRONTTOBACK = $00000001;

// Constants for enum CONST_DDOVERFLAGS
type
  CONST_DDOVERFLAGS = TOleEnum;
const
  DDOVER_ALPHADEST = $00000001;
  DDOVER_ALPHADESTCONSTOVERRIDE = $00000002;
  DDOVER_ALPHADESTNEG = $00000004;
  DDOVER_ALPHADESTSURFACEOVERRIDE = $00000008;
  DDOVER_ALPHAEDGEBLEND = $00000010;
  DDOVER_ALPHASRC = $00000020;
  DDOVER_ALPHASRCCONSTOVERRIDE = $00000040;
  DDOVER_ALPHASRCNEG = $00000080;
  DDOVER_ALPHASRCSURFACEOVERRIDE = $00000100;
  DDOVER_HIDE = $00000200;
  DDOVER_KEYDEST = $00000400;
  DDOVER_KEYDESTOVERRIDE = $00000800;
  DDOVER_KEYSRC = $00001000;
  DDOVER_KEYSRCOVERRIDE = $00002000;
  DDOVER_SHOW = $00004000;
  DDOVER_ADDDIRTYRECT = $00008000;
  DDOVER_REFRESHDIRTYRECTS = $00010000;
  DDOVER_REFRESHALL = $00020000;
  DDOVER_DDFX = $00080000;
  DDOVER_AUTOFLIP = $00100000;
  DDOVER_BOB = $00200000;
  DDOVER_OVERRIDEBOBWEAVE = $00400000;
  DDOVER_INTERLEAVED = $00800000;
  DDOVER_ARGBSCALEFACTORS = $02000000;
  DDOVER_DEGRADEARGBSCALING = $04000000;

// Constants for enum CONST_DDOVERZFLAGS
type
  CONST_DDOVERZFLAGS = TOleEnum;
const
  DDOVERZ_SENDTOFRONT = $00000000;
  DDOVERZ_SENDTOBACK = $00000001;
  DDOVERZ_MOVEFORWARD = $00000002;
  DDOVERZ_MOVEBACKWARD = $00000003;
  DDOVERZ_INSERTINFRONTOF = $00000004;
  DDOVERZ_INSERTINBACKOF = $00000005;

// Constants for enum CONST_DDGFSFLAGS
type
  CONST_DDGFSFLAGS = TOleEnum;
const
  DDGFS_CANFLIP = $00000001;
  DDGFS_ISFLIPDONE = $00000002;

// Constants for enum CONST_DDGBSFLAGS
type
  CONST_DDGBSFLAGS = TOleEnum;
const
  DDGBS_CANBLT = $00000001;
  DDGBS_ISBLTDONE = $00000002;

// Constants for enum CONST_DDCKEYFLAGS
type
  CONST_DDCKEYFLAGS = TOleEnum;
const
  DDCKEY_COLORSPACE = $00000001;
  DDCKEY_DESTBLT = $00000002;
  DDCKEY_DESTOVERLAY = $00000004;
  DDCKEY_SRCBLT = $00000008;
  DDCKEY_SRCOVERLAY = $00000010;

// Constants for enum CONST_DDSGRFLAGS
type
  CONST_DDSGRFLAGS = TOleEnum;
const
  DDSGR_DEFAULT = $00000000;
  DDSGR_CALIBRATE = $00000001;

// Constants for enum CONST_DBOOLFLAGS
type
  CONST_DBOOLFLAGS = TOleEnum;
const
  D_FALSE = $00000000;
  D_TRUE = $00000001;

// Constants for enum CONST_DDBITDEPTHFLAGS
type
  CONST_DDBITDEPTHFLAGS = TOleEnum;
const
  DDBD_1 = $00004000;
  DDBD_2 = $00002000;
  DDBD_4 = $00001000;
  DDBD_8 = $00000800;
  DDBD_16 = $00000400;
  DDBD_24 = $00000200;
  DDBD_32 = $00000100;

// Constants for enum CONST_DDSURFACEDESCFLAGS
type
  CONST_DDSURFACEDESCFLAGS = TOleEnum;
const
  DDSD_CAPS = $00000001;
  DDSD_HEIGHT = $00000002;
  DDSD_WIDTH = $00000004;
  DDSD_PITCH = $00000008;
  DDSD_BACKBUFFERCOUNT = $00000020;
  DDSD_ZBUFFERBITDEPTH = $00000040;
  DDSD_ALPHABITDEPTH = $00000080;
  DDSD_TEXTURESTAGE = $00100000;
  DDSD_LPSURFACE = $00000800;
  DDSD_PIXELFORMAT = $00001000;
  DDSD_CKDESTOVERLAY = $00002000;
  DDSD_CKDESTBLT = $00004000;
  DDSD_CKSRCOVERLAY = $00008000;
  DDSD_CKSRCBLT = $00010000;
  DDSD_MIPMAPCOUNT = $00020000;
  DDSD_REFRESHRATE = $00040000;
  DDSD_LINEARSIZE = $00080000;
  DDSD_ALL = $000FF9EE;

// Constants for enum CONST_DDCOLORFLAGS
type
  CONST_DDCOLORFLAGS = TOleEnum;
const
  DDCOLOR_BRIGHTNESS = $00000001;
  DDCOLOR_CONTRAST = $00000002;
  DDCOLOR_HUE = $00000004;
  DDCOLOR_SATURATION = $00000008;
  DDCOLOR_SHARPNESS = $00000010;
  DDCOLOR_GAMMA = $00000020;
  DDCOLOR_COLORENABLE = $00000040;

// Constants for enum CONST_DDSURFACECAPSFLAGS
type
  CONST_DDSURFACECAPSFLAGS = TOleEnum;
const
  DDSCAPS_ALPHA = $00000002;
  DDSCAPS_BACKBUFFER = $00000004;
  DDSCAPS_COMPLEX = $00000008;
  DDSCAPS_FLIP = $00000010;
  DDSCAPS_FRONTBUFFER = $00000020;
  DDSCAPS_OFFSCREENPLAIN = $00000040;
  DDSCAPS_OVERLAY = $00000080;
  DDSCAPS_PALETTE = $00000100;
  DDSCAPS_PRIMARYSURFACE = $00000200;
  DDSCAPS_PRIMARYSURFACELEFT = $00000400;
  DDSCAPS_SYSTEMMEMORY = $00000800;
  DDSCAPS_TEXTURE = $00001000;
  DDSCAPS_3DDEVICE = $00002000;
  DDSCAPS_VIDEOMEMORY = $00004000;
  DDSCAPS_VISIBLE = $00008000;
  DDSCAPS_WRITEONLY = $00010000;
  DDSCAPS_ZBUFFER = $00020000;
  DDSCAPS_OWNDC = $00040000;
  DDSCAPS_LIVEVIDEO = $00080000;
  DDSCAPS_HWCODEC = $00100000;
  DDSCAPS_MODEX = $00200000;
  DDSCAPS_MIPMAP = $00400000;
  DDSCAPS_RESERVED2 = $00800000;
  DDSCAPS_ALLOCONLOAD = $04000000;
  DDSCAPS_VIDEOPORT = $08000000;
  DDSCAPS_LOCALVIDMEM = $10000000;
  DDSCAPS_NONLOCALVIDMEM = $20000000;
  DDSCAPS_STANDARDVGAMODE = $40000000;
  DDSCAPS_OPTIMIZED = $80000000;

// Constants for enum CONST_DDSURFACECAPS2FLAGS
type
  CONST_DDSURFACECAPS2FLAGS = TOleEnum;
const
  DDSCAPS2_HARDWAREDEINTERLACE = $00000002;
  DDSCAPS2_HINTDYNAMIC = $00000004;
  DDSCAPS2_HINTSTATIC = $00000008;
  DDSCAPS2_TEXTUREMANAGE = $00000010;
  DDSCAPS2_OPAQUE = $00000080;
  DDSCAPS2_HINTANTIALIASING = $00000100;
  DDSCAPS2_CUBEMAP = $00000200;
  DDSCAPS2_CUBEMAP_POSITIVEX = $00000400;
  DDSCAPS2_CUBEMAP_NEGATIVEX = $00000800;
  DDSCAPS2_CUBEMAP_POSITIVEY = $00001000;
  DDSCAPS2_CUBEMAP_NEGATIVEY = $00002000;
  DDSCAPS2_CUBEMAP_POSITIVEZ = $00004000;
  DDSCAPS2_CUBEMAP_NEGATIVEZ = $00008000;
  DDSCAPS2_CUBEMAP_ALLFACES = $0000FE00;
  DDSCAPS2_MIPMAPSUBLEVEL = $00010000;
  DDSCAPS2_D3DTEXTUREMANAGE = $00020000;
  DDSCAPS2_STEREOSURFACELEFT = $00080000;

// Constants for enum CONST_DDCAPS1FLAGS
type
  CONST_DDCAPS1FLAGS = TOleEnum;
const
  DDCAPS_3D = $00000001;
  DDCAPS_ALIGNBOUNDARYDEST = $00000002;
  DDCAPS_ALIGNSIZEDEST = $00000004;
  DDCAPS_ALIGNBOUNDARYSRC = $00000008;
  DDCAPS_ALIGNSIZESRC = $00000010;
  DDCAPS_ALIGNSTRIDE = $00000020;
  DDCAPS_BLT = $00000040;
  DDCAPS_BLTQUEUE = $00000080;
  DDCAPS_BLTFOURCC = $00000100;
  DDCAPS_BLTSTRETCH = $00000200;
  DDCAPS_GDI = $00000400;
  DDCAPS_OVERLAY = $00000800;
  DDCAPS_OVERLAYCANTCLIP = $00001000;
  DDCAPS_OVERLAYFOURCC = $00002000;
  DDCAPS_OVERLAYSTRETCH = $00004000;
  DDCAPS_PALETTE = $00008000;
  DDCAPS_PALETTEVSYNC = $00010000;
  DDCAPS_READSCANLINE = $00020000;
  DDCAPS_STEREOVIEW = $00040000;
  DDCAPS_VBI = $00080000;
  DDCAPS_ZBLTS = $00100000;
  DDCAPS_ZOVERLAYS = $00200000;
  DDCAPS_COLORKEY = $00400000;
  DDCAPS_ALPHA = $00800000;
  DDCAPS_COLORKEYHWASSIST = $01000000;
  DDCAPS_NOHARDWARE = $02000000;
  DDCAPS_BLTCOLORFILL = $04000000;
  DDCAPS_BANKSWITCHED = $08000000;
  DDCAPS_BLTDEPTHFILL = $10000000;
  DDCAPS_CANCLIP = $20000000;
  DDCAPS_CANCLIPSTRETCHED = $40000000;
  DDCAPS_CANBLTSYSMEM = $80000000;

// Constants for enum CONST_DDCAPS2FLAGS
type
  CONST_DDCAPS2FLAGS = TOleEnum;
const
  DDCAPS2_CERTIFIED = $00000001;
  DDCAPS2_NO2DDURING3DSCENE = $00000002;
  DDCAPS2_VIDEOPORT = $00000004;
  DDCAPS2_AUTOFLIPOVERLAY = $00000008;
  DDCAPS2_CANBOBINTERLEAVED = $00000010;
  DDCAPS2_CANBOBNONINTERLEAVED = $00000020;
  DDCAPS2_COLORCONTROLOVERLAY = $00000040;
  DDCAPS2_COLORCONTROLPRIMARY = $00000080;
  DDCAPS2_CANDROPZ16BIT = $00000100;
  DDCAPS2_NONLOCALVIDMEM = $00000200;
  DDCAPS2_NONLOCALVIDMEMCAPS = $00000400;
  DDCAPS2_NOPAGELOCKREQUIRED = $00000800;
  DDCAPS2_WIDESURFACES = $00001000;
  DDCAPS2_CANFLIPODDEVEN = $00002000;
  DDCAPS2_CANBOBHARDWARE = $00004000;
  DDCAPS2_COPYFOURCC = $00008000;
  DDCAPS2_PRIMARYGAMMA = $00020000;
  DDCAPS2_CANRENDERWINDOWED = $00080000;
  DDCAPS2_CANCALIBRATEGAMMA = $00100000;
  DDCAPS2_FLIPINTERVAL = $00200000;
  DDCAPS2_FLIPNOVSYNC = $00400000;
  DDCAPS2_CANMANAGETEXTURE = $00800000;
  DDCAPS2_STEREO = $02000000;

// Constants for enum CONST_DDFXCAPSFLAGS
type
  CONST_DDFXCAPSFLAGS = TOleEnum;
const
  DDFXCAPS_BLTARITHSTRETCHY = $00000020;
  DDFXCAPS_BLTARITHSTRETCHYN = $00000010;
  DDFXCAPS_BLTMIRRORLEFTRIGHT = $00000040;
  DDFXCAPS_BLTMIRRORUPDOWN = $00000080;
  DDFXCAPS_BLTROTATION = $00000100;
  DDFXCAPS_BLTROTATION90 = $00000200;
  DDFXCAPS_BLTSHRINKX = $00000400;
  DDFXCAPS_BLTSHRINKXN = $00000800;
  DDFXCAPS_BLTSHRINKY = $00001000;
  DDFXCAPS_BLTSHRINKYN = $00002000;
  DDFXCAPS_BLTSTRETCHX = $00004000;
  DDFXCAPS_BLTSTRETCHXN = $00008000;
  DDFXCAPS_BLTSTRETCHY = $00010000;
  DDFXCAPS_BLTSTRETCHYN = $00020000;
  DDFXCAPS_OVERLAYARITHSTRETCHY = $00040000;
  DDFXCAPS_OVERLAYARITHSTRETCHYN = $00000008;
  DDFXCAPS_OVERLAYSHRINKX = $00080000;
  DDFXCAPS_OVERLAYSHRINKXN = $00100000;
  DDFXCAPS_OVERLAYSHRINKY = $00200000;
  DDFXCAPS_OVERLAYSHRINKYN = $00400000;
  DDFXCAPS_OVERLAYSTRETCHX = $00800000;
  DDFXCAPS_OVERLAYSTRETCHXN = $01000000;
  DDFXCAPS_OVERLAYSTRETCHY = $02000000;
  DDFXCAPS_OVERLAYSTRETCHYN = $04000000;
  DDFXCAPS_OVERLAYMIRRORLEFTRIGHT = $08000000;
  DDFXCAPS_OVERLAYMIRRORUPDOWN = $10000000;
  DDFXCAPS_BLTALPHA = $00000001;
  DDFXCAPS_BLTTRANSFORM = $00000002;
  DDFXCAPS_BLTFILTER = $00000020;
  DDFXCAPS_OVERLAYALPHA = $00000004;
  DDFXCAPS_OVERLAYTRANSFORM = $20000000;
  DDFXCAPS_OVERLAYFILTER = $00040000;

// Constants for enum CONST_DDSTEREOCAPSFLAGS
type
  CONST_DDSTEREOCAPSFLAGS = TOleEnum;
const
  DDSVCAPS_ENIGMA = $00000001;
  DDSVCAPS_FLICKER = $00000002;
  DDSVCAPS_REDBLUE = $00000004;
  DDSVCAPS_SPLIT = $00000008;
  DDSVCAPS_STEREOSEQUENTIAL = $00000010;

// Constants for enum CONST_DDCKEYCAPSFLAGS
type
  CONST_DDCKEYCAPSFLAGS = TOleEnum;
const
  DDCKEYCAPS_DESTBLT = $00000001;
  DDCKEYCAPS_DESTBLTCLRSPACE = $00000002;
  DDCKEYCAPS_DESTBLTCLRSPACEYUV = $00000004;
  DDCKEYCAPS_DESTBLTYUV = $00000008;
  DDCKEYCAPS_DESTOVERLAY = $00000010;
  DDCKEYCAPS_DESTOVERLAYCLRSPACE = $00000020;
  DDCKEYCAPS_DESTOVERLAYCLRSPACEYUV = $00000040;
  DDCKEYCAPS_DESTOVERLAYONEACTIVE = $00000080;
  DDCKEYCAPS_DESTOVERLAYYUV = $00000100;
  DDCKEYCAPS_SRCBLT = $00000200;
  DDCKEYCAPS_SRCBLTCLRSPACE = $00000400;
  DDCKEYCAPS_SRCBLTCLRSPACEYUV = $00000800;
  DDCKEYCAPS_SRCBLTYUV = $00001000;
  DDCKEYCAPS_SRCOVERLAY = $00002000;
  DDCKEYCAPS_SRCOVERLAYCLRSPACE = $00004000;
  DDCKEYCAPS_SRCOVERLAYCLRSPACEYUV = $00008000;
  DDCKEYCAPS_SRCOVERLAYONEACTIVE = $00010000;
  DDCKEYCAPS_SRCOVERLAYYUV = $00020000;
  DDCKEYCAPS_NOCOSTOVERLAY = $00040000;

// Constants for enum CONST_DDPIXELFORMATFLAGS
type
  CONST_DDPIXELFORMATFLAGS = TOleEnum;
const
  DDPF_ALPHAPIXELS = $00000001;
  DDPF_ALPHA = $00000002;
  DDPF_FOURCC = $00000004;
  DDPF_PALETTEINDEXED4 = $00000008;
  DDPF_PALETTEINDEXEDTO8 = $00000010;
  DDPF_PALETTEINDEXED8 = $00000020;
  DDPF_RGB = $00000040;
  DDPF_COMPRESSED = $00000080;
  DDPF_RGBTOYUV = $00000100;
  DDPF_YUV = $00000200;
  DDPF_ZBUFFER = $00000400;
  DDPF_PALETTEINDEXED1 = $00000800;
  DDPF_PALETTEINDEXED2 = $00001000;
  DDPF_ZPIXELS = $00002000;
  DDPF_STENCILBUFFER = $00004000;
  DDPF_ALPHAPREMULT = $00008000;
  DDPF_LUMINANCE = $00020000;
  DDPF_BUMPLUMINANCE = $00040000;
  DDPF_BUMPDUDV = $00080000;

// Constants for enum CONST_DDENUMSURFACESFLAGS
type
  CONST_DDENUMSURFACESFLAGS = TOleEnum;
const
  DDENUMSURFACES_ALL = $00000001;
  DDENUMSURFACES_MATCH = $00000002;
  DDENUMSURFACES_NOMATCH = $00000004;
  DDENUMSURFACES_CANBECREATED = $00000008;
  DDENUMSURFACES_DOESEXIST = $00000010;

// Constants for enum CONST_DDRAW
type
  CONST_DDRAW = TOleEnum;
const
  DD_ROP_SPACE = $00000008;

// Constants for enum CONST_DDBLTFXFLAGS
type
  CONST_DDBLTFXFLAGS = TOleEnum;
const
  DDBLTFX_ARITHSTRETCHY = $00000001;
  DDBLTFX_MIRRORLEFTRIGHT = $00000002;
  DDBLTFX_MIRRORUPDOWN = $00000004;
  DDBLTFX_NOTEARING = $00000008;
  DDBLTFX_ROTATE180 = $00000010;
  DDBLTFX_ROTATE270 = $00000020;
  DDBLTFX_ROTATE90 = $00000040;
  DDBLTFX_ZBUFFERRANGE = $00000080;
  DDBLTFX_ZBUFFERBASEDEST = $00000100;

// Constants for enum CONST_DDWAITVBFLAGS
type
  CONST_DDWAITVBFLAGS = TOleEnum;
const
  DDWAITVB_BLOCKBEGIN = $00000001;
  DDWAITVB_BLOCKBEGINEVENT = $00000002;
  DDWAITVB_BLOCKEND = $00000004;

// Constants for enum CONST_DIENUMDEVICESFLAGS
type
  CONST_DIENUMDEVICESFLAGS = TOleEnum;
const
  DIEDFL_ALLDEVICES = $00000000;
  DIEDFL_ATTACHEDONLY = $00000001;
  DIEDFL_FORCEFEEDBACK = $00000100;
  DIEDFL_INCLUDEALIASES = $00010000;
  DIEDFL_INCLUDEPHANTOMS = $00020000;

// Constants for enum CONST_DIDEVICETYPE
type
  CONST_DIDEVICETYPE = TOleEnum;
const
  DIDEVTYPE_DEVICE = $00000001;
  DIDEVTYPE_MOUSE = $00000002;
  DIDEVTYPE_KEYBOARD = $00000003;
  DIDEVTYPE_JOYSTICK = $00000004;
  DIDEVTYPE_HID = $00010000;
  DIDEVTYPEMOUSE_UNKNOWN = $00000100;
  DIDEVTYPEMOUSE_TRADITIONAL = $00000200;
  DIDEVTYPEMOUSE_FINGERSTICK = $00000300;
  DIDEVTYPEMOUSE_TOUCHPAD = $00000400;
  DIDEVTYPEMOUSE_TRACKBALL = $00000500;
  DIDEVTYPEKEYBOARD_UNKNOWN = $00000000;
  DIDEVTYPEKEYBOARD_PCXT = $00000100;
  DIDEVTYPEKEYBOARD_OLIVETTI = $00000200;
  DIDEVTYPEKEYBOARD_PCAT = $00000300;
  DIDEVTYPEKEYBOARD_PCENH = $00000400;
  DIDEVTYPEKEYBOARD_NOKIA1050 = $00000500;
  DIDEVTYPEKEYBOARD_NOKIA9140 = $00000600;
  DIDEVTYPEKEYBOARD_NEC98 = $00000700;
  DIDEVTYPEKEYBOARD_NEC98LAPTOP = $00000800;
  DIDEVTYPEKEYBOARD_NEC98106 = $00000900;
  DIDEVTYPEKEYBOARD_JAPAN106 = $00000A00;
  DIDEVTYPEKEYBOARD_JAPANAX = $00000B00;
  DIDEVTYPEKEYBOARD_J3100 = $00000C00;
  DIDEVTYPEJOYSTICK_UNKNOWN = $00000100;
  DIDEVTYPEJOYSTICK_TRADITIONAL = $00000200;
  DIDEVTYPEJOYSTICK_FLIGHTSTICK = $00000300;
  DIDEVTYPEJOYSTICK_GAMEPAD = $00000400;
  DIDEVTYPEJOYSTICK_RUDDER = $00000500;
  DIDEVTYPEJOYSTICK_WHEEL = $00000600;
  DIDEVTYPEJOYSTICK_HEADTRACKER = $00000700;

// Constants for enum CONST_DIDFTFLAGS
type
  CONST_DIDFTFLAGS = TOleEnum;
const
  DIDFT_ALL = $00000000;
  DIDFT_RELAXIS = $00000001;
  DIDFT_ABSAXIS = $00000002;
  DIDFT_AXIS = $00000003;
  DIDFT_PSHBUTTON = $00000004;
  DIDFT_TGLBUTTON = $00000008;
  DIDFT_BUTTON = $0000000C;
  DIDFT_POV = $00000010;
  DIDFT_COLLECTION = $00000040;
  DIDFT_NODATA = $00000080;
  DIDFT_ANYINSTANCE = $00FFFF00;
  DIDFT_INSTANCEMASK = $00FFFF00;
  DIDFT_FFACTUATOR = $01000000;
  DIDFT_FFEFFECTTRIGGER = $02000000;
  DIDFT_NOCOLLECTION = $00FFFF00;

// Constants for enum CONST_DIDGDDFLAGS
type
  CONST_DIDGDDFLAGS = TOleEnum;
const
  DIGDD_DEFAULT = $00000000;
  DIGDD_PEEK = $00000001;

// Constants for enum CONST_DIPHFLAGS
type
  CONST_DIPHFLAGS = TOleEnum;
const
  DIPH_DEVICE = $00000000;
  DIPH_BYOFFSET = $00000001;
  DIPH_BYID = $00000002;

// Constants for enum CONST_DISCLFLAGS
type
  CONST_DISCLFLAGS = TOleEnum;
const
  DISCL_EXCLUSIVE = $00000001;
  DISCL_NONEXCLUSIVE = $00000002;
  DISCL_FOREGROUND = $00000004;
  DISCL_BACKGROUND = $00000008;

// Constants for enum CONST_DIDEVCAPSFLAGS
type
  CONST_DIDEVCAPSFLAGS = TOleEnum;
const
  DIDC_ATTACHED = $00000001;
  DIDC_POLLEDDEVICE = $00000002;
  DIDC_EMULATED = $00000004;
  DIDC_POLLEDDATAFORMAT = $00000008;
  DIDC_FORCEFEEDBACK = $00000100;
  DIDC_FFATTACK = $00000200;
  DIDC_FFFADE = $00000400;
  DIDC_SATURATION = $00000800;
  DIDC_POSNEGCOEFFICIENTS = $00001000;
  DIDC_POSNEGSATURATION = $00002000;
  DIDC_DEADBAND = $00004000;
  DIDC_ALIAS = $00010000;
  DIDC_PHANTOM = $00020000;

// Constants for enum CONST_DIDATAFORMATFLAGS
type
  CONST_DIDATAFORMATFLAGS = TOleEnum;
const
  DIDF_ABSAXIS = $00000001;
  DIDF_RELAXIS = $00000002;

// Constants for enum CONST_DIDEVICEOBJINSTANCEFLAGS
type
  CONST_DIDEVICEOBJINSTANCEFLAGS = TOleEnum;
const
  DIDOI_FFACTUATOR = $00000001;
  DIDOI_FFEFFECTTRIGGER = $00000002;
  DIDOI_POLLED = $00008000;
  DIDOI_ASPECTPOSITION = $00000100;
  DIDOI_ASPECTVELOCITY = $00000200;
  DIDOI_ASPECTACCEL = $00000300;
  DIDOI_ASPECTFORCE = $00000400;
  DIDOI_ASPECTMASK = $00000F00;

// Constants for enum CONST_DIKEYFLAGS
type
  CONST_DIKEYFLAGS = TOleEnum;
const
  DIK_ESCAPE = $00000001;
  DIK_1 = $00000002;
  DIK_2 = $00000003;
  DIK_3 = $00000004;
  DIK_4 = $00000005;
  DIK_5 = $00000006;
  DIK_6 = $00000007;
  DIK_7 = $00000008;
  DIK_8 = $00000009;
  DIK_9 = $0000000A;
  DIK_0 = $0000000B;
  DIK_MINUS = $0000000C;
  DIK_EQUALS = $0000000D;
  DIK_BACK = $0000000E;
  DIK_TAB = $0000000F;
  DIK_Q = $00000010;
  DIK_W = $00000011;
  DIK_E = $00000012;
  DIK_R = $00000013;
  DIK_T = $00000014;
  DIK_Y = $00000015;
  DIK_U = $00000016;
  DIK_I = $00000017;
  DIK_O = $00000018;
  DIK_P = $00000019;
  DIK_LBRACKET = $0000001A;
  DIK_RBRACKET = $0000001B;
  DIK_RETURN = $0000001C;
  DIK_LCONTROL = $0000001D;
  DIK_A = $0000001E;
  DIK_S = $0000001F;
  DIK_D = $00000020;
  DIK_F = $00000021;
  DIK_G = $00000022;
  DIK_H = $00000023;
  DIK_J = $00000024;
  DIK_K = $00000025;
  DIK_L = $00000026;
  DIK_SEMICOLON = $00000027;
  DIK_APOSTROPHE = $00000028;
  DIK_GRAVE = $00000029;
  DIK_LSHIFT = $0000002A;
  DIK_BACKSLASH = $0000002B;
  DIK_Z = $0000002C;
  DIK_X = $0000002D;
  DIK_C = $0000002E;
  DIK_V = $0000002F;
  DIK_B = $00000030;
  DIK_N = $00000031;
  DIK_M = $00000032;
  DIK_COMMA = $00000033;
  DIK_PERIOD = $00000034;
  DIK_SLASH = $00000035;
  DIK_RSHIFT = $00000036;
  DIK_MULTIPLY = $00000037;
  DIK_LMENU = $00000038;
  DIK_SPACE = $00000039;
  DIK_CAPITAL = $0000003A;
  DIK_F1 = $0000003B;
  DIK_F2 = $0000003C;
  DIK_F3 = $0000003D;
  DIK_F4 = $0000003E;
  DIK_F5 = $0000003F;
  DIK_F6 = $00000040;
  DIK_F7 = $00000041;
  DIK_F8 = $00000042;
  DIK_F9 = $00000043;
  DIK_F10 = $00000044;
  DIK_NUMLOCK = $00000045;
  DIK_SCROLL = $00000046;
  DIK_NUMPAD7 = $00000047;
  DIK_NUMPAD8 = $00000048;
  DIK_NUMPAD9 = $00000049;
  DIK_SUBTRACT = $0000004A;
  DIK_NUMPAD4 = $0000004B;
  DIK_NUMPAD5 = $0000004C;
  DIK_NUMPAD6 = $0000004D;
  DIK_ADD = $0000004E;
  DIK_NUMPAD1 = $0000004F;
  DIK_NUMPAD2 = $00000050;
  DIK_NUMPAD3 = $00000051;
  DIK_NUMPAD0 = $00000052;
  DIK_DECIMAL = $00000053;
  DIK_F11 = $00000057;
  DIK_F12 = $00000058;
  DIK_F13 = $00000064;
  DIK_F14 = $00000065;
  DIK_F15 = $00000066;
  DIK_KANA = $00000070;
  DIK_CONVERT = $00000079;
  DIK_NOCONVERT = $0000007B;
  DIK_YEN = $0000007D;
  DIK_NUMPADEQUALS = $0000008D;
  DIK_CIRCUMFLEX = $00000090;
  DIK_AT = $00000091;
  DIK_COLON = $00000092;
  DIK_UNDERLINE = $00000093;
  DIK_KANJI = $00000094;
  DIK_STOP = $00000095;
  DIK_AX = $00000096;
  DIK_UNLABELED = $00000097;
  DIK_NUMPADENTER = $0000009C;
  DIK_RCONTROL = $0000009D;
  DIK_NUMPADCOMMA = $000000B3;
  DIK_DIVIDE = $000000B5;
  DIK_SYSRQ = $000000B7;
  DIK_RMENU = $000000B8;
  DIK_PAUSE = $000000C5;
  DIK_HOME = $000000C7;
  DIK_UP = $000000C8;
  DIK_PRIOR = $000000C9;
  DIK_LEFT = $000000CB;
  DIK_RIGHT = $000000CD;
  DIK_END = $000000CF;
  DIK_DOWN = $000000D0;
  DIK_NEXT = $000000D1;
  DIK_INSERT = $000000D2;
  DIK_DELETE = $000000D3;
  DIK_LWIN = $000000DB;
  DIK_RWIN = $000000DC;
  DIK_APPS = $000000DD;

// Constants for enum CONST_DINPUT
type
  CONST_DINPUT = TOleEnum;
const
  DIPROPRANGE_NOMIN = $80000000;
  DIPROPRANGE_NOMAX = $7FFFFFFF;
  DIPROPAXISMODE_ABS = $00000000;
  DIPROPAXISMODE_REL = $00000001;
  DIPROPCALIBRATIONMODE_COOKED = $00000000;
  DIPROPCALIBRATIONMODE_RAW = $00000001;
  DIPROPAUTOCENTER_OFF = $00000000;
  DIPROPAUTOCENTER_ON = $00000001;
  DIEB_NOTRIGGER = $FFFFFFFF;

// Constants for enum CONST_DSSCLFLAGS
type
  CONST_DSSCLFLAGS = TOleEnum;
const
  DSSCL_NORMAL = $00000001;
  DSSCL_PRIORITY = $00000002;
  DSSCL_EXCLUSIVE = $00000003;
  DSSCL_WRITEPRIMARY = $00000004;

// Constants for enum CONST_DSSPEAKERFLAGS
type
  CONST_DSSPEAKERFLAGS = TOleEnum;
const
  DSSPEAKER_HEADPHONE = $00000001;
  DSSPEAKER_MONO = $00000002;
  DSSPEAKER_QUAD = $00000003;
  DSSPEAKER_STEREO = $00000004;
  DSSPEAKER_SURROUND = $00000005;
  DSSPEAKER_GEOMETRY_MIN = $00000005;
  DSSPEAKER_GEOMETRY_NARROW = $0000000A;
  DSSPEAKER_GEOMETRY_WIDE = $00000014;
  DSSPEAKER_GEOMETRY_MAX = $000000B4;

// Constants for enum CONST_DSBPLAYFLAGS
type
  CONST_DSBPLAYFLAGS = TOleEnum;
const
  DSBPLAY_DEFAULT = $00000000;
  DSBPLAY_LOOPING = $00000001;

// Constants for enum CONST_DSBLOCKFLAGS
type
  CONST_DSBLOCKFLAGS = TOleEnum;
const
  DSBLOCK_DEFAULT = $00000000;
  DSBLOCK_FROMWRITECURSOR = $00000001;
  DSBLOCK_ENTIREBUFFER = $00000002;

// Constants for enum CONST_DSCBLOCKFLAGS
type
  CONST_DSCBLOCKFLAGS = TOleEnum;
const
  DSCBLOCK_DEFAULT = $00000000;
  DSCBLOCK_ENTIREBUFFER = $00000001;

// Constants for enum CONST_DSBSTATUSFLAGS
type
  CONST_DSBSTATUSFLAGS = TOleEnum;
const
  DSBSTATUS_PLAYING = $00000001;
  DSBSTATUS_BUFFERLOST = $00000002;
  DSBSTATUS_LOOPING = $00000004;

// Constants for enum CONST_DS3DAPPLYFLAGS
type
  CONST_DS3DAPPLYFLAGS = TOleEnum;
const
  DS3D_IMMEDIATE = $00000000;
  DS3D_DEFERRED = $00000001;

// Constants for enum CONST_DS3DMODEFLAGS
type
  CONST_DS3DMODEFLAGS = TOleEnum;
const
  DS3DMODE_NORMAL = $00000000;
  DS3DMODE_HEADRELATIVE = $00000001;
  DS3DMODE_DISABLE = $00000002;

// Constants for enum CONST_DSCBSTATUSFLAGS
type
  CONST_DSCBSTATUSFLAGS = TOleEnum;
const
  DSCBSTATUS_CAPTURING = $00000001;
  DSCBSTATUS_LOOPING = $00000002;

// Constants for enum CONST_DSCBSTARTFLAGS
type
  CONST_DSCBSTARTFLAGS = TOleEnum;
const
  DSCBSTART_DEFAULT = $00000000;
  DSCBSTART_LOOPING = $00000001;

// Constants for enum CONST_DSCAPSFLAGS
type
  CONST_DSCAPSFLAGS = TOleEnum;
const
  DSCAPS_PRIMARYMONO = $00000001;
  DSCAPS_PRIMARYSTEREO = $00000002;
  DSCAPS_PRIMARY8BIT = $00000004;
  DSCAPS_PRIMARY16BIT = $00000008;
  DSCAPS_CONTINUOUSRATE = $00000010;
  DSCAPS_EMULDRIVER = $00000020;
  DSCAPS_CERTIFIED = $00000040;
  DSCAPS_SECONDARYMONO = $00000100;
  DSCAPS_SECONDARYSTEREO = $00000200;
  DSCAPS_SECONDARY8BIT = $00000400;
  DSCAPS_SECONDARY16BIT = $00000800;

// Constants for enum CONST_DSBCAPSFLAGS
type
  CONST_DSBCAPSFLAGS = TOleEnum;
const
  DSBCAPS_PRIMARYBUFFER = $00000001;
  DSBCAPS_STATIC = $00000002;
  DSBCAPS_LOCHARDWARE = $00000004;
  DSBCAPS_LOCSOFTWARE = $00000008;
  DSBCAPS_CTRL3D = $00000010;
  DSBCAPS_CTRLFREQUENCY = $00000020;
  DSBCAPS_CTRLPAN = $00000040;
  DSBCAPS_CTRLVOLUME = $00000080;
  DSBCAPS_CTRLPOSITIONNOTIFY = $00000100;
  DSBCAPS_STICKYFOCUS = $00004000;
  DSBCAPS_GLOBALFOCUS = $00008000;
  DSBCAPS_GETCURRENTPOSITION2 = $00010000;
  DSBCAPS_MUTE3DATMAXDISTANCE = $00020000;

// Constants for enum CONST_DSCBCAPSFLAGS
type
  CONST_DSCBCAPSFLAGS = TOleEnum;
const
  DSCBCAPS_DEFAULT = $00000000;
  DSCBCAPS_WAVEMAPPED = $80000000;

// Constants for enum CONST_DSCCAPSFLAGS
type
  CONST_DSCCAPSFLAGS = TOleEnum;
const
  DSCCAPS_DEFAULT = $00000000;
  DSCCAPS_EMULDRIVER = $00000020;

// Constants for enum CONST_DSOUND
type
  CONST_DSOUND = TOleEnum;
const
  DS3D_MINDISTANCEFACTOR = $00000000;
  DS3D_MAXDISTANCEFACTOR = $0000000A;
  DS3D_DEFAULTDISTANCEFACTOR = $00000001;
  DS3D_MINROLLOFFFACTOR = $00000000;
  DS3D_MAXROLLOFFFACTOR = $0000000A;
  DS3D_DEFAULTROLLOFFFACTOR = $00000001;
  DS3D_MINDOPPLERFACTOR = $00000000;
  DS3D_MAXDOPPLERFACTOR = $0000000A;
  DS3D_DEFAULTDOPPLERFACTOR = $00000001;
  DS3D_DEFAULTMINDISTANCE = $00000001;
  DS3D_DEFAULTMAXDISTANCE = $3B9ACA00;
  DS3D_MINCONEANGLE = $00000000;
  DS3D_MAXCONEANGLE = $00000168;
  DS3D_DEFAULTCONEANGLE = $00000168;
  DS3D_DEFAULTCONEOUTSIDEVOLUME = $00000000;
  DSBFREQUENCY_MIN = $00000064;
  DSBFREQUENCY_MAX = $000186A0;
  DSBFREQUENCY_ORIGINAL = $00000000;
  DSBPAN_LEFT = $FFFFD8F0;
  DSBPAN_CENTER = $00000000;
  DSBPAN_RIGHT = $00002710;
  DSBVOLUME_MIN = $FFFFD8F0;
  DSBVOLUME_MAX = $00000000;
  DSBSIZE_MIN = $00000004;
  DSBSIZE_MAX = $0FFFFFFF;
  DSBPN_OFFSETSTOP = $FFFFFFFF;
  WAVE_FORMAT_PCM = $00000001;

// Constants for enum CONST_D3DTEXTURESTAGESTATETYPE
type
  CONST_D3DTEXTURESTAGESTATETYPE = TOleEnum;
const
  D3DTSS_COLOROP = $00000001;
  D3DTSS_COLORARG1 = $00000002;
  D3DTSS_COLORARG2 = $00000003;
  D3DTSS_ALPHAOP = $00000004;
  D3DTSS_ALPHAARG1 = $00000005;
  D3DTSS_ALPHAARG2 = $00000006;
  D3DTSS_TEXCOORDINDEX = $0000000B;
  D3DTSS_ADDRESS = $0000000C;
  D3DTSS_ADDRESSU = $0000000D;
  D3DTSS_ADDRESSV = $0000000E;
  D3DTSS_BORDERCOLOR = $0000000F;
  D3DTSS_MAGFILTER = $00000010;
  D3DTSS_MINFILTER = $00000011;
  D3DTSS_MIPFILTER = $00000012;
  D3DTSS_MAXMIPLEVEL = $00000014;
  D3DTSS_MAXANISOTROPY = $00000015;
  D3DTSS_TEXTURETRANSFORMFLAGS = $00000018;

// Constants for enum CONST_D3DTEXCOORDINDEXFLAGS
type
  CONST_D3DTEXCOORDINDEXFLAGS = TOleEnum;
const
  D3DTSS_TCI_CAMERASPACENORMAL = $00010000;
  D3DTSS_TCI_CAMERASPACEPOSITION = $00020000;
  D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR = $00030000;
  D3DTSS_TCI_PASSTHRU = $00000000;

// Constants for enum CONST_D3DTEXTURESTAGESINGLE
type
  CONST_D3DTEXTURESTAGESINGLE = TOleEnum;
const
  D3DTSS_BUMPENVMAT00 = $00000007;
  D3DTSS_BUMPENVMAT01 = $00000008;
  D3DTSS_BUMPENVMAT10 = $00000009;
  D3DTSS_BUMPENVMAT11 = $0000000A;
  D3DTSS_MIPMAPLODBIAS = $00000013;
  D3DTSS_BUMPENVLSCALE = $00000016;
  D3DTSS_BUMPENVLOFFSET = $00000017;

// Constants for enum CONST_D3DTEXTUREOP
type
  CONST_D3DTEXTUREOP = TOleEnum;
const
  D3DTOP_DISABLE = $00000001;
  D3DTOP_SELECTARG1 = $00000002;
  D3DTOP_SELECTARG2 = $00000003;
  D3DTOP_MODULATE = $00000004;
  D3DTOP_MODULATE2X = $00000005;
  D3DTOP_MODULATE4X = $00000006;
  D3DTOP_ADD = $00000007;
  D3DTOP_ADDSIGNED = $00000008;
  D3DTOP_ADDSIGNED2X = $00000009;
  D3DTOP_SUBTRACT = $0000000A;
  D3DTOP_ADDSMOOTH = $0000000B;
  D3DTOP_BLENDDIFFUSEALPHA = $0000000C;
  D3DTOP_BLENDTEXTUREALPHA = $0000000D;
  D3DTOP_BLENDFACTORALPHA = $0000000E;
  D3DTOP_BLENDTEXTUREALPHAPM = $0000000F;
  D3DTOP_BLENDCURRENTALPHA = $00000010;
  D3DTOP_PREMODULATE = $00000011;
  D3DTOP_MODULATEALPHA_ADDCOLOR = $00000012;
  D3DTOP_MODULATECOLOR_ADDALPHA = $00000013;
  D3DTOP_MODULATEINVALPHA_ADDCOLOR = $00000014;
  D3DTOP_MODULATEINVCOLOR_ADDALPHA = $00000015;
  D3DTOP_BUMPENVMAP = $00000016;
  D3DTOP_BUMPENVMAPLUMINANCE = $00000017;
  D3DTOP_DOTPRODUCT3 = $00000018;

// Constants for enum CONST_D3DTEXTUREMAGFILTER
type
  CONST_D3DTEXTUREMAGFILTER = TOleEnum;
const
  D3DTFG_POINT = $00000001;
  D3DTFG_LINEAR = $00000002;
  D3DTFG_FLATCUBIC = $00000003;
  D3DTFG_GAUSSIANCUBIC = $00000004;
  D3DTFG_ANISOTROPIC = $00000005;

// Constants for enum CONST_D3DTEXTUREMINFILTER
type
  CONST_D3DTEXTUREMINFILTER = TOleEnum;
const
  D3DTFN_POINT = $00000001;
  D3DTFN_LINEAR = $00000002;
  D3DTFN_ANISOTROPIC = $00000003;

// Constants for enum CONST_D3DTEXTUREMIPFILTER
type
  CONST_D3DTEXTUREMIPFILTER = TOleEnum;
const
  D3DTFP_NONE = $00000001;
  D3DTFP_POINT = $00000002;
  D3DTFP_LINEAR = $00000003;

// Constants for enum CONST_DSETUPFLAGS
type
  CONST_DSETUPFLAGS = TOleEnum;
const
  DSETUP_DDRAWDRV = $00000008;
  DSETUP_DSOUNDDRV = $00000010;
  DSETUP_DXCORE = $00010000;
  DSETUP_DIRECTX = $00010018;
  DSETUP_TESTINSTALL = $00020000;

// Constants for enum CONST_DSETUPCALLBACKFLAGS
type
  CONST_DSETUPCALLBACKFLAGS = TOleEnum;
const
  DSETUP_CB_MSG_NOMESSAGE = $00000000;
  DSETUP_CB_MSG_CANTINSTALL_UNKNOWNOS = $00000001;
  DSETUP_CB_MSG_CANTINSTALL_NT = $00000002;
  DSETUP_CB_MSG_CANTINSTALL_BETA = $00000003;
  DSETUP_CB_MSG_CANTINSTALL_NOTWIN32 = $00000004;
  DSETUP_CB_MSG_CANTINSTALL_WRONGLANGUAGE = $00000005;
  DSETUP_CB_MSG_CANTINSTALL_WRONGPLATFORM = $00000006;
  DSETUP_CB_MSG_PREINSTALL_NT = $00000007;
  DSETUP_CB_MSG_NOTPREINSTALLEDONNT = $00000008;
  DSETUP_CB_MSG_SETUP_INIT_FAILED = $00000009;
  DSETUP_CB_MSG_INTERNAL_ERROR = $0000000A;
  DSETUP_CB_MSG_CHECK_DRIVER_UPGRADE = $0000000B;
  DSETUP_CB_MSG_OUTOFDISKSPACE = $0000000C;
  DSETUP_CB_MSG_BEGIN_INSTALL = $0000000D;
  DSETUP_CB_MSG_BEGIN_INSTALL_RUNTIME = $0000000E;
  DSETUP_CB_MSG_BEGIN_INSTALL_DRIVERS = $0000000F;
  DSETUP_CB_MSG_BEGIN_RESTORE_DRIVERS = $00000010;
  DSETUP_CB_MSG_FILECOPYERROR = $00000011;
  DSETUP_CB_UPGRADE_TYPE_MASK = $0000000F;
  DSETUP_CB_UPGRADE_KEEP = $00000001;
  DSETUP_CB_UPGRADE_SAFE = $00000002;
  DSETUP_CB_UPGRADE_FORCE = $00000004;
  DSETUP_CB_UPGRADE_UNKNOWN = $00000008;
  DSETUP_CB_UPGRADE_HASWARNINGS = $00000100;
  DSETUP_CB_UPGRADE_CANTBACKUP = $00000200;
  DSETUP_CB_UPGRADE_DEVICE_ACTIVE = $00000800;
  DSETUP_CB_UPGRADE_DEVICE_DISPLAY = $00001000;
  DSETUP_CB_UPGRADE_DEVICE_MEDIA = $00002000;

// Constants for enum CONST_D3DRMANIMATIONFLAGS
type
  CONST_D3DRMANIMATIONFLAGS = TOleEnum;
const
  D3DRMANIMATION_OPEN = $00000001;
  D3DRMANIMATION_CLOSED = $00000002;
  D3DRMANIMATION_LINEARPOSITION = $00000004;
  D3DRMANIMATION_SPLINEPOSITION = $00000008;
  D3DRMANIMATION_SCALEANDROTATION = $00000010;
  D3DRMANIMATION_POSITION = $00000020;

// Constants for enum CONST_D3DRMANIMATIONKEYFLAGS
type
  CONST_D3DRMANIMATIONKEYFLAGS = TOleEnum;
const
  D3DRMANIMATION_ROTATEKEY = $00000001;
  D3DRMANIMATION_SCALEKEY = $00000002;
  D3DRMANIMATION_POSITIONKEY = $00000003;

// Constants for enum CONST_DPGROUPFLAGS
type
  CONST_DPGROUPFLAGS = TOleEnum;
const
  DPGROUP_DEFAULT = $00000000;
  DPGROUP_LOCAL = $00000008;
  DPGROUP_STAGINGAREA = $00000800;
  DPGROUP_HIDDEN = $00001000;

// Constants for enum CONST_DPPLAYERFLAGS
type
  CONST_DPPLAYERFLAGS = TOleEnum;
const
  DPPLAYER_DEFAULT = $00000000;
  DPPLAYER_SERVERPLAYER = $00000100;
  DPPLAYER_SPECTATOR = $00000200;
  DPPLAYER_LOCAL = $00000008;

// Constants for enum CONST_DPENUMCONNECTIONFLAGS
type
  CONST_DPENUMCONNECTIONFLAGS = TOleEnum;
const
  DPCONNECTION_DIRECTPLAY = $00000001;
  DPCONNECTION_DIRECTPLAYLOBBY = $00000002;

// Constants for enum CONST_DPCONNECTFLAGS
type
  CONST_DPCONNECTFLAGS = TOleEnum;
const
  DPCONNECTION_DEFAULT = $00000000;
  DPCONNECTION_RETURNSTATUS = $00000080;

// Constants for enum CONST_DPENUMPLAYERFLAGS
type
  CONST_DPENUMPLAYERFLAGS = TOleEnum;
const
  DPENUMPLAYERS_ALL = $00000000;
  DPENUMPLAYERS_LOCAL = $00000008;
  DPENUMPLAYERS_REMOTE = $00000010;
  DPENUMPLAYERS_GROUP = $00000020;
  DPENUMPLAYERS_SESSION = $00000080;
  DPENUMPLAYERS_SERVERPLAYER = $00000100;
  DPENUMPLAYERS_SPECTATOR = $00000200;
  DPENUMPLAYERS_OWNER = $00002000;

// Constants for enum CONST_DPENUMGROUPFLAGS
type
  CONST_DPENUMGROUPFLAGS = TOleEnum;
const
  DPENUMGROUPS_ALL = $00000000;
  DPENUMGROUPS_HIDDEN = $00001000;
  DPENUMGROUPS_LOCAL = $00000008;
  DPENUMGROUPS_REMOTE = $00000010;
  DPENUMGROUPS_SESSION = $00000080;
  DPENUMGROUPS_STAGINGAREA = $00000800;
  DPENUMGROUPS_SHORTCUT = $00000400;

// Constants for enum CONST_DPENUMSESSIONFLAGS
type
  CONST_DPENUMSESSIONFLAGS = TOleEnum;
const
  DPENUMSESSIONS_ALL = $00000002;
  DPENUMSESSIONS_ASYNC = $00000010;
  DPENUMSESSIONS_AVAILABLE = $00000001;
  DPENUMSESSIONS_PASSWORDREQUIRED = $00000040;
  DPENUMSESSIONS_RETURNSTATUS = $00000080;
  DPENUMSESSIONS_STOPASYNC = $00000010;

// Constants for enum CONST_DPGETCAPSFLAGS
type
  CONST_DPGETCAPSFLAGS = TOleEnum;
const
  DPGETCAPS_DEFAULT = $00000000;
  DPGETCAPS_GUARANTEED = $00000001;

// Constants for enum CONST_DPGETFLAGS
type
  CONST_DPGETFLAGS = TOleEnum;
const
  DPGET_REMOTE = $00000000;
  DPGET_LOCAL = $00000001;

// Constants for enum CONST_DPSETFLAGS
type
  CONST_DPSETFLAGS = TOleEnum;
const
  DPSET_REMOTE = $00000000;
  DPSET_LOCAL = $00000001;
  DPSET_GUARANTEED = $00000002;

// Constants for enum CONST_DPMESSAGEQUEUEFLAGS
type
  CONST_DPMESSAGEQUEUEFLAGS = TOleEnum;
const
  DPMESSAGEQUEUE_SEND = $00000001;
  DPMESSAGEQUEUE_RECEIVE = $00000002;

// Constants for enum CONST_DPOPENFLAGS
type
  CONST_DPOPENFLAGS = TOleEnum;
const
  DPOPEN_JOIN = $00000001;
  DPOPEN_CREATE = $00000002;
  DPOPEN_RETURNSTATUS = $00000080;

// Constants for enum CONST_DPRECEIVEFLAGS
type
  CONST_DPRECEIVEFLAGS = TOleEnum;
const
  DPRECEIVE_ALL = $00000001;
  DPRECEIVE_PEEK = $00000008;
  DPRECEIVE_TOPLAYER = $00000002;
  DPRECEIVE_FROMPLAYER = $00000004;

// Constants for enum CONST_DPSENDFLAGS
type
  CONST_DPSENDFLAGS = TOleEnum;
const
  DPSEND_DEFAULT = $00000000;
  DPSEND_GUARANTEED = $00000001;
  DPSEND_SIGNED = $00000020;
  DPSEND_ENCRYPTED = $00000040;
  DPSEND_NOSENDCOMPLETEMSG = $00000400;
  DPSEND_ASYNC = $00000200;

// Constants for enum CONST_DPLMSG
type
  CONST_DPLMSG = TOleEnum;
const
  DPLMSG_SYSTEM = $00000001;
  DPLMSG_STANDARD = $00000002;
  DPLMSG_USERDEFINED = $00000000;

// Constants for enum CONST_DPLWAIT
type
  CONST_DPLWAIT = TOleEnum;
const
  DPLWAIT_DEFAULT = $00000000;
  DPLWAIT_CANCEL = $00000001;

// Constants for enum CONST_DPIDFLAGS
type
  CONST_DPIDFLAGS = TOleEnum;
const
  DPID_SYSMSG = $00000000;
  DPID_ALLPLAYERS = $00000000;
  DPID_SERVERPLAYER = $00000001;
  DPID_UNKNOWN = $FFFFFFFF;

// Constants for enum CONST_DPSESSIONFLAGS
type
  CONST_DPSESSIONFLAGS = TOleEnum;
const
  DPSESSION_NEWPLAYERSDISABLED = $00000001;
  DPSESSION_MIGRATEHOST = $00000004;
  DPSESSION_NOMESSAGEID = $00000008;
  DPSESSION_JOINDISABLED = $00000020;
  DPSESSION_KEEPALIVE = $00000040;
  DPSESSION_NODATAMESSAGES = $00000080;
  DPSESSION_SECURESERVER = $00000100;
  DPSESSION_PRIVATE = $00000200;
  DPSESSION_PASSWORDREQUIRED = $00000400;
  DPSESSION_MULTICASTSERVER = $00000800;
  DPSESSION_CLIENTSERVER = $00001000;
  DPSESSION_DIRECTPLAYPROTOCOL = $00002000;
  DPSESSION_NOPRESERVEORDER = $00004000;
  DPSESSION_OPTIMIZELATENCY = $00008000;

// Constants for enum CONST_DPLCONNECTIONFLAGS
type
  CONST_DPLCONNECTIONFLAGS = TOleEnum;
const
  DPLCONNECTION_CREATESESSION = $00000002;
  DPLCONNECTION_JOINSESSION = $00000001;

// Constants for enum CONST_DPSYSMSGTYPES
type
  CONST_DPSYSMSGTYPES = TOleEnum;
const
  DPSYS_CREATEPLAYERORGROUP = $00000003;
  DPSYS_DESTROYPLAYERORGROUP = $00000005;
  DPSYS_ADDPLAYERTOGROUP = $00000007;
  DPSYS_DELETEPLAYERFROMGROUP = $00000021;
  DPSYS_SESSIONLOST = $00000031;
  DPSYS_HOST = $00000101;
  DPSYS_SETPLAYERORGROUPDATA = $00000102;
  DPSYS_SETPLAYERORGROUPNAME = $00000103;
  DPSYS_SETSESSIONDESC = $00000104;
  DPSYS_ADDGROUPTOGROUP = $00000105;
  DPSYS_DELETEGROUPFROMGROUP = $00000106;
  DPSYS_SECUREMESSAGE = $00000107;
  DPSYS_STARTSESSION = $00000108;
  DPSYS_CHAT = $00000109;
  DPSYS_SETGROUPOWNER = $0000010A;
  DPSYS_SENDCOMPLETE = $0000010D;
  DPLSYS_CONNECTIONSETTINGSREAD = $00000001;
  DPLSYS_DPLAYCONNECTFAILED = $00000002;
  DPLSYS_DPLAYCONNECTSUCCEEDED = $00000003;
  DPLSYS_APPTERMINATED = $00000004;
  DPLSYS_SETPROPERTY = $00000005;
  DPLSYS_SETPROPERTYRESPONSE = $00000006;
  DPLSYS_GETPROPERTY = $00000007;
  DPLSYS_GETPROPERTYRESPONSE = $00000008;
  DPLSYS_NEWCONNECTIONSETTINGS = $0000000A;
  DPLSYS_NEWSESSIONHOST = $00000009;

// Constants for enum CONST_DPPLAYERTYPEFLAGS
type
  CONST_DPPLAYERTYPEFLAGS = TOleEnum;
const
  DPPLAYERTYPE_GROUP = $00000000;
  DPPLAYERTYPE_PLAYER = $00000001;

// Constants for enum CONST_D3DSTENCILCAPSFLAGS
type
  CONST_D3DSTENCILCAPSFLAGS = TOleEnum;
const
  D3DSTENCILCAPS_KEEP = $00000001;
  D3DSTENCILCAPS_ZERO = $00000002;
  D3DSTENCILCAPS_REPLACE = $00000004;
  D3DSTENCILCAPS_INCRSAT = $00000008;
  D3DSTENCILCAPS_DECRSAT = $00000010;
  D3DSTENCILCAPS_INVERT = $00000020;
  D3DSTENCILCAPS_INCR = $00000040;
  D3DSTENCILCAPS_DECR = $00000080;

// Constants for enum CONST_WAVEFORMATFLAGS
type
  CONST_WAVEFORMATFLAGS = TOleEnum;
const
  WAVE_FORMAT_1M08 = $00000001;
  WAVE_FORMAT_1S08 = $00000002;
  WAVE_FORMAT_1M16 = $00000004;
  WAVE_FORMAT_1S16 = $00000008;
  WAVE_FORMAT_2M08 = $00000010;
  WAVE_FORMAT_2S08 = $00000020;
  WAVE_FORMAT_2M16 = $00000040;
  WAVE_FORMAT_2S16 = $00000080;
  WAVE_FORMAT_4M08 = $00000100;
  WAVE_FORMAT_4S08 = $00000200;
  WAVE_FORMAT_4M16 = $00000400;
  WAVE_FORMAT_4S16 = $00000800;

// Constants for enum CONST_DPCAPSFLAGS
type
  CONST_DPCAPSFLAGS = TOleEnum;
const
  DPCAPS_ASYNCCANCELSUPPORTED = $00001000;
  DPCAPS_ASYNCCANCELALLSUPPORTED = $00002000;
  DPCAPS_SENDTIMEOUTSUPPORTED = $00004000;
  DPCAPS_SENDPRIORITYSUPPORTED = $00008000;
  DPCAPS_ASYNCSUPPORTED = $00010000;
  DPCAPS_ISHOST = $00000002;
  DPCAPS_GROUPOPTIMIZED = $00000008;
  DPCAPS_KEEPALIVEOPTIMIZED = $00000010;
  DPCAPS_GUARANTEEDOPTIMIZED = $00000020;
  DPCAPS_GUARANTEEDSUPPORTED = $00000040;
  DPCAPS_SIGNINGSUPPORTED = $00000080;
  DPCAPS_ENCRYPTIONSUPPORTED = $00000100;

// Constants for enum CONST_DSETUPERR
type
  CONST_DSETUPERR = TOleEnum;
const
  DSETUPERR_SUCCESS_RESTART = $00000001;
  DSETUPERR_SUCCESS = $00000000;
  DSETUPERR_BADWINDOWSVERSION = $FFFFFFFF;
  DSETUPERR_SOURCEFILENOTFOUND = $FFFFFFFE;
  DSETUPERR_BADSOURCESIZE = $FFFFFFFD;
  DSETUPERR_BADSOURCETIME = $FFFFFFFC;
  DSETUPERR_NOCOPY = $FFFFFFFB;
  DSETUPERR_OUTOFDISKSPACE = $FFFFFFFA;
  DSETUPERR_CANTFINDINF = $FFFFFFF9;
  DSETUPERR_CANTFINDDIR = $FFFFFFF8;
  DSETUPERR_INTERNAL = $FFFFFFF7;
  DSETUPERR_NTWITHNO3D = $FFFFFFF6;
  DSETUPERR_UNKNOWNOS = $FFFFFFF5;
  DSETUPERR_USERHITCANCEL = $FFFFFFF4;
  DSETUPERR_NOTPREINSTALLEDONNT = $FFFFFFF3;

// Constants for enum CONST_DSOUNDERR
type
  CONST_DSOUNDERR = TOleEnum;
const
  DS_OK = $00000000;
  DSERR_ALLOCATED = $8878000A;
  DSERR_CONTROLUNAVAIL = $8878001E;
  DSERR_INVALIDPARAM = $80070057;
  DSERR_INVALIDCALL = $88780032;
  DSERR_GENERIC = $80004005;
  DSERR_PRIOLEVELNEEDED = $88780046;
  DSERR_OUTOFMEMORY = $00000007;
  DSERR_BADFORMAT = $88780064;
  DSERR_UNSUPPORTED = $80004001;
  DSERR_NODRIVER = $88780078;
  DSERR_ALREADYINITIALIZED = $88780082;
  DSERR_BUFFERLOST = $88780096;
  DSERR_OTHERAPPHASPRIO = $887800A0;
  DSERR_UNINITIALIZED = $887800AA;
  DSERR_NOINTERFACE = $000001AE;

// Constants for enum CONST_DDRAWERR
type
  CONST_DDRAWERR = TOleEnum;
const
  DD_OK = $00000000;
  DDENUMRET_CANCEL = $00000000;
  DDENUMRET_OK = $00000001;
  DDERR_ALREADYINITIALIZED = $88760005;
  DDERR_CANNOTATTACHSURFACE = $8876000A;
  DDERR_CANNOTDETACHSURFACE = $88760014;
  DDERR_CURRENTLYNOTAVAIL = $88760028;
  DDERR_EXCEPTION = $88760037;
  DDERR_GENERIC = $80004005;
  DDERR_HEIGHTALIGN = $8876005A;
  DDERR_INCOMPATIBLEPRIMARY = $8876005F;
  DDERR_INVALIDCAPS = $88760064;
  DDERR_INVALIDCLIPLIST = $8876006E;
  DDERR_INVALIDMODE = $88760078;
  DDERR_INVALIDOBJECT = $88760082;
  DDERR_INVALIDPARAMS = $00000005;
  DDERR_INVALIDPIXELFORMAT = $88760091;
  DDERR_INVALIDRECT = $88760096;
  DDERR_LOCKEDSURFACES = $887600A0;
  DDERR_NO3D = $887600AA;
  DDERR_NOALPHAHW = $887600B4;
  DDERR_NOCLIPLIST = $887600CD;
  DDERR_NOCOLORCONVHW = $887600D2;
  DDERR_NOCOOPERATIVELEVELSET = $887600D4;
  DDERR_NOCOLORKEY = $887600D7;
  DDERR_NOCOLORKEYHW = $887600DC;
  DDERR_NODIRECTDRAWSUPPORT = $887600DE;
  DDERR_NOEXCLUSIVEMODE = $887600E1;
  DDERR_NOFLIPHW = $887600E6;
  DDERR_NOGDI = $887600F0;
  DDERR_NOMIRRORHW = $887600FA;
  DDERR_NOTFOUND = $887600FF;
  DDERR_NOOVERLAYHW = $88760104;
  DDERR_OVERLAPPINGRECTS = $8876010E;
  DDERR_NORASTEROPHW = $88760118;
  DDERR_NOROTATIONHW = $88760122;
  DDERR_NOSTRETCHHW = $88760136;
  DDERR_NOT4BITCOLOR = $8876013C;
  DDERR_NOT4BITCOLORINDEX = $8876013D;
  DDERR_NOT8BITCOLOR = $88760140;
  DDERR_NOTEXTUREHW = $8876014A;
  DDERR_NOVSYNCHW = $8876014F;
  DDERR_NOZBUFFERHW = $88760154;
  DDERR_NOZOVERLAYHW = $8876015E;
  DDERR_OUTOFCAPS = $88760168;
  DDERR_OUTOFMEMORY = $00000007;
  DDERR_OUTOFVIDEOMEMORY = $8876017C;
  DDERR_OVERLAYCANTCLIP = $8876017E;
  DDERR_OVERLAYCOLORKEYONLYONEACTIVE = $88760180;
  DDERR_PALETTEBUSY = $88760183;
  DDERR_COLORKEYNOTSET = $88760190;
  DDERR_SURFACEALREADYATTACHED = $8876019A;
  DDERR_SURFACEALREADYDEPENDENT = $887601A4;
  DDERR_SURFACEBUSY = $887601AE;
  DDERR_CANTLOCKSURFACE = $887601B3;
  DDERR_SURFACEISOBSCURED = $887601B8;
  DDERR_SURFACELOST = $887601C2;
  DDERR_SURFACENOTATTACHED = $887601CC;
  DDERR_TOOBIGHEIGHT = $887601D6;
  DDERR_TOOBIGSIZE = $887601E0;
  DDERR_TOOBIGWIDTH = $887601EA;
  DDERR_UNSUPPORTED = $80004001;
  DDERR_UNSUPPORTEDFORMAT = $887601FE;
  DDERR_UNSUPPORTEDMASK = $88760208;
  DDERR_INVALIDSTREAM = $88760209;
  DDERR_VERTICALBLANKINPROGRESS = $88760219;
  DDERR_WASSTILLDRAWING = $8876021C;
  DDERR_XALIGN = $88760230;
  DDERR_INVALIDDIRECTDRAWGUID = $88760231;
  DDERR_DIRECTDRAWALREADYCREATED = $88760232;
  DDERR_NODIRECTDRAWHW = $88760233;
  DDERR_PRIMARYSURFACEALREADYEXISTS = $88760234;
  DDERR_NOEMULATION = $88760235;
  DDERR_REGIONTOOSMALL = $88760236;
  DDERR_CLIPPERISUSINGHWND = $88760237;
  DDERR_NOCLIPPERATTACHED = $88760238;
  DDERR_NOHWND = $88760239;
  DDERR_HWNDSUBCLASSED = $8876023A;
  DDERR_HWNDALREADYSET = $8876023B;
  DDERR_NOPALETTEATTACHED = $8876023C;
  DDERR_NOPALETTEHW = $8876023D;
  DDERR_BLTFASTCANTCLIP = $8876023E;
  DDERR_NOBLTHW = $8876023F;
  DDERR_NODDROPSHW = $88760240;
  DDERR_OVERLAYNOTVISIBLE = $88760241;
  DDERR_NOOVERLAYDEST = $88760242;
  DDERR_INVALIDPOSITION = $88760243;
  DDERR_NOTAOVERLAYSURFACE = $88760244;
  DDERR_EXCLUSIVEMODEALREADYSET = $88760245;
  DDERR_NOTFLIPPABLE = $88760246;
  DDERR_CANTDUPLICATE = $88760247;
  DDERR_NOTLOCKED = $88760248;
  DDERR_CANTCREATEDC = $88760249;
  DDERR_NODC = $8876024A;
  DDERR_WRONGMODE = $8876024B;
  DDERR_IMPLICITLYCREATED = $8876024C;
  DDERR_NOTPALETTIZED = $8876024D;
  DDERR_UNSUPPORTEDMODE = $8876024E;
  DDERR_NOMIPMAPHW = $8876024F;
  DDERR_INVALIDSURFACETYPE = $88760250;
  DDERR_NOOPTIMIZEHW = $88760258;
  DDERR_NOTLOADED = $88760259;
  DDERR_NOFOCUSWINDOW = $8876025A;
  DDERR_DCALREADYCREATED = $8876026C;
  DDERR_NONONLOCALVIDMEM = $88760276;
  DDERR_CANTPAGELOCK = $88760280;
  DDERR_CANTPAGEUNLOCK = $88760294;
  DDERR_NOTPAGELOCKED = $887602A8;
  DDERR_MOREDATA = $887602B2;
  DDERR_EXPIRED = $887602B3;
  DDERR_VIDEONOTACTIVE = $887602B7;
  DDERR_DEVICEDOESNTOWNSURFACE = $887602BB;
  DDERR_NOTINITIALIZED = $800401F0;
  DDERR_NOSTEREOHARDWARE = $887600B5;
  DDERR_NOSURFACELEFT = $887600B6;

// Constants for enum CONST_D3DIMERR
type
  CONST_D3DIMERR = TOleEnum;
const
  D3D_OK = $00000000;
  D3DERR_BADMAJORVERSION = $887602BC;
  D3DERR_BADMINORVERSION = $887602BD;
  D3DERR_INVALID_DEVICE = $887602C1;
  D3DERR_INITFAILED = $887602C2;
  D3DERR_DEVICEAGGREGATED = $887602C3;
  D3DERR_TEXTURE_NO_SUPPORT = $887602D0;
  D3DERR_TEXTURE_CREATE_FAILED = $887602D1;
  D3DERR_TEXTURE_DESTROY_FAILED = $887602D2;
  D3DERR_TEXTURE_LOCK_FAILED = $887602D3;
  D3DERR_TEXTURE_UNLOCK_FAILED = $887602D4;
  D3DERR_TEXTURE_LOAD_FAILED = $887602D5;
  D3DERR_TEXTURE_SWAP_FAILED = $887602D6;
  D3DERR_TEXTURE_LOCKED = $887602D7;
  D3DERR_TEXTURE_NOT_LOCKED = $887602D8;
  D3DERR_TEXTURE_GETSURF_FAILED = $887602D9;
  D3DERR_MATRIX_CREATE_FAILED = $887602DA;
  D3DERR_MATRIX_DESTROY_FAILED = $887602DB;
  D3DERR_MATRIX_SETDATA_FAILED = $887602DC;
  D3DERR_MATRIX_GETDATA_FAILED = $887602DD;
  D3DERR_SETVIEWPORTDATA_FAILED = $887602DE;
  D3DERR_INVALIDCURRENTVIEWPORT = $887602DF;
  D3DERR_INVALIDPRIMITIVETYPE = $887602E0;
  D3DERR_INVALIDVERTEXTYPE = $887602E1;
  D3DERR_TEXTURE_BADSIZE = $887602E2;
  D3DERR_INVALIDRAMPTEXTURE = $887602E3;
  D3DERR_MATERIAL_CREATE_FAILED = $887602E4;
  D3DERR_MATERIAL_DESTROY_FAILED = $887602E5;
  D3DERR_MATERIAL_SETDATA_FAILED = $887602E6;
  D3DERR_MATERIAL_GETDATA_FAILED = $887602E7;
  D3DERR_INVALIDPALETTE = $887602E8;
  D3DERR_ZBUFF_NEEDS_SYSTEMMEMORY = $887602E9;
  D3DERR_ZBUFF_NEEDS_VIDEOMEMORY = $887602EA;
  D3DERR_SURFACENOTINVIDMEM = $887602EB;
  D3DERR_LIGHT_SET_FAILED = $887602EE;
  D3DERR_LIGHTHASVIEWPORT = $887602EF;
  D3DERR_LIGHTNOTINTHISVIEWPORT = $887602F0;
  D3DERR_SCENE_IN_SCENE = $887602F8;
  D3DERR_SCENE_NOT_IN_SCENE = $887602F9;
  D3DERR_SCENE_BEGIN_FAILED = $887602FA;
  D3DERR_SCENE_END_FAILED = $887602FB;
  D3DERR_INBEGIN = $88760302;
  D3DERR_NOTINBEGIN = $88760303;
  D3DERR_NOVIEWPORTS = $88760304;
  D3DERR_VIEWPORTDATANOTSET = $88760305;
  D3DERR_VIEWPORTHASNODEVICE = $88760306;
  D3DERR_NOCURRENTVIEWPORT = $88760307;
  D3DERR_INVALIDVERTEXFORMAT = $88760800;
  D3DERR_COLORKEYATTACHED = $88760802;
  D3DERR_VERTEXBUFFEROPTIMIZED = $8876080C;
  D3DERR_VBUF_CREATE_FAILED = $8876080D;
  D3DERR_VERTEXBUFFERLOCKED = $8876080E;
  D3DERR_ZBUFFER_NOTPRESENT = $88760816;
  D3DERR_STENCILBUFFER_NOTPRESENT = $88760817;
  D3DERR_WRONGTEXTUREFORMAT = $88760818;
  D3DERR_UNSUPPORTEDCOLOROPERATION = $88760819;
  D3DERR_UNSUPPORTEDCOLORARG = $8876081A;
  D3DERR_UNSUPPORTEDALPHAOPERATION = $8876081B;
  D3DERR_UNSUPPORTEDALPHAARG = $8876081C;
  D3DERR_TOOMANYOPERATIONS = $8876081D;
  D3DERR_CONFLICTINGTEXTUREFILTER = $8876081E;
  D3DERR_UNSUPPORTEDFACTORVALUE = $8876081F;
  D3DERR_CONFLICTINGRENDERSTATE = $88760821;
  D3DERR_UNSUPPORTEDTEXTUREFILTER = $88760822;
  D3DERR_TOOMANYPRIMITIVES = $88760823;
  D3DERR_INVALIDMATRIX = $88760824;
  D3DERR_TOOMANYVERTICES = $88760825;
  D3DERR_CONFLICTINGTEXTUREPALETTE = $88760826;
  D3DERR_INVALIDSTATEBLOCK = $88760834;
  D3DERR_INBEGINSTATEBLOCK = $88760835;
  D3DERR_NOTINBEGINSTATEBLOCK = $88760836;
  D3DERR_VERTEXBUFFERUNLOCKFAILED = $8876080F;

// Constants for enum CONST_DPLAYERR
type
  CONST_DPLAYERR = TOleEnum;
const
  DP_OK = $00000000;
  DPERR_ALREADYINITIALIZED = $88770005;
  DPERR_ACCESSDENIED = $8877000A;
  DPERR_ACTIVEPLAYERS = $88770014;
  DPERR_BUFFERTOOSMALL = $8877001E;
  DPERR_CANTADDPLAYER = $88770028;
  DPERR_CANTCREATEGROUP = $88770032;
  DPERR_CANTCREATEPLAYER = $8877003C;
  DPERR_CANTCREATESESSION = $88770046;
  DPERR_CAPSNOTAVAILABLEYET = $88770050;
  DPERR_EXCEPTION = $8877005A;
  DPERR_GENERIC = $80004005;
  DPERR_INVALIDFLAGS = $88770078;
  DPERR_INVALIDOBJECT = $88770082;
  DPERR_INVALIDPARAM = $80070057;
  DPERR_INVALIDPARAMS = $80070057;
  DPERR_INVALIDPLAYER = $88770096;
  DPERR_INVALIDGROUP = $8877009B;
  DPERR_NOCAPS = $887700A0;
  DPERR_NOCONNECTION = $887700AA;
  DPERR_OUTOFMEMORY = $00000007;
  DPERR_NOMESSAGES = $887700BE;
  DPERR_NONAMESERVERFOUND = $887700C8;
  DPERR_NOPLAYERS = $887700D2;
  DPERR_NOSESSIONS = $887700DC;
  DPERR_PENDING = $80070007;
  DPERR_SENDTOOBIG = $887700E6;
  DPERR_TIMEOUT = $887700F0;
  DPERR_UNAVAILABLE = $887700FA;
  DPERR_UNSUPPORTED = $000001BD;
  DPERR_BUSY = $8877010E;
  DPERR_USERCANCEL = $88770118;
  DPERR_NOINTERFACE = $000001AE;
  DPERR_CANNOTCREATESERVER = $88770122;
  DPERR_PLAYERLOST = $8877012C;
  DPERR_SESSIONLOST = $88770136;
  DPERR_UNINITIALIZED = $88770140;
  DPERR_NONEWPLAYERS = $8877014A;
  DPERR_INVALIDPASSWORD = $88770154;
  DPERR_CONNECTING = $8877015E;
  DPERR_CONNECTIONLOST = $88770168;
  DPERR_UNKNOWNMESSAGE = $88770172;
  DPERR_CANCELFAILED = $8877017C;
  DPERR_INVALIDPRIORITY = $88770186;
  DPERR_CANCELLED = $8877019A;
  DPERR_ABORTED = $887701A4;
  DPERR_BUFFERTOOLARGE = $887703E8;
  DPERR_CANTCREATEPROCESS = $887703F2;
  DPERR_APPNOTSTARTED = $887703FC;
  DPERR_INVALIDINTERFACE = $88770406;
  DPERR_UNKNOWNAPPLICATION = $8877041A;
  DPERR_NOTLOBBIED = $8877042E;
  DPERR_AUTHENTICATIONFAILED = $887707D0;
  DPERR_CANTLOADSSPI = $887707DA;
  DPERR_ENCRYPTIONFAILED = $887707E4;
  DPERR_SIGNFAILED = $887707EE;
  DPERR_CANTLOADSECURITYPACKAGE = $887707F8;
  DPERR_ENCRYPTIONNOTSUPPORTED = $88770802;
  DPERR_CANTLOADCAPI = $8877080C;
  DPERR_NOTLOGGEDIN = $88770816;
  DPERR_LOGONDENIED = $88770820;

// Constants for enum CONST_DINPUTERR
type
  CONST_DINPUTERR = TOleEnum;
const
  DI_OK = $00000000;
  DI_BUFFEROVERFLOW = $80040260;
  DIERR_INVALIDHANDLE = $80070006;
  DIERR_OLDDIRECTINPUTVERSION = $8007047E;
  DIERR_BETADIRECTINPUTVERSION = $80070481;
  DIERR_BADDRIVERVER = $80070077;
  DIERR_DEVICENOTREG = $80040154;
  DIERR_NOTFOUND = $80070002;
  DIERR_OBJECTNOTFOUND = $80070002;
  DIERR_INVALIDPARAM = $00000005;
  DIERR_NOINTERFACE = $000001AE;
  DIERR_GENERIC = $80004005;
  DIERR_OUTOFMEMORY = $00000007;
  DIERR_UNSUPPORTED = $000001BD;
  DIERR_NOTINITIALIZED = $80070015;
  DIERR_ALREADYINITIALIZED = $800704DF;
  DIERR_INPUTLOST = $8007001E;
  DIERR_ACQUIRED = $800700AA;
  DIERR_NOTACQUIRED = $8007000C;
  DIERR_NOAGGREGATION = $80004002;
  DIERR_OTHERAPPHASPRIO = $80070005;
  DIERR_READONLY = $80070005;
  DIERR_HANDLEEXISTS = $80070005;
  E_PENDING = $80070007;
  DIERR_INSUFFICIENTPRIVS = $80040200;
  DIERR_DEVICEFULL = $80040201;
  DIERR_MOREDATA = $80040202;
  DIERR_NOTDOWNLOADED = $80040203;
  DIERR_HASEFFECTS = $80040204;
  DIERR_NOTEXCLUSIVEACQUIRED = $80040205;
  DIERR_INCOMPLETEEFFECT = $80040206;
  DIERR_NOTBUFFERED = $80040207;
  DIERR_EFFECTPLAYING = $80040208;

// Constants for enum CONST_D3DRMERR
type
  CONST_D3DRMERR = TOleEnum;
const
  D3DRM_OK = $00000000;
  D3DRMERR_BADOBJECT = $8876030D;
  D3DRMERR_BADTYPE = $8876030E;
  D3DRMERR_BADALLOC = $8876030F;
  D3DRMERR_FACEUSED = $88760310;
  D3DRMERR_NOTFOUND = $88760311;
  D3DRMERR_NOTDONEYET = $88760312;
  D3DRMERR_FILENOTFOUND = $88760313;
  D3DRMERR_BADFILE = $88760314;
  D3DRMERR_BADDEVICE = $88760315;
  D3DRMERR_BADVALUE = $88760316;
  D3DRMERR_BADMAJORVERSION = $88760317;
  D3DRMERR_BADMINORVERSION = $88760318;
  D3DRMERR_UNABLETOEXECUTE = $88760319;
  D3DRMERR_LIBRARYNOTFOUND = $8876031A;
  D3DRMERR_INVALIDLIBRARY = $8876031B;
  D3DRMERR_PENDING = $8876031C;
  D3DRMERR_NOTENOUGHDATA = $8876031D;
  D3DRMERR_REQUESTTOOLARGE = $8876031E;
  D3DRMERR_REQUESTTOOSMALL = $8876031F;
  D3DRMERR_CONNECTIONLOST = $88760320;
  D3DRMERR_LOADABORTED = $88760321;
  D3DRMERR_NOINTERNET = $88760322;
  D3DRMERR_BADCACHEFILE = $88760323;
  D3DRMERR_BOXNOTSET = $88760324;
  D3DRMERR_BADPMDATA = $88760325;
  D3DRMERR_CLIENTNOTREGISTERED = $88760326;
  D3DRMERR_NOTCREATEDFROMDDS = $88760327;
  D3DRMERR_NOSUCHKEY = $88760328;
  D3DRMERR_INCOMPATABLEKEY = $88760329;
  D3DRMERR_ELEMENTINUSE = $8876032A;
  D3DRMERR_TEXTUREFORMATNOTFOUND = $8876032B;
  D3DRMERR_NOTAGGREGATED = $8876032C;

// Constants for enum CONST_DICOMMONDATAFORMATS
type
  CONST_DICOMMONDATAFORMATS = TOleEnum;
const
  DIFORMAT_KEYBOARD = $00000001;
  DIFORMAT_MOUSE = $00000002;
  DIFORMAT_JOYSTICK = $00000003;
  DIFORMAT_JOYSTICK2 = $00000004;

// Constants for enum CONST_D3DVERTEXCOMPONENT
type
  CONST_D3DVERTEXCOMPONENT = TOleEnum;
const
  D3DVERTCOMP_POSITION = $00000001;
  D3DVERTCOMP_NORMAL = $00000002;
  D3DVERTCOMP_DIFFUSE = $00000003;
  D3DVERTCOMP_SPECULAR = $00000004;
  D3DVERTCOMP_TEXTURE1 = $00000005;
  D3DVERTCOMP_TEXTURE2 = $00000006;
  D3DVERTCOMP_TEXTURE3 = $00000007;
  D3DVERTCOMP_TEXTURE4 = $00000008;
  D3DVERTCOMP_TEXTURE5 = $00000009;
  D3DVERTCOMP_TEXTURE6 = $0000000A;
  D3DVERTCOMP_TEXTURE7 = $0000000B;
  D3DVERTCOMP_TEXTURE8 = $0000000C;

// Constants for enum CONST_D3DMATERIALCOLORSOURCE
type
  CONST_D3DMATERIALCOLORSOURCE = TOleEnum;
const
  D3DMCS_MATERIAL = $00000000;
  D3DMCS_COLOR1 = $00000001;
  D3DMCS_COLOR2 = $00000002;

// Constants for enum CONST_DMUS
type
  CONST_DMUS = TOleEnum;
const
  DMUS_MAXSUBCHORD = $00000008;
  DMUS_TEMPO_MAX = $0000015E;
  DMUS_TEMPO_MIN = $0000000A;

// Constants for enum CONST_DMUS_CURVES
type
  CONST_DMUS_CURVES = TOleEnum;
const
  DMUS_CURVES_LINEAR = $00000000;
  DMUS_CURVES_INSTANT = $00000001;
  DMUS_CURVES_EXP = $00000002;
  DMUS_CURVES_LOG = $00000003;
  DMUS_CURVES_SINE = $00000004;

// Constants for enum CONST_DMUS_CURVET
type
  CONST_DMUS_CURVET = TOleEnum;
const
  DMUS_CURVET_PBCURVE = $00000003;
  DMUS_CURVET_CCCURVE = $00000004;
  DMUS_CURVET_MATCURVE = $00000005;
  DMUS_CURVET_PATCURVE = $00000006;

// Constants for enum CONST_DMUS_NOTIFICATION_SUBTYPE
type
  CONST_DMUS_NOTIFICATION_SUBTYPE = TOleEnum;
const
  DMUS_NOTIFICATION_MUSICSTARTED = $00000000;
  DMUS_NOTIFICATION_MUSICSTOPPED = $00000001;
  DMUS_NOTIFICATION_MEASUREBEAT = $00000000;
  DMUS_NOTIFICATION_CHORD = $00000000;
  DMUS_NOTIFICATION_GROOVE = $00000000;
  DMUS_NOTIFICATION_EMBELLISHMENT = $00000001;
  DMUS_NOTIFICATION_SEGSTART = $00000000;
  DMUS_NOTIFICATION_SEGEND = $00000001;
  DMUS_NOTIFICATION_SEGALMOSTEND = $00000002;
  DMUS_NOTIFICATION_SEGLOOP = $00000003;
  DMUS_NOTIFICATION_SEGABORT = $00000004;

// Constants for enum CONST_DMUS_COMMANDT_TYPES
type
  CONST_DMUS_COMMANDT_TYPES = TOleEnum;
const
  DMUS_COMMANDT_GROOVE = $00000000;
  DMUS_COMMANDT_FILL = $00000001;
  DMUS_COMMANDT_INTRO = $00000002;
  DMUS_COMMANDT_BREAK = $00000003;
  DMUS_COMMANDT_END = $00000004;
  DMUS_COMMANDT_ENDANDINTRO = $00000005;

// Constants for enum CONST_DMUS_SHAPET_TYPES
type
  CONST_DMUS_SHAPET_TYPES = TOleEnum;
const
  DMUS_SHAPET_FALLING = $00000000;
  DMUS_SHAPET_LEVEL = $00000001;
  DMUS_SHAPET_LOOPABLE = $00000002;
  DMUS_SHAPET_LOUD = $00000003;
  DMUS_SHAPET_QUIET = $00000004;
  DMUS_SHAPET_PEAKING = $00000005;
  DMUS_SHAPET_RANDOM = $00000006;
  DMUS_SHAPET_RISING = $00000007;
  DMUS_SHAPET_SONG = $00000008;

// Constants for enum CONST_DMUS_COMPOSEF_FLAGS
type
  CONST_DMUS_COMPOSEF_FLAGS = TOleEnum;
const
  DMUS_COMPOSEF_NONE = $00000000;
  DMUS_COMPOSEF_ALIGN = $00000001;
  DMUS_COMPOSEF_OVERLAP = $00000002;
  DMUS_COMPOSEF_IMMEDIATE = $00000004;
  DMUS_COMPOSEF_GRID = $00000008;
  DMUS_COMPOSEF_BEAT = $00000010;
  DMUS_COMPOSEF_MEASURE = $00000020;
  DMUS_COMPOSEF_AFTERPREPARETIME = $00000040;
  DMUS_COMPOSEF_MODULATE = $00001000;
  DMUS_COMPOSEF_LONG = $00002000;

// Constants for enum CONST_DMUS_PMSGF_FLAGS
type
  CONST_DMUS_PMSGF_FLAGS = TOleEnum;
const
  DMUS_PMSGF_REFTIME = $00000001;
  DMUS_PMSGF_MUSICTIME = $00000002;
  DMUS_PMSGF_TOOL_IMMEDIATE = $00000004;
  DMUS_PMSGF_TOOL_QUEUE = $00000008;
  DMUS_PMSGF_TOOL_ATTIME = $00000010;
  DMUS_PMSGF_TOOL_FLUSH = $00000020;

// Constants for enum CONST_DMUS_SEGF_FLAGS
type
  CONST_DMUS_SEGF_FLAGS = TOleEnum;
const
  DMUS_SEGF_REFTIME = $00000040;
  DMUS_SEGF_SECONDARY = $00000080;
  DMUS_SEGF_QUEUE = $00000100;
  DMUS_SEGF_CONTROL = $00000200;
  DMUS_SEGF_AFTERPREPARETIME = $00000400;
  DMUS_SEGF_GRID = $00000800;
  DMUS_SEGF_BEAT = $00001000;
  DMUS_SEGF_MEASURE = $00002000;
  DMUS_SEGF_DEFAULT = $00004000;
  DMUS_SEGF_NOINVALIDATE = $00008000;

// Constants for enum CONST_DMUS_NOTEF_FLAGS
type
  CONST_DMUS_NOTEF_FLAGS = TOleEnum;
const
  DMUS_NOTEF_NOTEON = $00000001;

// Constants for enum CONST_DMUS_PLAYMODE_FLAGS
type
  CONST_DMUS_PLAYMODE_FLAGS = TOleEnum;
const
  DMUS_PLAYMODE_KEY_ROOT = $00000001;
  DMUS_PLAYMODE_CHORD_ROOT = $00000002;
  DMUS_PLAYMODE_SCALE_INTERVALS = $00000004;
  DMUS_PLAYMODE_CHORD_INTERVALS = $00000008;
  DMUS_PLAYMODE_NONE = $00000010;
  DMUS_PLAYMODE_FIXED = $00000000;
  DMUS_PLAYMODE_FIXEDTOKEY = $00000001;
  DMUS_PLAYMODE_FIXEDTOCHORD = $00000002;
  DMUS_PLAYMODE_PEDALPOINT = $00000005;
  DMUS_PLAYMODE_MELODIC = $00000006;
  DMUS_PLAYMODE_NORMALCHORD = $0000000A;
  DMUS_PLAYMODE_ALWAYSPLAY = $0000000E;

// Constants for enum CONST_DMUS_CURVE_FLAGS
type
  CONST_DMUS_CURVE_FLAGS = TOleEnum;
const
  DMUS_CURVE_RESET = $00000001;

// Constants for enum CONST_DMUSERR
type
  CONST_DMUSERR = TOleEnum;
const
  DMUS_E_DRIVER_FAILED = $88781101;
  DMUS_E_PORTS_OPEN = $88781102;
  DMUS_E_DEVICE_IN_USE = $88781103;
  DMUS_E_INSUFFICIENTBUFFER = $88781104;
  DMUS_E_BUFFERNOTSET = $88781105;
  DMUS_E_BUFFERNOTAVAILABLE = $88781106;
  DMUS_E_NOTADLSCOL = $88781108;
  DMUS_E_INVALIDOFFSET = $88781109;
  DMUS_E_ALREADY_LOADED = $88781111;
  DMUS_E_INVALIDPOS = $88781113;
  DMUS_E_INVALIDPATCH = $88781114;
  DMUS_E_CANNOTSEEK = $88781115;
  DMUS_E_CANNOTWRITE = $88781116;
  DMUS_E_CHUNKNOTFOUND = $88781117;
  DMUS_E_INVALID_DOWNLOADID = $88781119;
  DMUS_E_NOT_DOWNLOADED_TO_PORT = $88781120;
  DMUS_E_ALREADY_DOWNLOADED = $88781121;
  DMUS_E_UNKNOWN_PROPERTY = $88781122;
  DMUS_E_SET_UNSUPPORTED = $88781123;
  DMUS_E_GET_UNSUPPORTED = $88781124;
  DMUS_E_NOTMONO = $88781125;
  DMUS_E_BADARTICULATION = $88781126;
  DMUS_E_BADINSTRUMENT = $88781127;
  DMUS_E_BADWAVELINK = $88781128;
  DMUS_E_NOARTICULATION = $88781129;
  DMUS_E_NOTPCM = $8878112A;
  DMUS_E_BADWAVE = $8878112B;
  DMUS_E_BADOFFSETTABLE = $8878112C;
  DMUS_E_UNKNOWNDOWNLOAD = $8878112D;
  DMUS_E_NOSYNTHSINK = $8878112E;
  DMUS_E_ALREADYOPEN = $8878112F;
  DMUS_E_ALREADYCLOSED = $88781130;
  DMUS_E_SYNTHNOTCONFIGURED = $88781131;
  DMUS_E_SYNTHACTIVE = $88781132;
  DMUS_E_CANNOTREAD = $88781133;
  DMUS_E_DMUSIC_RELEASED = $88781134;
  DMUS_E_BUFFER_EMPTY = $88781135;
  DMUS_E_BUFFER_FULL = $88781136;
  DMUS_E_PORT_NOT_CAPTURE = $88781137;
  DMUS_E_PORT_NOT_RENDER = $88781138;
  DMUS_E_DSOUND_NOT_SET = $88781139;
  DMUS_E_ALREADY_ACTIVATED = $8878113A;
  DMUS_E_INVALIDBUFFER = $8878113B;
  DMUS_E_WAVEFORMATNOTSUPPORTED = $8878113C;
  DMUS_E_SYNTHINACTIVE = $8878113D;
  DMUS_E_DSOUND_ALREADY_SET = $8878113E;
  DMUS_E_INVALID_EVENT = $8878113F;
  DMUS_E_UNSUPPORTED_STREAM = $88781150;
  DMUS_E_ALREADY_INITED = $88781151;
  DMUS_E_INVALID_BAND = $88781152;
  DMUS_E_TRACK_HDR_NOT_FIRST_CK = $88781155;
  DMUS_E_TOOL_HDR_NOT_FIRST_CK = $88781156;
  DMUS_E_INVALID_TRACK_HDR = $88781157;
  DMUS_E_INVALID_TOOL_HDR = $88781158;
  DMUS_E_ALL_TOOLS_FAILED = $88781159;
  DMUS_E_ALL_TRACKS_FAILED = $88781160;
  DMUS_E_NOT_FOUND = $88781161;
  DMUS_E_NOT_INIT = $88781162;
  DMUS_E_TYPE_DISABLED = $88781163;
  DMUS_E_TYPE_UNSUPPORTED = $88781164;
  DMUS_E_TIME_PAST = $88781165;
  DMUS_E_TRACK_NOT_FOUND = $88781166;
  DMUS_E_NO_MASTER_CLOCK = $88781170;
  DMUS_E_LOADER_NOCLASSID = $88781180;
  DMUS_E_LOADER_BADPATH = $88781181;
  DMUS_E_LOADER_FAILEDOPEN = $88781182;
  DMUS_E_LOADER_FORMATNOTSUPPORTED = $88781183;
  DMUS_E_LOADER_FAILEDCREATE = $88781184;
  DMUS_E_LOADER_OBJECTNOTFOUND = $88781185;
  DMUS_E_LOADER_NOFILENAME = $88781186;
  DMUS_E_INVALIDFILE = $88781200;
  DMUS_E_ALREADY_EXISTS = $88781201;
  DMUS_E_OUT_OF_RANGE = $88781202;
  DMUS_E_SEGMENT_INIT_FAILED = $88781203;
  DMUS_E_ALREADY_SENT = $88781204;
  DMUS_E_CANNOT_FREE = $88781205;
  DMUS_E_CANNOT_OPEN_PORT = $88781206;
  DMUS_E_CONNOT_CONVERT = $88781207;
  DMUS_E_DESCEND_CHUNK_FAIL = $88781210;
  DMUS_E_FAIL = $80070057;
  DMUS_E_INVALIDARG = $00000005;
  DMUS_E_NOINTERFACE = $000001AE;
  DMUS_E_OUTOFMEMORY = $00000007;
  DMUS_E_NOTIMPL = $000001BD;

// Constants for enum CONST_DMUS_PC_CLASS
type
  CONST_DMUS_PC_CLASS = TOleEnum;
const
  DMUS_PC_INPUTCLASS = $00000000;
  DMUS_PC_OUTPUTCLASS = $00000001;

// Constants for enum CONST_DMUS_PC_FLAGS
type
  CONST_DMUS_PC_FLAGS = TOleEnum;
const
  DMUS_PC_DLS = $00000001;
  DMUS_PC_EXTERNAL = $00000002;
  DMUS_PC_SOFTWARESYNTH = $00000004;
  DMUS_PC_MEMORYSIZEFIXED = $00000008;
  DMUS_PC_GMINHARDWARE = $00000010;
  DMUS_PC_GSINHARDWARE = $00000020;
  DMUS_PC_XGINHARDWARE = $00000040;
  DMUS_PC_DIRECTSOUND = $00000080;
  DMUS_PC_SHAREABLE = $00000100;
  DMUS_PC_SYSTEMMEMORY = $7FFFFFFF;

// Constants for enum CONST_DMUS_PORT_TYPE
type
  CONST_DMUS_PORT_TYPE = TOleEnum;
const
  DMUS_PORT_WINMM_DRIVER = $00000000;
  DMUS_PORT_USER_MODE_SYNTH = $00000001;
  DMUS_PORT_KERNEL_MODE = $00000002;

// Constants for enum CONST_DMUS_PORTPARAMS_FLAGS
type
  CONST_DMUS_PORTPARAMS_FLAGS = TOleEnum;
const
  DMUS_PORTPARAMS_VOICES = $00000001;
  DMUS_PORTPARAMS_CHANNELGROUPS = $00000002;
  DMUS_PORTPARAMS_AUDIOCHANNELS = $00000004;
  DMUS_PORTPARAMS_SAMPLERATE = $00000008;
  DMUS_PORTPARAMS_EFFECTS = $00000020;
  DMUS_PORTPARAMS_SHARE = $00000040;

// Constants for enum CONST_DIMOUSEOFS
type
  CONST_DIMOUSEOFS = TOleEnum;
const
  DIMOFS_X = $00000000;
  DIMOFS_Y = $00000004;
  DIMOFS_Z = $00000008;
  DIMOFS_BUTTON0 = $0000000C;
  DIMOFS_BUTTON1 = $0000000D;
  DIMOFS_BUTTON2 = $0000000E;
  DIMOFS_BUTTON3 = $0000000F;

// Constants for enum CONST_DIJOYSTICKOFS
type
  CONST_DIJOYSTICKOFS = TOleEnum;
const
  DIJOFS_X = $00000000;
  DIJOFS_Y = $00000004;
  DIJOFS_Z = $00000008;
  DIJOFS_RX = $0000000C;
  DIJOFS_RY = $00000010;
  DIJOFS_RZ = $00000014;
  DIJOFS_SLIDER0 = $00000018;
  DIJOFS_SLIDER1 = $0000001C;
  DIJOFS_POV0 = $00000020;
  DIJOFS_POV1 = $00000024;
  DIJOFS_POV2 = $00000028;
  DIJOFS_POV3 = $0000002C;
  DIJOFS_BUTTON0 = $00000030;
  DIJOFS_BUTTON1 = $00000031;
  DIJOFS_BUTTON2 = $00000032;
  DIJOFS_BUTTON3 = $00000033;
  DIJOFS_BUTTON4 = $00000034;
  DIJOFS_BUTTON5 = $00000035;
  DIJOFS_BUTTON6 = $00000036;
  DIJOFS_BUTTON7 = $00000037;
  DIJOFS_BUTTON8 = $00000038;
  DIJOFS_BUTTON9 = $00000039;
  DIJOFS_BUTTON10 = $0000003A;
  DIJOFS_BUTTON11 = $0000003B;
  DIJOFS_BUTTON12 = $0000003C;
  DIJOFS_BUTTON13 = $0000003D;
  DIJOFS_BUTTON14 = $0000003E;
  DIJOFS_BUTTON15 = $0000003F;
  DIJOFS_BUTTON16 = $00000040;
  DIJOFS_BUTTON17 = $00000041;
  DIJOFS_BUTTON18 = $00000042;
  DIJOFS_BUTTON19 = $00000043;
  DIJOFS_BUTTON20 = $00000044;
  DIJOFS_BUTTON21 = $00000045;
  DIJOFS_BUTTON22 = $00000046;
  DIJOFS_BUTTON23 = $00000047;
  DIJOFS_BUTTON24 = $00000048;
  DIJOFS_BUTTON25 = $00000049;
  DIJOFS_BUTTON26 = $0000004A;
  DIJOFS_BUTTON27 = $0000004B;
  DIJOFS_BUTTON28 = $0000004C;
  DIJOFS_BUTTON29 = $0000004D;
  DIJOFS_BUTTON30 = $0000004E;
  DIJOFS_BUTTON31 = $0000004F;

// Constants for enum CONST_DIEFTFLAGS
type
  CONST_DIEFTFLAGS = TOleEnum;
const
  DIEFT_ALL = $00000000;
  DIEFT_CONSTANTFORCE = $00000001;
  DIEFT_RAMPFORCE = $00000002;
  DIEFT_PERIODIC = $00000003;
  DIEFT_CONDITION = $00000004;
  DIEFT_CUSTOMFORCE = $00000005;
  DIEFT_HARDWARE = $000000FF;
  DIEFT_FFATTACK = $00000200;
  DIEFT_FFFADE = $00000400;
  DIEFT_SATURATION = $00000800;
  DIEFT_POSNEGCOEFFICIENTS = $00001000;
  DIEFT_POSNEGSATURATION = $00002000;
  DIEFT_DEADBAND = $00004000;

// Constants for enum CONST_DIEFFFLAGS
type
  CONST_DIEFFFLAGS = TOleEnum;
const
  DIEFF_OBJECTOFFSETS = $00000002;
  DIEFF_CARTESIAN = $00000010;
  DIEFF_POLAR = $00000020;

// Constants for enum CONST_DIEPFLAGS
type
  CONST_DIEPFLAGS = TOleEnum;
const
  DIEP_DURATION = $00000001;
  DIEP_SAMPLEPERIOD = $00000002;
  DIEP_GAIN = $00000004;
  DIEP_TRIGGERBUTTON = $00000008;
  DIEP_TRIGGERREPEATINTERVAL = $00000010;
  DIEP_AXES = $00000020;
  DIEP_DIRECTION = $00000040;
  DIEP_ENVELOPE = $00000080;
  DIEP_TYPESPECIFICPARAMS = $00000100;
  DIEP_ALLPARAMS = $000001FF;
  DIEP_START = $20000000;
  DIEP_NORESTART = $40000000;
  DIEP_NODOWNLOAD = $80000000;

// Constants for enum CONST_DIEGESFLAGS
type
  CONST_DIEGESFLAGS = TOleEnum;
const
  DIEGES_PLAYING = $00000001;
  DIEGES_EMULATED = $00000002;

// Constants for enum CONST_DIESFLAGS
type
  CONST_DIESFLAGS = TOleEnum;
const
  DIES_SOLO = $00000001;
  DIES_NODOWNLOAD = $80000000;

// Constants for enum CONST_DISFFCFLAGS
type
  CONST_DISFFCFLAGS = TOleEnum;
const
  DISFFC_RESET = $00000001;
  DISFFC_STOPALL = $00000002;
  DISFFC_PAUSE = $00000004;
  DISFFC_CONTINUE = $00000008;
  DISFFC_SETACTUATORSON = $00000010;
  DISFFC_SETACTUATORSOFF = $00000020;

// Constants for enum CONST_DIGFFSFLAGS
type
  CONST_DIGFFSFLAGS = TOleEnum;
const
  DIGFFS_EMPTY = $00000001;
  DIGFFS_STOPPED = $00000002;
  DIGFFS_PAUSED = $00000004;
  DIGFFS_ACTUATORSON = $00000010;
  DIGFFS_ACTUATORSOFF = $00000020;
  DIGFFS_POWERON = $00000040;
  DIGFFS_POWEROFF = $00000080;
  DIGFFS_SAFETYSWITCHON = $00000100;
  DIGFFS_SAFETYSWITCHOFF = $00000200;
  DIGFFS_USERFFSWITCHON = $00000400;
  DIGFFS_USERFFSWITCHOFF = $00000800;
  DIGFFS_DEVICELOST = $80000000;

// Constants for enum CONST_DISDDFLAGS
type
  CONST_DISDDFLAGS = TOleEnum;
const
  DISDD_DEFAULT = $00000000;
  DISDD_CONTINUE = $00000001;

// Constants for enum CONST_DMUS_EFFECT_FLAGS
type
  CONST_DMUS_EFFECT_FLAGS = TOleEnum;
const
  DMUS_EFFECT_NONE = $00000000;
  DMUS_EFFECT_REVERB = $00000001;
  DMUS_EFFECT_CHORUS = $00000002;

// Constants for enum CONST_D3DDEVINFOID
type
  CONST_D3DDEVINFOID = TOleEnum;
const
  D3DDEVINFOID_D3DTEXTUREMANAGER = $00000002;
  D3DDEVINFOID_TEXTUREMANAGER = $00000001;
  D3DDEVINFOID_TEXTURING = $00000003;

// Constants for enum CONST_DDOVERFXFLAGS
type
  CONST_DDOVERFXFLAGS = TOleEnum;
const
  DDOVERFX_ARITHSTRETCHY = $00000001;
  DDOVERFX_MIRRORLEFTRIGHT = $00000002;
  DDOVERFX_MIRRORUPDOWN = $00000004;

// Constants for enum CONST_D3DRMSHADOWFLAGS
type
  CONST_D3DRMSHADOWFLAGS = TOleEnum;
const
  D3DRMSHADOW_TRUEALPHA = $00000001;

// Constants for enum CONST_DICONDITIONFLAGS
type
  CONST_DICONDITIONFLAGS = TOleEnum;
const
  DICONDITION_USE_BOTH_AXES = $00000001;
  DICONDITION_USE_DIRECTION = $00000002;

// Constants for enum CONST_D3DSTATEBLOCKTYPE
type
  CONST_D3DSTATEBLOCKTYPE = TOleEnum;
const
  D3DSBT_ALL = $00000001;
  D3DSBT_PIXELSTATE = $00000002;
  D3DSBT_VERTEXSTATE = $00000003;

// Constants for enum CONST_D3DCLIPPLANEFLAGS
type
  CONST_D3DCLIPPLANEFLAGS = TOleEnum;
const
  D3DCPF_DISABLEALL = $00000000;
  D3DCPF_ENABLEPLANE0 = $00000001;
  D3DCPF_ENABLEPLANE1 = $00000002;
  D3DCPF_ENABLEPLANE2 = $00000004;
  D3DCPF_ENABLEPLANE3 = $00000008;
  D3DCPF_ENABLEPLANE4 = $00000010;
  D3DCPF_ENABLEPLANE5 = $00000020;
  D3DCPF_ENABLEPLANE6 = $00000040;
  D3DCPF_ENABLEPLANE7 = $00000080;
  D3DCPF_ENABLEPLANE8 = $00000100;
  D3DCPF_ENABLEPLANE9 = $00000200;
  D3DCPF_ENABLEPLANE10 = $00000400;
  D3DCPF_ENABLEPLANE11 = $00000800;
  D3DCPF_ENABLEPLANE12 = $00001000;
  D3DCPF_ENABLEPLANE13 = $00002000;
  D3DCPF_ENABLEPLANE14 = $00004000;
  D3DCPF_ENABLEPLANE15 = $00008000;
  D3DCPF_ENABLEPLANE16 = $00010000;
  D3DCPF_ENABLEPLANE17 = $00020000;
  D3DCPF_ENABLEPLANE18 = $00040000;
  D3DCPF_ENABLEPLANE19 = $00080000;
  D3DCPF_ENABLEPLANE20 = $00100000;
  D3DCPF_ENABLEPLANE21 = $00200000;
  D3DCPF_ENABLEPLANE22 = $00400000;
  D3DCPF_ENABLEPLANE23 = $00800000;
  D3DCPF_ENABLEPLANE24 = $01000000;
  D3DCPF_ENABLEPLANE25 = $02000000;
  D3DCPF_ENABLEPLANE26 = $04000000;
  D3DCPF_ENABLEPLANE27 = $08000000;
  D3DCPF_ENABLEPLANE28 = $10000000;
  D3DCPF_ENABLEPLANE29 = $20000000;
  D3DCPF_ENABLEPLANE30 = $40000000;
  D3DCPF_ENABLEPLANE31 = $80000000;

// Constants for enum CONST_DMUS_NOTIFICATION_TYPE
type
  CONST_DMUS_NOTIFICATION_TYPE = TOleEnum;
const
  DMUS_NOTIFY_ON_CHORD = $00000001;
  DMUS_NOTIFY_ON_COMMAND = $00000002;
  DMUS_NOTIFY_ON_MEASUREANDBEAT = $00000003;
  DMUS_NOTIFY_ON_PERFORMANCE = $00000004;
  DMUS_NOTIFY_ON_SEGMENT = $00000005;

type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  DirectPlayAddress = interface;
  DirectPlayLobbyConnection = interface;
  DirectPlaySessionData = interface;
  DirectPlayEnumConnections = interface;
  DirectPlayEnumPlayers = interface;
  DirectPlayEnumSessions = interface;
  DirectPlayEnumServiceProviders = interface;
  DirectPlayEnumLocalApplications = interface;
  DirectPlayMessage = interface;
  DirectPlay4 = interface;
  DirectPlayLobby3 = interface;
  Direct3DRMEnumerateObjectsCallback = interface;
  Direct3DRMObject = interface;
  Direct3DRMCallback = interface;
  Direct3DRMLoadCallback = interface;
  Direct3DRMLoadTextureCallback3 = interface;
  Direct3DRMTexture3 = interface;
  DirectDrawSurface4 = interface;
  DirectDrawClipper = interface;
  DirectDraw4 = interface;
  DirectDrawPalette = interface;
  DirectDrawEnumModes = interface;
  IFont = interface;
  Direct3D7 = interface;
  DirectDrawSurface7 = interface;
  DirectDrawEnumSurfaces = interface;
  DirectDraw7 = interface;
  DirectDrawIdentifier = interface;
  DirectDrawColorControl = interface;
  DirectDrawGammaControl = interface;
  Direct3DDevice7 = interface;
  Direct3DVertexBuffer7 = interface;
  Direct3DEnumPixelFormats = interface;
  Direct3DEnumDevices = interface;
  DirectDrawEnum = interface;
  Direct3DRMVisual = interface;
  Direct3DRMFace2 = interface;
  Direct3DRMMaterial2 = interface;
  Direct3DRMLight = interface;
  Direct3DRMFrame3 = interface;
  Direct3DRMFrameMoveCallback3 = interface;
  Direct3DRMFrameArray = interface;
  Direct3DRMLightArray = interface;
  Direct3DRMVisualArray = interface;
  Direct3DRMPick2Array = interface;
  Direct3DRMMesh = interface;
  Direct3DRMWrap = interface;
  Direct3DRMObjectArray = interface;
  Direct3DRMDeviceArray = interface;
  Direct3DRMDevice3 = interface;
  Direct3DRMDeviceUpdateCallback3 = interface;
  Direct3DRMViewportArray = interface;
  Direct3DRMViewport2 = interface;
  Direct3DRMPickArray = interface;
  Direct3DRMFaceArray = interface;
  Direct3DRMAnimationArray = interface;
  Direct3DRMAnimation2 = interface;
  Direct3DRMShadow2 = interface;
  Direct3DRMAnimationSet2 = interface;
  Direct3DRM3 = interface;
  Direct3DRMMeshBuilder3 = interface;
  Direct3DRMProgressiveMesh = interface;
  Direct3DRMClippedVisual = interface;
  Direct3DRMMeshInterpolator = interface;
  Direct3DRMTextureInterpolator = interface;
  Direct3DRMMaterialInterpolator = interface;
  Direct3DRMFrameInterpolator = interface;
  Direct3DRMViewportInterpolator = interface;
  Direct3DRMLightInterpolator = interface;
  DirectSound = interface;
  DirectSoundBuffer = interface;
  DirectSound3DListener = interface;
  DirectSound3DBuffer = interface;
  DirectSoundCapture = interface;
  DirectSoundCaptureBuffer = interface;
  DirectSoundEnum = interface;
  DirectInput = interface;
  DirectInputDevice = interface;
  DirectInputEnumDeviceObjects = interface;
  DirectInputDeviceObjectInstance = interface;
  DirectInputDeviceInstance = interface;
  DirectInputEffect = interface;
  DirectInputEnumEffects = interface;
  DirectInputEnumDevices = interface;
  Direct3DRMInterpolator = interface;
  DirectMusicLoader = interface;
  DirectMusicSegment = interface;
  DirectMusicPerformance = interface;
  DirectMusicSegmentState = interface;
  DirectMusicStyle = interface;
  DirectMusicBand = interface;
  DirectMusicChordMap = interface;
  DirectMusicCollection = interface;
  DirectMusicComposer = interface;
  DirectXEvent = interface;
  IDirectX7 = interface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  DirectX7 = IDirectX7;


// *********************************************************************//
// Declaration of structures, unions and aliases.                         
// *********************************************************************//
  wireHFONT = ^_RemotableHandle; 
  wireHDC = ^_RemotableHandle; 
  PInteger1 = ^Integer; {*}
  PUserType1 = ^DPSECURITYDESC; {*}
  PUserType2 = ^DPCREDENTIALS; {*}
  PUserType3 = ^DPAPPLICATIONDESC2; {*}
  PPUserType1 = ^Direct3DRMObject; {*}
  PPSafeArray1 = ^PSafeArray; {*}
  PUserType4 = ^RECT; {*}
  PUserType5 = ^DDBLTFX; {*}
  PUserType6 = ^DDSCAPS2; {*}
  PUserType7 = ^DDSURFACEDESC2; {*}
  PUserType8 = ^DDCOLORKEY; {*}
  PPSafeArray2 = ^PSafeArray; {*}
  PPSafeArray3 = ^PSafeArray; {*}
  PUserType9 = ^D3DVERTEXBUFFERDESC; {*}
  PUserType10 = ^DDCOLORCONTROL; {*}
  PUserType11 = ^DDGAMMARAMP; {*}
  PPSafeArray4 = ^PSafeArray; {*}
  PUserType12 = ^D3DVECTOR; {*}
  PSingle1 = ^Single; {*}
  PPSafeArray5 = ^PSafeArray; {*}
  PUserType13 = ^D3DCLIPSTATUS; {*}
  PUserType14 = ^D3DLIGHT7; {*}
  PUserType15 = ^D3DMATERIAL7; {*}
  PUserType16 = ^D3DMATRIX; {*}
  PUserType17 = ^D3DVIEWPORT7; {*}
  PPSafeArray6 = ^PSafeArray; {*}
  PPUserType2 = ^Direct3DRMMaterial2; {*}
  PUserType18 = ^D3DRMRAY; {*}
  PUserType19 = ^D3DRMBOX; {*}
  PUserType20 = ^D3DRMQUATERNION; {*}
  PUserType21 = ^D3DRMPICKDESC2; {*}
  PUserType22 = ^D3DRMVERTEX; {*}
  PPSafeArray7 = ^PSafeArray; {*}
  PPSafeArray8 = ^PSafeArray; {*}
  PUserType23 = ^D3DRECT; {*}
  PUserType24 = ^D3DRMVECTOR4D; {*}
  PUserType25 = ^D3DRMPICKDESC; {*}
  PUserType26 = ^D3DRMANIMATIONKEY; {*}
  PPSafeArray9 = ^PSafeArray; {*}
  PPSafeArray10 = ^PSafeArray; {*}
  PUserType27 = ^DSBUFFERDESC; {*}
  PUserType28 = ^WAVEFORMATEX; {*}
  PPSafeArray11 = ^PSafeArray; {*}
  PUserType29 = ^DS3DLISTENER; {*}
  PUserType30 = ^DS3DBUFFER; {*}
  PUserType31 = ^DSCBUFFERDESC; {*}
  PUserType32 = ^DIDATAFORMAT; {*}
  PPSafeArray12 = ^PSafeArray; {*}
  PUserType33 = ^DIEFFECT; {*}
  PPSafeArray13 = ^PSafeArray; {*}
  PUserType34 = ^DMUS_NOTE_PMSG; {*}
  PUserType35 = ^DMUS_CURVE_PMSG; {*}
  PUserType36 = ^DMUS_TIMESIGNATURE; {*}

  RECT = packed record
    Left: Integer;
    Top: Integer;
    Right: Integer;
    Bottom: Integer;
  end;

  DXGUID = packed record
    data1: Integer;
    data2: Smallint;
    data3: Smallint;
    data4: array[0..7] of Byte;
  end;

  DPAPPLICATIONDESC2 = packed record
    lFlags: Integer;
    strApplicationName: WideString;
    strGuid: WideString;
    strFilename: WideString;
    strCommandLine: WideString;
    strPath: WideString;
    strCurrentDirectory: WideString;
    strDescription: WideString;
    strAppLauncherName: WideString;
  end;

  DIRECTXREGISTERAPP = packed record
    lFlags: Integer;
    strApplicationName: WideString;
    strGuid: WideString;
    strFilename: WideString;
    strCommandLine: WideString;
    strPath: WideString;
    strCurrentDirectory: WideString;
  end;

  PALETTEENTRY = packed record
    red: Byte;
    green: Byte;
    blue: Byte;
    flags: Byte;
  end;

  D3DRECT = packed record
    x1: Integer;
    y1: Integer;
    x2: Integer;
    y2: Integer;
  end;

  D3DVECTOR = packed record
    x: Single;
    y: Single;
    z: Single;
  end;

  D3DCOLORVALUE = packed record
    r: Single;
    g: Single;
    b: Single;
    a: Single;
  end;

  D3DLINEPATTERN = packed record
    repeatFactor: Integer;
    linePatern: Integer;
  end;

  D3DTLVERTEX = packed record
    sx: Single;
    sy: Single;
    sz: Single;
    rhw: Single;
    color: Integer;
    specular: Integer;
    tu: Single;
    tv: Single;
  end;

  D3DLVERTEX = packed record
    x: Single;
    y: Single;
    z: Single;
    reserved: Integer;
    color: Integer;
    specular: Integer;
    tu: Single;
    tv: Single;
  end;

  D3DVERTEX = packed record
    x: Single;
    y: Single;
    z: Single;
    nx: Single;
    ny: Single;
    nz: Single;
    tu: Single;
    tv: Single;
  end;

  D3DCLIPSTATUS = packed record
    lFlags: CONST_D3DCLIPSTATUSFLAGS;
    lStatus: CONST_D3DCLIPFLAGS;
    minx: Single;
    maxx: Single;
    miny: Single;
    maxy: Single;
    minz: Single;
    maxz: Single;
  end;

  D3DVIEWPORT7 = packed record
    lX: Integer;
    lY: Integer;
    lWidth: Integer;
    lHeight: Integer;
    minz: Single;
    maxz: Single;
  end;

  D3DLIGHTINGCAPS = packed record
    lSize: Integer;
    lCaps: CONST_D3DLIGHTCAPSFLAGS;
    lLightingModel: CONST_D3DLIGHTINGMODELFLAGS;
    lNumLights: Integer;
  end;

  D3DPRIMCAPS = packed record
    lSize: Integer;
    lMiscCaps: CONST_D3DCAPSMISC;
    lRasterCaps: CONST_D3DCAPSRASTER;
    lZCmpCaps: CONST_D3DCAPSCMP;
    lSrcBlendCaps: CONST_D3DCAPSBLEND;
    lDestBlendCaps: CONST_D3DCAPSBLEND;
    lAlphaCmpCaps: CONST_D3DCAPSCMP;
    lShadeCaps: CONST_D3DCAPSSHADE;
    lTextureCaps: CONST_D3DCAPSTEXTURE;
    lTextureFilterCaps: CONST_D3DCAPSTEXTUREFILTER;
    lReserved1: Integer;
    lTextureAddressCaps: CONST_D3DCAPSTEXTUREADDRESS;
    lStippleWidth: Integer;
    lStippleHeight: Integer;
  end;

  D3DDEVICEDESC7 = packed record
    lDevCaps: CONST_D3DDEVICEDESCCAPS;
    dpcLineCaps: D3DPRIMCAPS;
    dpcTriCaps: D3DPRIMCAPS;
    lDeviceRenderBitDepth: Integer;
    lDeviceZBufferBitDepth: Integer;
    lMinTextureWidth: Integer;
    lMinTextureHeight: Integer;
    lMaxTextureWidth: Integer;
    lMaxTextureHeight: Integer;
    lMaxTextureRepeat: Integer;
    lMaxTextureAspectRatio: Integer;
    lMaxAnisotropy: Integer;
    dvGuardBandLeft: Single;
    dvGuardBandTop: Single;
    dvGuardBandRight: Single;
    dvGuardBandBottom: Single;
    dvExtentsAdjust: Single;
    lStencilCaps: CONST_D3DSTENCILCAPSFLAGS;
    lFVFCaps: CONST_D3DFVFCAPSFLAGS;
    lTextureOpCaps: CONST_D3DTEXOPCAPSFLAGS;
    nMaxTextureBlendStages: Smallint;
    nMaxSimultaneousTextures: Smallint;
    lMaxActiveLights: Integer;
    dvMaxVertexW: Single;
    deviceGuid: DXGUID;
    nMaxUserClipPlanes: Smallint;
    nMaxVertexBlendMatrices: Smallint;
    lVertexProcessingCaps: CONST_D3DVTXPCAPSFLAGS;
    lReserved1: Integer;
    lReserved2: Integer;
    lReserved3: Integer;
    lReserved4: Integer;
  end;

  D3DMATERIAL7 = packed record
    diffuse: D3DCOLORVALUE;
    ambient: D3DCOLORVALUE;
    specular: D3DCOLORVALUE;
    emissive: D3DCOLORVALUE;
    power: Single;
  end;

  D3DLIGHT7 = packed record
    dltType: CONST_D3DLIGHTTYPE;
    diffuse: D3DCOLORVALUE;
    specular: D3DCOLORVALUE;
    ambient: D3DCOLORVALUE;
    position: D3DVECTOR;
    direction: D3DVECTOR;
    range: Single;
    falloff: Single;
    attenuation0: Single;
    attenuation1: Single;
    attenuation2: Single;
    theta: Single;
    phi: Single;
  end;

  D3DMATRIX = packed record
    rc11: Single;
    rc12: Single;
    rc13: Single;
    rc14: Single;
    rc21: Single;
    rc22: Single;
    rc23: Single;
    rc24: Single;
    rc31: Single;
    rc32: Single;
    rc33: Single;
    rc34: Single;
    rc41: Single;
    rc42: Single;
    rc43: Single;
    rc44: Single;
  end;

  D3DRMRAY = packed record
    dir: D3DVECTOR;
    pos: D3DVECTOR;
  end;

  D3DRMQUATERNION = packed record
    s: Single;
    v: D3DVECTOR;
  end;

  D3DRMVECTOR4D = packed record
    x: Single;
    y: Single;
    z: Single;
    w: Single;
  end;

  D3DRMBOX = packed record
    min: D3DVECTOR;
    max: D3DVECTOR;
  end;

  D3DRMPICKDESC = packed record
    lFaceIdx: Integer;
    lGroupIdx: Integer;
    vPosition: D3DVECTOR;
  end;

  D3DRMPICKDESC2 = packed record
    lFaceIdx: Integer;
    lGroupIdx: Integer;
    vPostion: D3DVECTOR;
    tu: Single;
    tv: Single;
    vNormal: D3DVECTOR;
    color: Integer;
  end;

  D3DRMVERTEX = packed record
    position: D3DVECTOR;
    normal: D3DVECTOR;
    tu: Single;
    tv: Single;
    color: Integer;
  end;

  DDCOLORKEY = packed record
    low: Integer;
    high: Integer;
  end;

  DDSCAPS2 = packed record
    lCaps: CONST_DDSURFACECAPSFLAGS;
    lCaps2: CONST_DDSURFACECAPS2FLAGS;
    lCaps3: Integer;
    lCaps4: Integer;
  end;

  DDPIXELFORMAT = packed record
    lSize: Integer;
    lFlags: CONST_DDPIXELFORMATFLAGS;
    lFourCC: Integer;
    internalVal1: Integer;
    internalVal2: Integer;
    internalVal3: Integer;
    internalVal4: Integer;
    internalVal5: Integer;
    lRGBBitCount: Integer;
    lYUVBitCount: Integer;
    lZBufferBitDepth: Integer;
    lAlphaBitDepth: Integer;
    lLuminanceBitCount: Integer;
    lBumpBitCount: Integer;
    lRBitMask: Integer;
    lYBitMask: Integer;
    lStencilBitDepth: Integer;
    lLuminanceBitMask: Integer;
    lBumpDuBitMask: Integer;
    lGBitMask: Integer;
    lUBitMask: Integer;
    lZBitMask: Integer;
    lBumpDvBitMask: Integer;
    lBBitMask: Integer;
    lVBitMask: Integer;
    lStencilBitMask: Integer;
    lBumpLuminanceBitMask: Integer;
    lRGBAlphaBitMask: Integer;
    lYUVAlphaBitMask: Integer;
    lLuminanceAlphaBitMask: Integer;
    lRGBZBitMask: Integer;
    lYUVZBitMask: Integer;
  end;

  DDSURFACEDESC2 = packed record
    lSize: Integer;
    lFlags: CONST_DDSURFACEDESCFLAGS;
    lHeight: Integer;
    lWidth: Integer;
    lPitch: Integer;
    lBackBufferCount: Integer;
    lZBufferBitDepth: Integer;
    lAlphaBitDepth: Integer;
    lReserved: Integer;
    lpSurface: Integer;
    ddckCKDestOverlay: DDCOLORKEY;
    ddckCKDestBlt: DDCOLORKEY;
    ddckCKSrcOverlay: DDCOLORKEY;
    ddckCKSrcBlt: DDCOLORKEY;
    ddpfPixelFormat: DDPIXELFORMAT;
    ddsCaps: DDSCAPS2;
    lTextureStage: Integer;
    lLinearSize: Integer;
    lMipMapCount: Integer;
    lRefreshRate: Integer;
  end;

  DDCAPS = packed record
    lSize: Integer;
    lCaps: CONST_DDCAPS1FLAGS;
    lCaps2: CONST_DDCAPS2FLAGS;
    lCKeyCaps: CONST_DDCKEYCAPSFLAGS;
    lFXCaps: CONST_DDFXCAPSFLAGS;
    lFXAlphaCaps: Integer;
    lPalCaps: CONST_DDPCAPSFLAGS;
    lSVCaps: CONST_DDSTEREOCAPSFLAGS;
    lAlphaBltConstBitDepths: Integer;
    lAlphaBltPixelBitDepths: Integer;
    lAlphaBltSurfaceBitDepths: Integer;
    lAlphaOverlayConstBitDepths: Integer;
    lAlphaOverlayPixelBitDepths: Integer;
    lAlphaOverlaySurfaceBitDepths: Integer;
    lZBufferBitDepths: Integer;
    lVidMemTotal: Integer;
    lVidMemFree: Integer;
    lMaxVisibleOverlays: Integer;
    lCurrVisibleOverlays: Integer;
    lNumFourCCCodes: Integer;
    lAlignBoundarySrc: Integer;
    lAlignSizeSrc: Integer;
    lAlignBoundaryDest: Integer;
    lAlignSizeDest: Integer;
    lAlignStrideAlign: Integer;
    lRops: array[0..7] of Integer;
    lReservedCaps: Integer;
    lMinOverlayStretch: Integer;
    lMaxOverlayStretch: Integer;
    lMinLiveVideoStretch: Integer;
    lMaxLiveVideoStretch: Integer;
    lMinHwCodecStretch: Integer;
    lMaxHwCodecStretch: Integer;
    lReserved1: Integer;
    lReserved2: Integer;
    lReserved3: Integer;
    lSVBCaps: CONST_DDCAPS1FLAGS;
    lSVBCKeyCaps: CONST_DDCKEYCAPSFLAGS;
    lSVBFXCaps: CONST_DDFXCAPSFLAGS;
    lSVBRops: array[0..7] of Integer;
    lVSBCaps: CONST_DDCAPS1FLAGS;
    lVSBCKeyCaps: CONST_DDCKEYCAPSFLAGS;
    lVSBFXCaps: CONST_DDFXCAPSFLAGS;
    lVSRops: array[0..7] of Integer;
    lSSBCaps: CONST_DDCAPS1FLAGS;
    lSSBCKeyCaps: CONST_DDCKEYCAPSFLAGS;
    lSSBFXCaps: CONST_DDFXCAPSFLAGS;
    lSSBRops: array[0..7] of Integer;
    lMaxVideoPorts: Integer;
    lCurrVideoPorts: Integer;
    lSVBCaps2: CONST_DDCAPS2FLAGS;
    lNLVBCaps: CONST_DDCAPS1FLAGS;
    lNLVBCaps2: CONST_DDCAPS2FLAGS;
    lNLVBCKeyCaps: CONST_DDCKEYCAPSFLAGS;
    lNLVBFXCaps: CONST_DDFXCAPSFLAGS;
    lNLVBRops: array[0..7] of Integer;
    ddsCaps: DDSCAPS2;
  end;

  DDBLTFX = packed record
    lSize: Integer;
    lDDFX: CONST_DDBLTFXFLAGS;
    lROP: Integer;
    lDDROP: Integer;
    lRotationAngle: Integer;
    lZBufferOpCode: Integer;
    lZBufferLow: Integer;
    lZBufferHigh: Integer;
    lZBufferBaseDest: Integer;
    lZDestConstBitDepth: Integer;
    lZDestConst: Integer;
    lZSrcConstBitDepth: Integer;
    lZSrcConst: Integer;
    lAlphaEdgeBlendBitDepth: Integer;
    lAlphaEdgeBlend: Integer;
    lReserved: Integer;
    lAlphaDestConstBitDepth: Integer;
    lAlphaDestConst: Integer;
    lAlphaSrcConstBitDepth: Integer;
    lAlphaSrcConst: Integer;
    lFill: Integer;
    ddckDestColorKey_low: Integer;
    ddckDestColorKey_high: Integer;
    ddckSrcColorKey_low: Integer;
    ddckSrcColorKey_high: Integer;
  end;

  DDCOLORCONTROL = packed record
    lSize: Integer;
    lFlags: CONST_DDCOLORFLAGS;
    lBrightness: Integer;
    lContrast: Integer;
    lHue: Integer;
    lSaturation: Integer;
    lSharpness: Integer;
    lGamma: Integer;
    lColorEnable: Integer;
    lReserved1: Integer;
  end;

  DDGAMMARAMP = packed record
    red: array[0..255] of Smallint;
    green: array[0..255] of Smallint;
    blue: array[0..255] of Smallint;
  end;

  D3DVERTEXBUFFERDESC = packed record
    lSize: Integer;
    lCaps: CONST_D3DVBCAPSFLAGS;
    lFVF: CONST_D3DFVFFLAGS;
    lNumVertices: Integer;
  end;

  DSBCAPS = packed record
    lSize: Integer;
    lFlags: CONST_DSBCAPSFLAGS;
    lBufferBytes: Integer;
    lUnlockTransferRate: Integer;
    lPlayCpuOverhead: Integer;
  end;

  DSCAPS = packed record
    lSize: Integer;
    lFlags: CONST_DSCAPSFLAGS;
    lMinSecondarySampleRate: Integer;
    lMaxSecondarySampleRate: Integer;
    lPrimaryBuffers: Integer;
    lMaxHwMixingAllBuffers: Integer;
    lMaxHwMixingStaticBuffers: Integer;
    lMaxHwMixingStreamingBuffers: Integer;
    lFreeHwMixingAllBuffers: Integer;
    lFreeHwMixingStaticBuffers: Integer;
    lFreeHwMixingStreamingBuffers: Integer;
    lMaxHw3DAllBuffers: Integer;
    lMaxHw3DStaticBuffers: Integer;
    lMaxHw3DStreamingBuffers: Integer;
    lFreeHw3DAllBuffers: Integer;
    lFreeHw3DStaticBuffers: Integer;
    lFreeHw3DStreamingBuffers: Integer;
    lTotalHwMemBytes: Integer;
    lFreeHwMemBytes: Integer;
    lMaxContigFreeHwMemBytes: Integer;
    lUnlockTransferRateHwBuffers: Integer;
    lPlayCpuOverheadSwBuffers: Integer;
    lReserved1: Integer;
    lReserved2: Integer;
  end;

  WAVEFORMATEX = packed record
    nFormatTag: Smallint;
    nChannels: Smallint;
    lSamplesPerSec: Integer;
    lAvgBytesPerSec: Integer;
    nBlockAlign: Smallint;
    nBitsPerSample: Smallint;
    nSize: Smallint;
    lExtra: Integer;
  end;

  DSBUFFERDESC = packed record
    lSize: Integer;
    lFlags: CONST_DSBCAPSFLAGS;
    lBufferBytes: Integer;
    lReserved: Integer;
    lpwfxFormat: Integer;
  end;

  DSCURSORS = packed record
    lPlay: Integer;
    lWrite: Integer;
  end;

  DS3DBUFFER = packed record
    lSize: Integer;
    vPostion: D3DVECTOR;
    vVelocity: D3DVECTOR;
    lInsideConeAngle: Integer;
    lOutsideConeAngle: Integer;
    vConeOrientation: D3DVECTOR;
    lConeOutsideVolume: Integer;
    minDistance: Single;
    maxDistance: Single;
    lMode: CONST_DS3DMODEFLAGS;
  end;

  DS3DLISTENER = packed record
    lSize: Integer;
    vPosition: D3DVECTOR;
    vVelocity: D3DVECTOR;
    vOrientFront: D3DVECTOR;
    vOrientTop: D3DVECTOR;
    distanceFactor: Single;
    rolloffFactor: Single;
    dopplerFactor: Single;
  end;

  DSCBCAPS = packed record
    lSize: Integer;
    lFlags: CONST_DSCBCAPSFLAGS;
    lBufferBytes: Integer;
    lReserved: Integer;
  end;

  DSCCAPS = packed record
    lSize: Integer;
    lFlags: CONST_DSCCAPSFLAGS;
    lFormats: CONST_WAVEFORMATFLAGS;
    lChannels: Integer;
  end;

  DSCBUFFERDESC = packed record
    lSize: Integer;
    lFlags: CONST_DSCBCAPSFLAGS;
    lBufferBytes: Integer;
    lReserved: Integer;
    pFormat: Integer;
    fxFormat: WAVEFORMATEX;
  end;

  DSBPOSITIONNOTIFY = packed record
    lOffset: Integer;
    hEventNotify: Integer;
  end;

  DPCREDENTIALS = packed record
    lFlags: Integer;
    strUsername: WideString;
    strPassword: WideString;
    strDomain: WideString;
  end;

  DPSECURITYDESC = packed record
    lFlags: Integer;
    strSSPIProvider: WideString;
    strCAPIProvider: WideString;
    lCAPIProviderType: Integer;
    lEncryptionAlgorithm: Integer;
  end;

  DPCAPS = packed record
    lSize: Integer;
    lFlags: CONST_DPCAPSFLAGS;
    lMaxBufferSize: Integer;
    lMaxQueueSize: Integer;
    lMaxPlayers: Integer;
    lHundredBaud: Integer;
    lLatency: Integer;
    lMaxLocalPlayers: Integer;
    lHeaderLength: Integer;
    lTimeout: Integer;
  end;

  DIDEVCAPS = packed record
    lSize: Integer;
    lFlags: CONST_DIDEVCAPSFLAGS;
    lDevType: CONST_DIDEVICETYPE;
    lAxes: Integer;
    lButtons: Integer;
    lPOVs: Integer;
    lFFSamplePeriod: Integer;
    lFFMinTimeResolution: Integer;
    lFirmwareRevision: Integer;
    lHardwareRevision: Integer;
    lDriverVersion: Integer;
  end;

  DIDEVICEOBJECTDATA = packed record
    lOfs: Integer;
    lData: Integer;
    lTimeStamp: Integer;
    lSequence: Integer;
  end;

  DIPROPRANGE = packed record
    lSize: Integer;
    lHeaderSize: Integer;
    lObj: Integer;
    lHow: Integer;
    lMin: Integer;
    lMax: Integer;
  end;

  DIPROPLONG = packed record
    lSize: Integer;
    lHeaderSize: Integer;
    lObj: Integer;
    lHow: Integer;
    lData: Integer;
  end;

  DIOBJECTDATAFORMAT = packed record
    strGuid: WideString;
    lOfs: Integer;
    lType: CONST_DIDFTFLAGS;
    lFlags: CONST_DIDEVICEOBJINSTANCEFLAGS;
  end;

  DIDATAFORMAT = packed record
    lSize: Integer;
    lObjSize: Integer;
    lFlags: CONST_DIDATAFORMATFLAGS;
    dataSize: Integer;
    numObjs: Integer;
    pData: Integer;
  end;

  DIMOUSESTATE = packed record
    x: Integer;
    y: Integer;
    z: Integer;
    buttons: array[0..3] of Byte;
  end;

  DIKEYBOARDSTATE = packed record
    key: array[0..255] of Byte;
  end;

  DIJOYSTATE = packed record
    x: Integer;
    y: Integer;
    z: Integer;
    rx: Integer;
    ry: Integer;
    rz: Integer;
    slider: array[0..1] of Integer;
    POV: array[0..3] of Integer;
    buttons: array[0..31] of Byte;
  end;

  DIJOYSTATE2 = packed record
    x: Integer;
    y: Integer;
    z: Integer;
    rx: Integer;
    ry: Integer;
    rz: Integer;
    slider: array[0..1] of Integer;
    POV: array[0..3] of Integer;
    buttons: array[0..127] of Byte;
    vx: Integer;
    vy: Integer;
    vz: Integer;
    vrx: Integer;
    vry: Integer;
    vrz: Integer;
    vslider: array[0..1] of Integer;
    ax: Integer;
    ay: Integer;
    az: Integer;
    arx: Integer;
    ary: Integer;
    arz: Integer;
    aslider: array[0..1] of Integer;
    fx: Integer;
    fy: Integer;
    fz: Integer;
    frx: Integer;
    fry: Integer;
    frz: Integer;
    fslider: array[0..1] of Integer;
  end;

  D3DRMPMESHLOADSTATUS = packed record
    lSize: Integer;
    lPMeshSize: Integer;
    lBaseMeshSize: Integer;
    lBytesLoaded: Integer;
    lVerticesLoaded: Integer;
    lFacesLoaded: Integer;
    lFlags: CONST_D3DRMPMESHSTATUSFLAGS;
  end;

  D3DRMANIMATIONKEY = packed record
    lSize: Integer;
    lKeyType: Integer;
    dvTime: Single;
    lID: Integer;
    dvX: Single;
    dvY: Single;
    dvZ: Single;
    dvS: Single;
  end;

  D3DRMMATERIALOVERRIDE = packed record
    lSize: Integer;
    lFlags: CONST_D3DRMMATERIALOVERRIDEFLAGS;
    dcDiffuse: D3DCOLORVALUE;
    dcAmbient: D3DCOLORVALUE;
    dcEmissive: D3DCOLORVALUE;
    dcSpecular: D3DCOLORVALUE;
    dvPower: Single;
    pTex: IUnknown;
  end;

  DMUS_TIMESIGNATURE = packed record
    mtTime: Integer;
    beatsPerMeasure: Byte;
    beat: Byte;
    gridsPerBeat: Smallint;
  end;

  DMUS_NOTIFICATION_PMSG = packed record
    lFlags: Integer;
    ctTime: Integer;
    mtTime: Integer;
    lNotificationType: Integer;
    lNotificationOption: Integer;
    lField1: Integer;
    lField2: Integer;
  end;

  DMUS_CURVE_PMSG = packed record
    mtDuration: Integer;
    mtOriginalStart: Integer;
    mtResetDuration: Integer;
    startValue: Smallint;
    endValue: Smallint;
    resetValue: Smallint;
    measure: Smallint;
    offset: Smallint;
    beat: Byte;
    grid: Byte;
    type_: Byte;
    curveShape: Byte;
    ccData: Byte;
    flags: Byte;
  end;

  DMUS_NOTE_PMSG = packed record
    mtDuration: Integer;
    musicValue: Smallint;
    measure: Smallint;
    offset: Smallint;
    beat: Byte;
    grid: Byte;
    velocity: Byte;
    flags: Byte;
    timeRange: Byte;
    durRange: Byte;
    velRange: Byte;
    playModeFlags: Byte;
    subChordLevel: Byte;
    midiValue: Byte;
    transpose: Smallint;
  end;

  DMUS_PORTCAPS = packed record
    dwSize: Integer;
    lFlags: CONST_DMUS_PC_FLAGS;
    guidPort: DXGUID;
    lClass: CONST_DMUS_PC_CLASS;
    lType: CONST_DMUS_PORT_TYPE;
    lMemorySize: Integer;
    lMaxChannelGroups: Integer;
    lMaxVoices: Integer;
    lMaxAudioChannels: Integer;
    lEffectFlags: Integer;
    wszDescription: array[0..127] of Smallint;
  end;

  DIENVELOPE = packed record
    lSize: Integer;
    lAttackLevel: Integer;
    lAttackTime: Integer;
    lFadeLevel: Integer;
    lFadeTime: Integer;
  end;

  DIRAMPFORCE = packed record
    lRangeStart: Integer;
    lRangeEnd: Integer;
  end;

  DIPERIODICFORCE = packed record
    lMagnitude: Integer;
    lOffset: Integer;
    lPhase: Integer;
    lPeriod: Integer;
  end;

  DICONDITION = packed record
    lOffset: Integer;
    lPositiveCoefficient: Integer;
    lNegativeCoefficient: Integer;
    lPositiveSaturation: Integer;
    lNegativeSaturation: Integer;
    lDeadBand: Integer;
  end;

  DICONSTANTFORCE = packed record
    lMagnitude: Integer;
  end;

  DIAXISOFFSETS = packed record
    x: Integer;
    y: Integer;
  end;

  DIEFFECT = packed record
    dwSize: Integer;
    lFlags: Integer;
    lDuration: Integer;
    lSamplePeriod: Integer;
    lGain: Integer;
    lTriggerButton: Integer;
    lTriggerRepeatInterval: Integer;
    cAxes: Integer;
    lprgdwAxes: Integer;
    lprglDirection: Integer;
    lpEnvelope: Integer;
    cbTypeSpecificParams: Integer;
    lpvTypeSpecificParams: Integer;
    lStartDelay: Integer;
    x: Integer;
    y: Integer;
    rampForce: DIRAMPFORCE;
    periodicForce: DIPERIODICFORCE;
    constantForce: DICONSTANTFORCE;
    conditionX: DICONDITION;
    conditionY: DICONDITION;
    conditionFlags: CONST_DICONDITIONFLAGS;
    bUseEnvelope: Integer;
    envelope: DIENVELOPE;
    axisOffsets: DIAXISOFFSETS;
  end;

  D3DDEVINFO_TEXTUREMANAGER = packed record
    bThrashing: Integer;
    lNumEvicts: Integer;
    lNumVidCreates: Integer;
    lNumTexturesUsed: Integer;
    lNumUsedTexInVid: Integer;
    lWorkingSet: Integer;
    lWorkingSetBytes: Integer;
    lTotalManaged: Integer;
    lTotalBytes: Integer;
    lLastPri: Integer;
  end;

  DDOVERLAYFX = packed record
    lSize: Integer;
    lAlphaEdgeBlendBitDepth: Integer;
    lAlphaEdgeBlend: Integer;
    lReserved: Integer;
    lAlphaDestConstBitDepth: Integer;
    lAlphaDestConst: Integer;
    lAlphaSrcConstBitDepth: Integer;
    lAlphaSrcConst: Integer;
    dckDestColorkey: DDCOLORKEY;
    dckSrcColorkey: DDCOLORKEY;
    lDDFX: CONST_DDOVERFXFLAGS;
    lFlags: Integer;
  end;

  D3DDEVINFO_TEXTURING = packed record
    lNumLoads: Integer;
    lApproxBytesLoaded: Integer;
    lNumPreLoads: Integer;
    lNumSet: Integer;
    lNumCreates: Integer;
    lNumDestroys: Integer;
    lNumSetPriorities: Integer;
    lNumSetLODs: Integer;
    lNumLocks: Integer;
    lNumGetDCs: Integer;
  end;


  __MIDL_IWinTypes_0009 = record
    case Integer of
      0: (hInproc: Integer);
      1: (hRemote: Integer);
  end;

  _RemotableHandle = packed record
    fContext: Integer;
    u: __MIDL_IWinTypes_0009;
  end;

  tagTEXTMETRICW = packed record
    tmHeight: Integer;
    tmAscent: Integer;
    tmDescent: Integer;
    tmInternalLeading: Integer;
    tmExternalLeading: Integer;
    tmAveCharWidth: Integer;
    tmMaxCharWidth: Integer;
    tmWeight: Integer;
    tmOverhang: Integer;
    tmDigitizedAspectX: Integer;
    tmDigitizedAspectY: Integer;
    tmFirstChar: Word;
    tmLastChar: Word;
    tmDefaultChar: Word;
    tmBreakChar: Word;
    tmItalic: Byte;
    tmUnderlined: Byte;
    tmStruckOut: Byte;
    tmPitchAndFamily: Byte;
    tmCharSet: Byte;
  end;


// *********************************************************************//
// Interface: DirectPlayAddress
// Flags:     (0)
// GUID:      {9F76FF05-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectPlayAddress = interface(IUnknown)
    ['{9F76FF05-8E92-11D1-8808-00C04FC2C602}']
    function SetAddress(pAddress: Integer; length: Integer): HResult; stdcall;
    function GetAddress(out pAddress: Integer; out length: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectPlayLobbyConnection
// Flags:     (0)
// GUID:      {9F76FF06-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectPlayLobbyConnection = interface(IUnknown)
    ['{9F76FF06-8E92-11D1-8808-00C04FC2C602}']
    function GetConnectionStruct(out connect: Integer): HResult; stdcall;
    function SetConnectionStruct(connect: Integer): HResult; stdcall;
    function SetFlags(flags: CONST_DPLCONNECTIONFLAGS): HResult; stdcall;
    function GetFlags(out ret: CONST_DPLCONNECTIONFLAGS): HResult; stdcall;
    function SetSessionDesc(const sessionDesc: DirectPlaySessionData): HResult; stdcall;
    function GetSessionDesc(out sessionDesc: DirectPlaySessionData): HResult; stdcall;
    function SetGuidSP(const guid: WideString): HResult; stdcall;
    function GetGuidSP(out guid: WideString): HResult; stdcall;
    function SetAddress(const address: DirectPlayAddress): HResult; stdcall;
    function GetAddress(out address: DirectPlayAddress): HResult; stdcall;
    function SetPlayerShortName(const name: WideString): HResult; stdcall;
    function GetPlayerShortName(out name: WideString): HResult; stdcall;
    function SetPlayerLongName(const name: WideString): HResult; stdcall;
    function GetPlayerLongName(out name: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectPlaySessionData
// Flags:     (0)
// GUID:      {9F76FF12-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectPlaySessionData = interface(IUnknown)
    ['{9F76FF12-8E92-11D1-8808-00C04FC2C602}']
    function SetGuidInstance(const guid: WideString): HResult; stdcall;
    function GetGuidInstance(out guid: WideString): HResult; stdcall;
    function SetGuidApplication(const guid: WideString): HResult; stdcall;
    function GetGuidApplication(out guid: WideString): HResult; stdcall;
    function SetMaxPlayers(val: Integer): HResult; stdcall;
    function GetMaxPlayers(out val: Integer): HResult; stdcall;
    function SetCurrentPlayers(val: Integer): HResult; stdcall;
    function GetCurrentPlayers(out val: Integer): HResult; stdcall;
    function SetSessionName(const val: WideString): HResult; stdcall;
    function GetSessionName(out val: WideString): HResult; stdcall;
    function SetSessionPassword(const val: WideString): HResult; stdcall;
    function GetSessionPassword(out val: WideString): HResult; stdcall;
    function SetUser1(val: Integer): HResult; stdcall;
    function GetUser1(out val: Integer): HResult; stdcall;
    function SetUser2(val: Integer): HResult; stdcall;
    function GetUser2(out val: Integer): HResult; stdcall;
    function SetUser3(val: Integer): HResult; stdcall;
    function GetUser3(out val: Integer): HResult; stdcall;
    function SetUser4(val: Integer): HResult; stdcall;
    function GetUser4(out val: Integer): HResult; stdcall;
    function SetFlags(val: CONST_DPSESSIONFLAGS): HResult; stdcall;
    function GetFlags(out val: Integer): HResult; stdcall;
    function GetData(out val: Pointer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectPlayEnumConnections
// Flags:     (0)
// GUID:      {9F76FF0A-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectPlayEnumConnections = interface(IUnknown)
    ['{9F76FF0A-8E92-11D1-8808-00C04FC2C602}']
    function GetAddress(index: Integer; out retV: DirectPlayAddress): HResult; stdcall;
    function GetFlags(index: Integer; out retV: Integer): HResult; stdcall;
    function GetGuid(index: Integer; out retV: WideString): HResult; stdcall;
    function GetName(index: Integer; out retV: WideString): HResult; stdcall;
    function GetCount(out count: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectPlayEnumPlayers
// Flags:     (0)
// GUID:      {9F76FF0B-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectPlayEnumPlayers = interface(IUnknown)
    ['{9F76FF0B-8E92-11D1-8808-00C04FC2C602}']
    function GetCount(out count: Integer): HResult; stdcall;
    function GetFlags(index: Integer; out count: Integer): HResult; stdcall;
    function GetType(index: Integer; out count: Integer): HResult; stdcall;
    function GetDPID(index: Integer; out count: Integer): HResult; stdcall;
    function GetShortName(index: Integer; out retV: WideString): HResult; stdcall;
    function GetLongName(index: Integer; out retV: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectPlayEnumSessions
// Flags:     (0)
// GUID:      {9F76FF0C-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectPlayEnumSessions = interface(IUnknown)
    ['{9F76FF0C-8E92-11D1-8808-00C04FC2C602}']
    function GetItem(index: Integer; out retval: DirectPlaySessionData): HResult; stdcall;
    function GetCount(out count: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectPlayEnumServiceProviders
// Flags:     (16) Hidden
// GUID:      {9F76FF0D-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectPlayEnumServiceProviders = interface(IUnknown)
    ['{9F76FF0D-8E92-11D1-8808-00C04FC2C602}']
    function GetCount(out count: Integer): HResult; stdcall;
    function GetName(index: Integer; out ret: WideString): HResult; stdcall;
    function GetGuid(index: Integer; out ret: WideString): HResult; stdcall;
    function GetVersion(index: Integer; var majorVersion: Integer; var minorVersion: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectPlayEnumLocalApplications
// Flags:     (0)
// GUID:      {9F76FF0E-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectPlayEnumLocalApplications = interface(IUnknown)
    ['{9F76FF0E-8E92-11D1-8808-00C04FC2C602}']
    function GetCount(out count: Integer): HResult; stdcall;
    function GetName(index: Integer; out ret: WideString): HResult; stdcall;
    function GetGuid(index: Integer; out ret: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectPlayMessage
// Flags:     (0)
// GUID:      {9F76FF11-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectPlayMessage = interface(IUnknown)
    ['{9F76FF11-8E92-11D1-8808-00C04FC2C602}']
    function WriteGuid(const val: WideString): HResult; stdcall;
    function ReadGuid(out val: WideString): HResult; stdcall;
    function WriteString(const val: WideString): HResult; stdcall;
    function ReadString(out val: WideString): HResult; stdcall;
    function WriteLong(val: Integer): HResult; stdcall;
    function ReadLong(out val: Integer): HResult; stdcall;
    function WriteShort(val: Smallint): HResult; stdcall;
    function ReadShort(out val: Smallint): HResult; stdcall;
    function WriteSingle(val: Single): HResult; stdcall;
    function ReadSingle(out val: Single): HResult; stdcall;
    function WriteDouble(val: Double): HResult; stdcall;
    function ReadDouble(out val: Double): HResult; stdcall;
    function WriteByte(val: Byte): HResult; stdcall;
    function ReadByte(out val: Byte): HResult; stdcall;
    function MoveToTop: HResult; stdcall;
    function Clear: HResult; stdcall;
    function GetMessageSize(out ret: Integer): HResult; stdcall;
    function GetMessageData(var userDefinedType: Pointer): HResult; stdcall;
    function SetMessageData(var userDefinedType: Pointer; size: Integer): HResult; stdcall;
    function GetPointer(out ret: Integer): HResult; stdcall;
    function ReadSysMsgConnection(out ret: DirectPlayLobbyConnection): HResult; stdcall;
    function ReadSysMsgSessionDesc(out ret: DirectPlaySessionData): HResult; stdcall;
    function ReadSysMsgData(out ret: WideString): HResult; stdcall;
    function ReadSysChatString(out ret: WideString): HResult; stdcall;
    function MoveToSecureMessage: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectPlay4
// Flags:     (0)
// GUID:      {9F76FF0F-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectPlay4 = interface(IUnknown)
    ['{9F76FF0F-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddGroupToGroup(ParentGroupId: Integer; GroupId: Integer): HResult; stdcall;
    function AddPlayerToGroup(GroupId: Integer; playerId: Integer): HResult; stdcall;
    function CancelMessage(msgid: Integer): HResult; stdcall;
    function CancelPriority(minPrority: Integer; maxPriority: Integer): HResult; stdcall;
    function Close: HResult; stdcall;
    function CreateGroup(const friendlyName: WideString; const formalName: WideString; 
                         flags: CONST_DPGROUPFLAGS; out v1: Integer): HResult; stdcall;
    function CreateGroupInGroup(parentid: Integer; const friendlyName: WideString; 
                                const formalName: WideString; flags: CONST_DPGROUPFLAGS; 
                                out v1: Integer): HResult; stdcall;
    function CreatePlayer(const friendlyName: WideString; const formalName: WideString; 
                          receiveEvent: Integer; flags: CONST_DPPLAYERFLAGS; out v1: Integer): HResult; stdcall;
    function DeleteGroupFromGroup(groupParentId: Integer; GroupId: Integer): HResult; stdcall;
    function DeletePlayerFromGroup(GroupId: Integer; playerId: Integer): HResult; stdcall;
    function DestroyGroup(GroupId: Integer): HResult; stdcall;
    function DestroyPlayer(playerId: Integer): HResult; stdcall;
    function GetDPEnumConnections(const guid: WideString; flags: CONST_DPENUMCONNECTIONFLAGS; 
                                  out retval: DirectPlayEnumConnections): HResult; stdcall;
    function GetDPEnumGroupPlayers(GroupId: Integer; const sessionGuid: WideString; 
                                   flags: CONST_DPENUMPLAYERFLAGS; out retval: DirectPlayEnumPlayers): HResult; stdcall;
    function GetDPEnumGroups(const sessionGuid: WideString; flags: CONST_DPENUMGROUPFLAGS; 
                             out retval: DirectPlayEnumPlayers): HResult; stdcall;
    function GetDPEnumGroupsInGroup(GroupId: Integer; const sessionGuid: WideString; 
                                    flags: CONST_DPENUMGROUPFLAGS; out retval: DirectPlayEnumPlayers): HResult; stdcall;
    function GetDPEnumPlayers(const sessionGuid: WideString; flags: CONST_DPENUMPLAYERFLAGS; 
                              out retval: DirectPlayEnumPlayers): HResult; stdcall;
    function GetDPEnumSessions(const sessionDesc: DirectPlaySessionData; timeOut: Integer; 
                               flags: CONST_DPENUMSESSIONFLAGS; out retval: DirectPlayEnumSessions): HResult; stdcall;
    function GetCaps(var caps: DPCAPS; flags: CONST_DPGETCAPSFLAGS): HResult; stdcall;
    function GetGroupData(GroupId: Integer; flags: CONST_DPGETFLAGS; out ret: WideString): HResult; stdcall;
    function GetGroupFlags(GroupId: Integer; out flags: CONST_DPGROUPFLAGS): HResult; stdcall;
    function GetGroupLongName(GroupId: Integer; out name: WideString): HResult; stdcall;
    function GetGroupShortName(GroupId: Integer; out name: WideString): HResult; stdcall;
    function GetGroupParent(GroupId: Integer; out ret: Integer): HResult; stdcall;
    function GetGroupOwner(GroupId: Integer; out ret: Integer): HResult; stdcall;
    function GetMessageCount(playerId: Integer; out count: Integer): HResult; stdcall;
    function GetMessageQueue(from: Integer; to_: Integer; flags: CONST_DPMESSAGEQUEUEFLAGS; 
                             var nMessage: Integer; var nBytes: Integer): HResult; stdcall;
    function GetPlayerAccountId(playerId: Integer; out acctid: WideString): HResult; stdcall;
    function GetPlayerAddress(playerId: Integer; out ret: DirectPlayAddress): HResult; stdcall;
    function GetPlayerCaps(playerId: Integer; out caps: DPCAPS; flags: CONST_DPGETCAPSFLAGS): HResult; stdcall;
    function GetPlayerData(playerId: Integer; flags: CONST_DPGETFLAGS; out ret: WideString): HResult; stdcall;
    function GetPlayerFlags(playerId: Integer; out retflags: CONST_DPPLAYERFLAGS): HResult; stdcall;
    function GetPlayerFormalName(playerId: Integer; out name: WideString): HResult; stdcall;
    function GetPlayerFriendlyName(playerId: Integer; out name: WideString): HResult; stdcall;
    function GetSessionDesc(var sessionDesc: DirectPlaySessionData): HResult; stdcall;
    function InitializeConnection(const address: DirectPlayAddress): HResult; stdcall;
    function Open(var sessionDesc: DirectPlaySessionData; flags: CONST_DPOPENFLAGS): HResult; stdcall;
    function Receive(var fromPlayerId: Integer; var toPlayerId: Integer; 
                     flags: CONST_DPRECEIVEFLAGS; out ret: DirectPlayMessage): HResult; stdcall;
    function ReceiveSize(var fromPlayerId: Integer; var toPlayerId: Integer; 
                         flags: CONST_DPRECEIVEFLAGS; out dataSize: SYSINT): HResult; stdcall;
    function SecureOpen(const sessionDesc: DirectPlaySessionData; flags: CONST_DPOPENFLAGS; 
                        var security: DPSECURITYDESC; var credentials: DPCREDENTIALS): HResult; stdcall;
    function Send(fromPlayerId: Integer; toPlayerId: Integer; flags: CONST_DPSENDFLAGS; 
                  const msg: DirectPlayMessage): HResult; stdcall;
    function SendChatMessage(fromPlayerId: Integer; toPlayerId: Integer; flags: CONST_DPSENDFLAGS; 
                             const message: WideString): HResult; stdcall;
    function SendEx(fromPlayerId: Integer; toPlayerId: Integer; flags: CONST_DPSENDFLAGS; 
                    const msg: DirectPlayMessage; priority: Integer; timeOut: Integer; 
                    context: Integer; out messageid: Integer): HResult; stdcall;
    function CreateMessage(out msg: DirectPlayMessage): HResult; stdcall;
    function SetGroupConnectionSettings(id: Integer; const connection: DirectPlayLobbyConnection): HResult; stdcall;
    function SetGroupData(GroupId: Integer; const data: WideString; flags: CONST_DPSETFLAGS): HResult; stdcall;
    function SetGroupName(GroupId: Integer; const friendlyName: WideString; 
                          const formalName: WideString; flags: CONST_DPSETFLAGS): HResult; stdcall;
    function SetGroupOwner(GroupId: Integer; ownerId: Integer): HResult; stdcall;
    function SetPlayerData(playerId: Integer; const data: WideString; flags: CONST_DPSETFLAGS): HResult; stdcall;
    function SetPlayerName(playerId: Integer; const friendlyName: WideString; 
                           const formalName: WideString; flags: CONST_DPSETFLAGS): HResult; stdcall;
    function SetSessionDesc(const sessionDesc: DirectPlaySessionData): HResult; stdcall;
    function StartSession(id: Integer): HResult; stdcall;
    function CreateSessionData(out sessionDesc: DirectPlaySessionData): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectPlayLobby3
// Flags:     (0)
// GUID:      {9F76FF10-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectPlayLobby3 = interface(IUnknown)
    ['{9F76FF10-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function connect(flags: CONST_DPCONNECTFLAGS; out directPlay: DirectPlay4): HResult; stdcall;
    function GetDPEnumLocalApplications(out retval: DirectPlayEnumLocalApplications): HResult; stdcall;
    function GetConnectionSettings(applicationId: Integer; out connection: DirectPlayLobbyConnection): HResult; stdcall;
    function ReceiveLobbyMessage(applicationId: Integer; var messageFlags: Integer; 
                                 out data: DirectPlayMessage): HResult; stdcall;
    function ReceiveLobbyMessageSize(applicationId: Integer; var messageFlags: Integer; 
                                     out dataSize: Integer): HResult; stdcall;
    function RunApplication(const connection: DirectPlayLobbyConnection; receiveEvent: Integer; 
                            out applicationId: Integer): HResult; stdcall;
    function SendLobbyMessage(flags: CONST_DPLMSG; applicationId: Integer; 
                              const msg: DirectPlayMessage): HResult; stdcall;
    function SetConnectionSettings(applicationId: Integer; 
                                   const connection: DirectPlayLobbyConnection): HResult; stdcall;
    function SetLobbyMessageEvent(applicationId: Integer; receiveEvent: Integer): HResult; stdcall;
    function RegisterApplication(var ApplicationInfo: DPAPPLICATIONDESC2): HResult; stdcall;
    function UnregisterApplication(const guidApplication: WideString): HResult; stdcall;
    function WaitForConnectionSettings(flags: CONST_DPLWAIT): HResult; stdcall;
    function CreateMessage(out msg: DirectPlayMessage): HResult; stdcall;
    function CreateConnectionData(out connection: DirectPlayLobbyConnection): HResult; stdcall;
    function CreateINetAddress(const addr: WideString; port: SYSINT; out ret: DirectPlayAddress): HResult; stdcall;
    function CreateComPortAddress(port: Integer; baudRate: Integer; stopBits: Integer; 
                                  parity: Integer; flowcontrol: Integer; out ret: DirectPlayAddress): HResult; stdcall;
    function CreateLobbyProviderAddress(const guid: WideString; out ret: DirectPlayAddress): HResult; stdcall;
    function CreateServiceProviderAddress(const guid: WideString; out ret: DirectPlayAddress): HResult; stdcall;
    function CreateModemAddress(const modem: WideString; const phone: WideString; 
                                out ret: DirectPlayAddress): HResult; stdcall;
    function CreateIPXAddress(out ret: DirectPlayAddress): HResult; stdcall;
    function CreateCustomAddress(size: Integer; var data: Pointer; out ret: DirectPlayAddress): HResult; stdcall;
    function GetModemName(index: Integer; out name: WideString): HResult; stdcall;
    function GetModemCount(out count: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMEnumerateObjectsCallback
// Flags:     (0)
// GUID:      {BBD5AD04-8E91-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMEnumerateObjectsCallback = interface(IUnknown)
    ['{BBD5AD04-8E91-11D1-8808-00C04FC2C602}']
    function CallbackRMEnumerateObjects(const object_: Direct3DRMObject; 
                                        const userArgument: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMObject
// Flags:     (0)
// GUID:      {9F76FE0E-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMObject = interface(IUnknown)
    ['{9F76FE0E-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMCallback
// Flags:     (0)
// GUID:      {BBD5AD03-8E91-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMCallback = interface(IUnknown)
    ['{BBD5AD03-8E91-11D1-8808-00C04FC2C602}']
    function CallbackRMDestroyObject(const args: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMLoadCallback
// Flags:     (0)
// GUID:      {BBD5AD0A-8E91-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMLoadCallback = interface(IUnknown)
    ['{BBD5AD0A-8E91-11D1-8808-00C04FC2C602}']
    function CallbackRMLoad(var Obj: Direct3DRMObject; const guid: WideString; 
                            const userArgument: IDispatch): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMLoadTextureCallback3
// Flags:     (0)
// GUID:      {BBD5AD16-8E91-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMLoadTextureCallback3 = interface(IUnknown)
    ['{BBD5AD16-8E91-11D1-8808-00C04FC2C602}']
    function CallbackRMLoadTexture(const textureName: WideString; const userArgument: IDispatch; 
                                   out retV: Direct3DRMTexture3): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMTexture3
// Flags:     (0)
// GUID:      {9F76FE28-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMTexture3 = interface(IUnknown)
    ['{9F76FE28-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
    function Changed(flags: CONST_D3DRMTEXTURECHANGEDFLAGS; nRects: Integer; var rects: PSafeArray): HResult; stdcall;
    function GenerateMIPMap: HResult; stdcall;
    function GetCacheFlags(out ret: CONST_D3DRMTEXTURECACHEFLAGS): HResult; stdcall;
    function GetCacheImportance(out ret: Integer): HResult; stdcall;
    function GetColors(out c: Integer): HResult; stdcall;
    function GetDecalOrigin(out x: Integer; out y: Integer): HResult; stdcall;
    function GetDecalScale(out considerScale: CONST_DBOOLFLAGS): HResult; stdcall;
    function GetDecalSize(out w: Single; out h: Single): HResult; stdcall;
    function GetDecalTransparency(out enabled: CONST_DBOOLFLAGS): HResult; stdcall;
    function GetDecalTransparentColor(out tc: Integer): HResult; stdcall;
    function GetShades(out shades: Integer): HResult; stdcall;
    function GetSurface(flags: Integer; out surface: DirectDrawSurface4): HResult; stdcall;
    function SetCacheOptions(importance: Integer; flags: CONST_D3DRMTEXTURECACHEFLAGS): HResult; stdcall;
    function SetColors(numColors: Integer): HResult; stdcall;
    function SetDecalOrigin(x: Integer; y: Integer): HResult; stdcall;
    function SetDecalScale(considerScale: CONST_DBOOLFLAGS): HResult; stdcall;
    function SetDecalSize(width: Single; height: Single): HResult; stdcall;
    function SetDecalTransparency(transparencyEnabled: CONST_DBOOLFLAGS): HResult; stdcall;
    function SetDecalTransparentColor(tcolor: Integer): HResult; stdcall;
    function SetShades(numShades: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectDrawSurface4
// Flags:     (0)
// GUID:      {BCAA7DA3-F7EF-11D2-93FD-00C04FC2C602}
// *********************************************************************//
  DirectDrawSurface4 = interface(IUnknown)
    ['{BCAA7DA3-F7EF-11D2-93FD-00C04FC2C602}']
    function InternalSetObject(const lpdds: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdds: IUnknown): HResult; stdcall;
    function AddAttachedSurface(const ddS: DirectDrawSurface4): HResult; stdcall;
    function Blt(var destRect: RECT; const ddS: DirectDrawSurface4; var srcRect: RECT; 
                 flags: CONST_DDBLTFLAGS; out status: Integer): HResult; stdcall;
    function BltColorFill(var destRect: RECT; fillvalue: Integer; out status: Integer): HResult; stdcall;
    function BltFast(dx: Integer; dy: Integer; const ddS: DirectDrawSurface4; var srcRect: RECT; 
                     trans: CONST_DDBLTFASTFLAGS; out status: Integer): HResult; stdcall;
    function BltFx(var destRect: RECT; const ddS: DirectDrawSurface4; var srcRect: RECT; 
                   flags: CONST_DDBLTFLAGS; var BltFx: DDBLTFX; out status: Integer): HResult; stdcall;
    function BltToDC(hdc: Integer; var srcRect: RECT; var destRect: RECT): HResult; stdcall;
    function ChangeUniquenessValue: HResult; stdcall;
    function DeleteAttachedSurface(const ddS: DirectDrawSurface4): HResult; stdcall;
    function DrawBox(x1: Integer; y1: Integer; x2: Integer; y2: Integer): HResult; stdcall;
    function DrawCircle(x1: Integer; y1: Integer; r: Integer): HResult; stdcall;
    function DrawEllipse(x1: Integer; y1: Integer; x2: Integer; y2: Integer): HResult; stdcall;
    function DrawLine(x1: Integer; y1: Integer; x2: Integer; y2: Integer): HResult; stdcall;
    function DrawRoundedBox(x1: Integer; y1: Integer; x2: Integer; y2: Integer; rw: Integer; 
                            rh: Integer): HResult; stdcall;
    function DrawText(x: Integer; y: Integer; const text: WideString; b: WordBool): HResult; stdcall;
    function Flip(const ddS: DirectDrawSurface4; flags: CONST_DDFLIPFLAGS): HResult; stdcall;
    function GetAttachedSurface(var caps: DDSCAPS2; out ddS: DirectDrawSurface4): HResult; stdcall;
    function GetBltStatus(flags: CONST_DDGFSFLAGS; out status: Integer): HResult; stdcall;
    function GetCaps(var caps: DDSCAPS2): HResult; stdcall;
    function GetClipper(out val: DirectDrawClipper): HResult; stdcall;
    function GetColorKey(flags: Integer; var val: DDCOLORKEY): HResult; stdcall;
    function GetDC(out hdc: Integer): HResult; stdcall;
    function GetDirectDraw(out val: DirectDraw4): HResult; stdcall;
    function getDrawStyle(out drawStyle: Integer): HResult; stdcall;
    function getDrawWidth(out drawWidth: Integer): HResult; stdcall;
    function GetFillColor(out color: Integer): HResult; stdcall;
    function GetFillStyle(out fillStyle: Integer): HResult; stdcall;
    function GetFlipStatus(flags: CONST_DDGFSFLAGS; out status: Integer): HResult; stdcall;
    function GetFontTransparency(out b: WordBool): HResult; stdcall;
    function GetForeColor(out color: Integer): HResult; stdcall;
    function GetLockedPixel(x: SYSINT; y: SYSINT; out col: Integer): HResult; stdcall;
    function GetPalette(out val: DirectDrawPalette): HResult; stdcall;
    function GetPixelFormat(var pf: DDPIXELFORMAT): HResult; stdcall;
    function GetSurfaceDesc(var surface: DDSURFACEDESC2): HResult; stdcall;
    function GetUniquenessValue(out retval: Integer): HResult; stdcall;
    function isLost(out status: Integer): HResult; stdcall;
    function Lock(var r: RECT; var desc: DDSURFACEDESC2; flags: CONST_DDLOCKFLAGS; hnd: Integer): HResult; stdcall;
    function ReleaseDC(hdc: Integer): HResult; stdcall;
    function restore: HResult; stdcall;
    function SetClipper(const val: DirectDrawClipper): HResult; stdcall;
    function SetColorKey(flags: CONST_DDCKEYFLAGS; var val: DDCOLORKEY): HResult; stdcall;
    function setDrawStyle(drawStyle: Integer): HResult; stdcall;
    function setDrawWidth(drawWidth: Integer): HResult; stdcall;
    function SetFillColor(color: Integer): HResult; stdcall;
    function SetFillStyle(fillStyle: Integer): HResult; stdcall;
    function SetFont(const font: IFont): HResult; stdcall;
    function SetFontTransparency(b: WordBool): HResult; stdcall;
    function SetForeColor(color: Integer): HResult; stdcall;
    function SetLockedPixel(x: SYSINT; y: SYSINT; col: Integer): HResult; stdcall;
    function SetPalette(const ddp: DirectDrawPalette): HResult; stdcall;
    function Unlock(var r: RECT): HResult; stdcall;
    function GetLockedArray(var array_: PSafeArray): HResult; stdcall;
    function SetFontBackColor(color: Integer): HResult; stdcall;
    function GetFontBackColor(out color: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectDrawClipper
// Flags:     (0)
// GUID:      {9F76FDCA-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectDrawClipper = interface(IUnknown)
    ['{9F76FDCA-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpddc: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpddc: IUnknown): HResult; stdcall;
    function GetClipListSize(out count: SYSINT): HResult; stdcall;
    function GetClipList(var rects: PSafeArray): HResult; stdcall;
    function SetClipList(count: Integer; var rects: PSafeArray): HResult; stdcall;
    function GetHWnd(out hdl: Integer): HResult; stdcall;
    function SetHWnd(hdl: Integer): HResult; stdcall;
    function IsClipListChanged(out status: SYSINT): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectDraw4
// Flags:     (0)
// GUID:      {BCAA7DA2-F7EF-11D2-93FD-00C04FC2C602}
// *********************************************************************//
  DirectDraw4 = interface(IUnknown)
    ['{BCAA7DA2-F7EF-11D2-93FD-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function CreateClipper(flags: Integer; out val: DirectDrawClipper): HResult; stdcall;
    function CreatePalette(flags: CONST_DDPCAPSFLAGS; var pe: PSafeArray; out val: DirectDrawPalette): HResult; stdcall;
    function CreateSurface(var dd: DDSURFACEDESC2; out retV: DirectDrawSurface4): HResult; stdcall;
    function CreateSurfaceFromFile(const file_: WideString; var dd: DDSURFACEDESC2; 
                                   out retV: DirectDrawSurface4): HResult; stdcall;
    function CreateSurfaceFromResource(const file_: WideString; const resName: WideString; 
                                       var ddsd: DDSURFACEDESC2; out retV: DirectDrawSurface4): HResult; stdcall;
    function DuplicateSurface(const ddIn: DirectDrawSurface4; out ddOut: DirectDrawSurface4): HResult; stdcall;
    function FlipToGDISurface: HResult; stdcall;
    function GetAvailableTotalMem(var ddsCaps: DDSCAPS2; out m: Integer): HResult; stdcall;
    function GetCaps(var hwCaps: DDCAPS; var helCaps: DDCAPS): HResult; stdcall;
    function GetDisplayMode(var surface: DDSURFACEDESC2): HResult; stdcall;
    function GetDisplayModesEnum(flags: CONST_DDEDMFLAGS; var ddsd: DDSURFACEDESC2; 
                                 out retval: DirectDrawEnumModes): HResult; stdcall;
    function GetFourCCCodes(var ccCodes: PSafeArray): HResult; stdcall;
    function GetFreeMem(var ddsCaps: DDSCAPS2; out m: Integer): HResult; stdcall;
    function GetGDISurface(out s: DirectDrawSurface4): HResult; stdcall;
    function GetMonitorFrequency(out freq: Integer): HResult; stdcall;
    function GetNumFourCCCodes(out nCodes: Integer): HResult; stdcall;
    function GetScanLine(var lines: Integer; out status: Integer): HResult; stdcall;
    function GetSurfaceFromDC(hdc: Integer; out retV: DirectDrawSurface4): HResult; stdcall;
    function GetVerticalBlankStatus(out status: Integer): HResult; stdcall;
    function LoadPaletteFromBitmap(const bName: WideString; out retV: DirectDrawPalette): HResult; stdcall;
    function RestoreAllSurfaces: HResult; stdcall;
    function RestoreDisplayMode: HResult; stdcall;
    function SetCooperativeLevel(hdl: Integer; flags: CONST_DDSCLFLAGS): HResult; stdcall;
    function SetDisplayMode(w: Integer; h: Integer; bpp: Integer; ref: Integer; 
                            mode: CONST_DDSDMFLAGS): HResult; stdcall;
    function TestCooperativeLevel(out status: Integer): HResult; stdcall;
    function WaitForVerticalBlank(flags: CONST_DDWAITVBFLAGS; handle: Integer; out status: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectDrawPalette
// Flags:     (0)
// GUID:      {9F76FDC9-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectDrawPalette = interface(IUnknown)
    ['{9F76FDC9-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpddp: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpddp: IUnknown): HResult; stdcall;
    function GetCaps(out caps: CONST_DDPCAPSFLAGS): HResult; stdcall;
    function GetEntries(start: Integer; count: Integer; var val: PSafeArray): HResult; stdcall;
    function SetEntries(start: Integer; count: Integer; var val: PSafeArray): HResult; stdcall;
    function SetEntriesHalftone(start: Integer; count: Integer): HResult; stdcall;
    function SetEntriesSystemPalette(start: Integer; count: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectDrawEnumModes
// Flags:     (0)
// GUID:      {9F76FFFF-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectDrawEnumModes = interface(IUnknown)
    ['{9F76FFFF-8E92-11D1-8808-00C04FC2C602}']
    function GetItem(index: Integer; var info: DDSURFACEDESC2): HResult; stdcall;
    function GetCount(out count: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IFont
// Flags:     (0)
// GUID:      {BEF6E002-A874-101A-8BBA-00AA00300CAB}
// *********************************************************************//
  IFont = interface(IUnknown)
    ['{BEF6E002-A874-101A-8BBA-00AA00300CAB}']
    function get_Name(out pName: WideString): HResult; stdcall;
    function put_Name(const name: WideString): HResult; stdcall;
    function get_Size(out pSize: Currency): HResult; stdcall;
    function put_Size(size: Currency): HResult; stdcall;
    function get_Bold(out pBold: Integer): HResult; stdcall;
    function put_Bold(bold: Integer): HResult; stdcall;
    function get_Italic(out pItalic: Integer): HResult; stdcall;
    function put_Italic(italic: Integer): HResult; stdcall;
    function get_Underline(out pUnderline: Integer): HResult; stdcall;
    function put_Underline(underline: Integer): HResult; stdcall;
    function get_Strikethrough(out pStrikethrough: Integer): HResult; stdcall;
    function put_Strikethrough(strikethrough: Integer): HResult; stdcall;
    function get_Weight(out pWeight: Smallint): HResult; stdcall;
    function put_Weight(weight: Smallint): HResult; stdcall;
    function get_Charset(out pCharset: Smallint): HResult; stdcall;
    function put_Charset(charset: Smallint): HResult; stdcall;
    function get_hFont(out phFont: wireHFONT): HResult; stdcall;
    function Clone(out ppFont: IFont): HResult; stdcall;
    function IsEqual(const pFontOther: IFont): HResult; stdcall;
    function SetRatio(cyLogical: Integer; cyHimetric: Integer): HResult; stdcall;
    function QueryTextMetrics(out pTM: tagTEXTMETRICW): HResult; stdcall;
    function AddRefHfont(var hFont: _RemotableHandle): HResult; stdcall;
    function ReleaseHfont(var hFont: _RemotableHandle): HResult; stdcall;
    function SetHdc(var hdc: _RemotableHandle): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3D7
// Flags:     (0)
// GUID:      {9F76FDD5-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3D7 = interface(IUnknown)
    ['{9F76FDD5-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function CreateDevice(const guid: WideString; const surf: DirectDrawSurface7; 
                          out ret: Direct3DDevice7): HResult; stdcall;
    function CreateVertexBuffer(var desc: D3DVERTEXBUFFERDESC; flags: CONST_D3DDPFLAGS; 
                                out f: Direct3DVertexBuffer7): HResult; stdcall;
    function EvictManagedTextures: HResult; stdcall;
    function GetDevicesEnum(out retV: Direct3DEnumDevices): HResult; stdcall;
    function GetDirectDraw(out retV: DirectDraw7): HResult; stdcall;
    function GetEnumZBufferFormats(const guid: WideString; out retV: Direct3DEnumPixelFormats): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectDrawSurface7
// Flags:     (0)
// GUID:      {9F76FDE8-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectDrawSurface7 = interface(IUnknown)
    ['{9F76FDE8-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdds: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdds: IUnknown): HResult; stdcall;
    function AddAttachedSurface(const ddS: DirectDrawSurface7): HResult; stdcall;
    function Blt(var destRect: RECT; const ddS: DirectDrawSurface7; var srcRect: RECT; 
                 flags: CONST_DDBLTFLAGS; out status: Integer): HResult; stdcall;
    function BltColorFill(var destRect: RECT; fillvalue: Integer; out status: Integer): HResult; stdcall;
    function BltFast(dx: Integer; dy: Integer; const ddS: DirectDrawSurface7; var srcRect: RECT; 
                     trans: CONST_DDBLTFASTFLAGS; out status: Integer): HResult; stdcall;
    function BltFx(var destRect: RECT; const ddS: DirectDrawSurface7; var srcRect: RECT; 
                   flags: CONST_DDBLTFLAGS; var BltFx: DDBLTFX; out status: Integer): HResult; stdcall;
    function BltToDC(hdc: Integer; var srcRect: RECT; var destRect: RECT): HResult; stdcall;
    function ChangeUniquenessValue: HResult; stdcall;
    function DeleteAttachedSurface(const ddS: DirectDrawSurface7): HResult; stdcall;
    function DrawBox(x1: Integer; y1: Integer; x2: Integer; y2: Integer): HResult; stdcall;
    function DrawCircle(x1: Integer; y1: Integer; r: Integer): HResult; stdcall;
    function DrawEllipse(x1: Integer; y1: Integer; x2: Integer; y2: Integer): HResult; stdcall;
    function DrawLine(x1: Integer; y1: Integer; x2: Integer; y2: Integer): HResult; stdcall;
    function DrawRoundedBox(x1: Integer; y1: Integer; x2: Integer; y2: Integer; rw: Integer; 
                            rh: Integer): HResult; stdcall;
    function DrawText(x: Integer; y: Integer; const text: WideString; b: WordBool): HResult; stdcall;
    function Flip(const ddS: DirectDrawSurface7; flags: CONST_DDFLIPFLAGS): HResult; stdcall;
    function GetAttachedSurface(var caps: DDSCAPS2; out ddS: DirectDrawSurface7): HResult; stdcall;
    function GetAttachedSurfaceEnum(out retval: DirectDrawEnumSurfaces): HResult; stdcall;
    function GetBltStatus(flags: CONST_DDGFSFLAGS; out status: Integer): HResult; stdcall;
    function GetCaps(var caps: DDSCAPS2): HResult; stdcall;
    function GetClipper(out val: DirectDrawClipper): HResult; stdcall;
    function GetColorKey(flags: Integer; var val: DDCOLORKEY): HResult; stdcall;
    function GetDC(out hdc: Integer): HResult; stdcall;
    function GetDirectDraw(out val: DirectDraw7): HResult; stdcall;
    function GetDirectDrawColorControl(out retV: DirectDrawColorControl): HResult; stdcall;
    function GetDirectDrawGammaControl(out retV: DirectDrawGammaControl): HResult; stdcall;
    function getDrawStyle(out drawStyle: Integer): HResult; stdcall;
    function getDrawWidth(out drawWidth: Integer): HResult; stdcall;
    function GetFillColor(out color: Integer): HResult; stdcall;
    function GetFillStyle(out fillStyle: Integer): HResult; stdcall;
    function GetFlipStatus(flags: CONST_DDGFSFLAGS; out status: Integer): HResult; stdcall;
    function GetFontTransparency(out b: WordBool): HResult; stdcall;
    function GetForeColor(out color: Integer): HResult; stdcall;
    function GetLockedPixel(x: SYSINT; y: SYSINT; out col: Integer): HResult; stdcall;
    function GetPalette(out val: DirectDrawPalette): HResult; stdcall;
    function GetPixelFormat(var pf: DDPIXELFORMAT): HResult; stdcall;
    function GetSurfaceDesc(var surface: DDSURFACEDESC2): HResult; stdcall;
    function GetUniquenessValue(out retval: Integer): HResult; stdcall;
    function isLost(out status: Integer): HResult; stdcall;
    function Lock(var r: RECT; var desc: DDSURFACEDESC2; flags: CONST_DDLOCKFLAGS; hnd: Integer): HResult; stdcall;
    function ReleaseDC(hdc: Integer): HResult; stdcall;
    function restore: HResult; stdcall;
    function SetClipper(const val: DirectDrawClipper): HResult; stdcall;
    function SetColorKey(flags: CONST_DDCKEYFLAGS; var val: DDCOLORKEY): HResult; stdcall;
    function setDrawStyle(drawStyle: Integer): HResult; stdcall;
    function setDrawWidth(drawWidth: Integer): HResult; stdcall;
    function SetFillColor(color: Integer): HResult; stdcall;
    function SetFillStyle(fillStyle: Integer): HResult; stdcall;
    function SetFont(const font: IFont): HResult; stdcall;
    function SetFontTransparency(b: WordBool): HResult; stdcall;
    function SetForeColor(color: Integer): HResult; stdcall;
    function SetLockedPixel(x: SYSINT; y: SYSINT; col: Integer): HResult; stdcall;
    function SetPalette(const ddp: DirectDrawPalette): HResult; stdcall;
    function Unlock(var r: RECT): HResult; stdcall;
    function SetPriority(priority: Integer): HResult; stdcall;
    function GetPriority(out priority: Integer): HResult; stdcall;
    function GetLOD(out lod: Integer): HResult; stdcall;
    function SetLOD(lod: Integer): HResult; stdcall;
    function GetLockedArray(var array_: PSafeArray): HResult; stdcall;
    function SetFontBackColor(color: Integer): HResult; stdcall;
    function GetFontBackColor(out color: Integer): HResult; stdcall;
    function UpdateOverlay(var RECT: RECT; const ddS: DirectDrawSurface7; var rectD: RECT; 
                           flags: CONST_DDOVERFLAGS): HResult; stdcall;
    function UpdateOverlayZOrder(flags: CONST_DDOVERZFLAGS; const ddS: DirectDrawSurface7): HResult; stdcall;
    function GetOverlayPosition(var x: Integer; var y: Integer): HResult; stdcall;
    function SetOverlayPosition(x: Integer; y: Integer): HResult; stdcall;
    function GetOverlayZOrdersEnum(flags: CONST_DDENUMOVERLAYZFLAGS; 
                                   out retval: DirectDrawEnumSurfaces): HResult; stdcall;
    function UpdateOverlayFx(var RECT: RECT; const ddS: DirectDrawSurface7; var rectD: RECT; 
                             flags: CONST_DDOVERFLAGS; var ddoverfx: DDOVERLAYFX): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectDrawEnumSurfaces
// Flags:     (0)
// GUID:      {9F76FDE6-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectDrawEnumSurfaces = interface(IUnknown)
    ['{9F76FDE6-8E92-11D1-8808-00C04FC2C602}']
    function GetItem(index: Integer; out retval: DirectDrawSurface7): HResult; stdcall;
    function GetCount(out count: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectDraw7
// Flags:     (0)
// GUID:      {9F76FDE7-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectDraw7 = interface(IUnknown)
    ['{9F76FDE7-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function CreateClipper(flags: Integer; out val: DirectDrawClipper): HResult; stdcall;
    function CreatePalette(flags: CONST_DDPCAPSFLAGS; var pe: PSafeArray; out val: DirectDrawPalette): HResult; stdcall;
    function CreateSurface(var dd: DDSURFACEDESC2; out retV: DirectDrawSurface7): HResult; stdcall;
    function CreateSurfaceFromFile(const file_: WideString; var dd: DDSURFACEDESC2; 
                                   out retV: DirectDrawSurface7): HResult; stdcall;
    function CreateSurfaceFromResource(const file_: WideString; const resName: WideString; 
                                       var ddsd: DDSURFACEDESC2; out retV: DirectDrawSurface7): HResult; stdcall;
    function DuplicateSurface(const ddIn: DirectDrawSurface7; out ddOut: DirectDrawSurface7): HResult; stdcall;
    function FlipToGDISurface: HResult; stdcall;
    function GetAvailableTotalMem(var ddsCaps: DDSCAPS2; out m: Integer): HResult; stdcall;
    function GetCaps(var hwCaps: DDCAPS; var helCaps: DDCAPS): HResult; stdcall;
    function GetDirect3D(out retV: Direct3D7): HResult; stdcall;
    function GetDisplayMode(var surface: DDSURFACEDESC2): HResult; stdcall;
    function GetDisplayModesEnum(flags: CONST_DDEDMFLAGS; var ddsd: DDSURFACEDESC2; 
                                 out retval: DirectDrawEnumModes): HResult; stdcall;
    function GetFourCCCodes(var ccCodes: PSafeArray): HResult; stdcall;
    function GetFreeMem(var ddsCaps: DDSCAPS2; out m: Integer): HResult; stdcall;
    function GetGDISurface(out s: DirectDrawSurface7): HResult; stdcall;
    function GetMonitorFrequency(out freq: Integer): HResult; stdcall;
    function GetNumFourCCCodes(out nCodes: Integer): HResult; stdcall;
    function GetScanLine(var lines: Integer; out status: Integer): HResult; stdcall;
    function GetSurfaceFromDC(hdc: Integer; out retV: DirectDrawSurface7): HResult; stdcall;
    function GetSurfacesEnum(flags: CONST_DDENUMSURFACESFLAGS; var desc: DDSURFACEDESC2; 
                             out ret: DirectDrawEnumSurfaces): HResult; stdcall;
    function GetVerticalBlankStatus(out status: Integer): HResult; stdcall;
    function LoadPaletteFromBitmap(const bName: WideString; out retV: DirectDrawPalette): HResult; stdcall;
    function RestoreAllSurfaces: HResult; stdcall;
    function RestoreDisplayMode: HResult; stdcall;
    function SetCooperativeLevel(hdl: Integer; flags: CONST_DDSCLFLAGS): HResult; stdcall;
    function SetDisplayMode(w: Integer; h: Integer; bpp: Integer; ref: Integer; 
                            mode: CONST_DDSDMFLAGS): HResult; stdcall;
    function TestCooperativeLevel(out status: Integer): HResult; stdcall;
    function WaitForVerticalBlank(flags: CONST_DDWAITVBFLAGS; handle: Integer; out status: Integer): HResult; stdcall;
    function GetDeviceIdentifier(flags: CONST_DDDEVICEIDFLAGS; out ret: DirectDrawIdentifier): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectDrawIdentifier
// Flags:     (0)
// GUID:      {BCAA7DA4-F7EF-11D2-93FD-00C04FC2C602}
// *********************************************************************//
  DirectDrawIdentifier = interface(IUnknown)
    ['{BCAA7DA4-F7EF-11D2-93FD-00C04FC2C602}']
    function GetDriver(out ret: WideString): HResult; stdcall;
    function GetDescription(out ret: WideString): HResult; stdcall;
    function GetDriverVersion(out ret: Integer): HResult; stdcall;
    function GetDriverSubVersion(out ret: Integer): HResult; stdcall;
    function GetVendorId(out ret: Integer): HResult; stdcall;
    function GetDeviceId(out ret: Integer): HResult; stdcall;
    function GetSubSysId(out ret: Integer): HResult; stdcall;
    function GetRevision(out ret: Integer): HResult; stdcall;
    function GetDeviceIndentifier(out ret: WideString): HResult; stdcall;
    function GetWHQLLevel(out ret: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectDrawColorControl
// Flags:     (0)
// GUID:      {9F76FDE0-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectDrawColorControl = interface(IUnknown)
    ['{9F76FDE0-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdds: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdds: IUnknown): HResult; stdcall;
    function GetColorControls(var colorControl: DDCOLORCONTROL): HResult; stdcall;
    function SetColorControls(var colorControl: DDCOLORCONTROL): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectDrawGammaControl
// Flags:     (0)
// GUID:      {9F76FDE9-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectDrawGammaControl = interface(IUnknown)
    ['{9F76FDE9-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdds: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdds: IUnknown): HResult; stdcall;
    function GetGammaRamp(flags: CONST_DDSGRFLAGS; var gammaRamp: DDGAMMARAMP): HResult; stdcall;
    function SetGammaRamp(flags: CONST_DDSGRFLAGS; var gammaRamp: DDGAMMARAMP): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DDevice7
// Flags:     (0)
// GUID:      {9F76FDD7-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DDevice7 = interface(IUnknown)
    ['{9F76FDD7-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function ApplyStateBlock(blockHandle: Integer): HResult; stdcall;
    function BeginScene: HResult; stdcall;
    function BeginStateBlock: HResult; stdcall;
    function CaptureStateBlock(blockHandle: Integer): HResult; stdcall;
    function Clear(count: Integer; var recs: PSafeArray; flags: CONST_D3DCLEARFLAGS; 
                   color: Integer; z: Single; stencil: Integer): HResult; stdcall;
    function ComputeSphereVisibility(var center: D3DVECTOR; var radius: Single; 
                                     out returnVal: Integer): HResult; stdcall;
    function DeleteStateBlock(blockHandle: Integer): HResult; stdcall;
    function DrawIndexedPrimitive(d3dpt: CONST_D3DPRIMITIVETYPE; d3dfvf: CONST_D3DFVFFLAGS; 
                                  var vertices: Pointer; VertexCount: Integer; 
                                  var indices: PSafeArray; IndicesCount: Integer; 
                                  flags: CONST_D3DDPFLAGS): HResult; stdcall;
    function DrawIndexedPrimitiveVB(d3dpt: CONST_D3DPRIMITIVETYPE; 
                                    const vertexBuffer: Direct3DVertexBuffer7; 
                                    startVertex: Integer; numVertices: Integer; 
                                    var indexArray: PSafeArray; indexcount: Integer; 
                                    flags: CONST_D3DDPFLAGS): HResult; stdcall;
    function DrawPrimitive(d3dpt: CONST_D3DPRIMITIVETYPE; d3dfvf: CONST_D3DFVFFLAGS; 
                           var vertices: Pointer; VertexCount: Integer; flags: CONST_D3DDPFLAGS): HResult; stdcall;
    function DrawPrimitiveVB(d3dpt: CONST_D3DPRIMITIVETYPE; 
                             const vertexBuffer: Direct3DVertexBuffer7; startVertex: Integer; 
                             numVertices: Integer; flags: CONST_D3DDPFLAGS): HResult; stdcall;
    function EndScene: HResult; stdcall;
    function EndStateBlock(var blockHandle: Integer): HResult; stdcall;
    function GetCaps(var desc: D3DDEVICEDESC7): HResult; stdcall;
    function GetClipStatus(var clipStatus: D3DCLIPSTATUS): HResult; stdcall;
    function GetDirect3D(out dev: Direct3D7): HResult; stdcall;
    function GetLight(LightIndex: Integer; var Light: D3DLIGHT7): HResult; stdcall;
    function GetLightEnable(LightIndex: Integer; out b: WordBool): HResult; stdcall;
    function GetMaterial(var Material: D3DMATERIAL7): HResult; stdcall;
    function GetRenderState(state: CONST_D3DRENDERSTATETYPE; out renderstate: Integer): HResult; stdcall;
    function GetRenderTarget(out ppval: DirectDrawSurface7): HResult; stdcall;
    function GetTexture(stage: Integer; out retV: DirectDrawSurface7): HResult; stdcall;
    function GetTextureFormatsEnum(out retval: Direct3DEnumPixelFormats): HResult; stdcall;
    function GetTextureStageState(stage: Integer; state: CONST_D3DTEXTURESTAGESTATETYPE; 
                                  out val: Integer): HResult; stdcall;
    function GetTransform(transformType: CONST_D3DTRANSFORMSTATETYPE; var matrix: D3DMATRIX): HResult; stdcall;
    function GetViewport(var viewport: D3DVIEWPORT7): HResult; stdcall;
    function LightEnable(LightIndex: Integer; bEnable: WordBool): HResult; stdcall;
    function Load(const DestTex: DirectDrawSurface7; xDest: Integer; yDest: Integer; 
                  const SrcTex: DirectDrawSurface7; var rcSrcRect: RECT; flags: Integer): HResult; stdcall;
    function MultiplyTransform(dstTransfromStateType: CONST_D3DTRANSFORMSTATETYPE; 
                               var matrix: D3DMATRIX): HResult; stdcall;
    function PreLoad(const texture: DirectDrawSurface7): HResult; stdcall;
    function SetClipStatus(var clipStatus: D3DCLIPSTATUS): HResult; stdcall;
    function SetLight(LightIndex: Integer; var Light: D3DLIGHT7): HResult; stdcall;
    function SetMaterial(var mat: D3DMATERIAL7): HResult; stdcall;
    function SetRenderState(state: CONST_D3DRENDERSTATETYPE; renderstate: Integer): HResult; stdcall;
    function SetRenderTarget(const surface: DirectDrawSurface7): HResult; stdcall;
    function SetTexture(stage: Integer; const texture: DirectDrawSurface7): HResult; stdcall;
    function SetTextureStageState(stage: Integer; state: CONST_D3DTEXTURESTAGESTATETYPE; 
                                  value: Integer): HResult; stdcall;
    function SetTransform(transformType: CONST_D3DTRANSFORMSTATETYPE; var matrix: D3DMATRIX): HResult; stdcall;
    function SetViewport(var viewport: D3DVIEWPORT7): HResult; stdcall;
    function ValidateDevice(out passes: Integer): HResult; stdcall;
    function SetTextureStageStateSingle(stage: Integer; state: CONST_D3DTEXTURESTAGESINGLE; 
                                        value: Single): HResult; stdcall;
    function GetTextureStageStateSingle(stage: Integer; state: CONST_D3DTEXTURESTAGESINGLE; 
                                        out val: Single): HResult; stdcall;
    function GetInfo(lDevInfoID: CONST_D3DDEVINFOID; var DevInfoType: Pointer; lSize: Integer): HResult; stdcall;
    function SetRenderStateSingle(state: CONST_D3DRENDERSTATESINGLE; val: Single): HResult; stdcall;
    function GetRenderStateSingle(state: CONST_D3DRENDERSTATESINGLE; out val: Single): HResult; stdcall;
    function GetDeviceGuid(out ret: WideString): HResult; stdcall;
    function CreateStateBlock(d3dsbType: CONST_D3DSTATEBLOCKTYPE; out blockHandle: Integer): HResult; stdcall;
    function SetClipPlane(index: Integer; a: Single; b: Single; c: Single; D: Single): HResult; stdcall;
    function GetClipPlane(index: Integer; var a: Single; var b: Single; var c: Single; var D: Single): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DVertexBuffer7
// Flags:     (0)
// GUID:      {9F76FDDA-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DVertexBuffer7 = interface(IUnknown)
    ['{9F76FDDA-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetVertexBufferDesc(var desc: D3DVERTEXBUFFERDESC): HResult; stdcall;
    function GetVertices(startIndex: Integer; count: Integer; var verts: Pointer): HResult; stdcall;
    function Lock(flags: CONST_DDLOCKFLAGS): HResult; stdcall;
    function Optimize(const dev: Direct3DDevice7): HResult; stdcall;
    function ProcessVertices(vertexOp: CONST_D3DVOPFLAGS; destIndex: Integer; count: Integer; 
                             const srcBuffer: Direct3DVertexBuffer7; srcIndex: Integer; 
                             const dev: Direct3DDevice7; flags: CONST_D3DPROCESSVERTICESFLAGS): HResult; stdcall;
    function SetVertices(startIndex: Integer; count: Integer; var verts: Pointer): HResult; stdcall;
    function Unlock: HResult; stdcall;
    function SetVertexSize(vertexSizeInBytes: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DEnumPixelFormats
// Flags:     (0)
// GUID:      {9F76FDD6-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DEnumPixelFormats = interface(IUnknown)
    ['{9F76FDD6-8E92-11D1-8808-00C04FC2C602}']
    function GetItem(index: Integer; var pixelFormat: DDPIXELFORMAT): HResult; stdcall;
    function GetCount(out count: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DEnumDevices
// Flags:     (0)
// GUID:      {9F76FDD3-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DEnumDevices = interface(IUnknown)
    ['{9F76FDD3-8E92-11D1-8808-00C04FC2C602}']
    function GetGuid(index: Integer; out guid: WideString): HResult; stdcall;
    function GetDescription(index: Integer; out guid: WideString): HResult; stdcall;
    function GetName(index: Integer; out guid: WideString): HResult; stdcall;
    function GetDesc(index: Integer; var hwDesc: D3DDEVICEDESC7): HResult; stdcall;
    function GetCount(out count: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectDrawEnum
// Flags:     (0)
// GUID:      {9F76FDE1-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectDrawEnum = interface(IUnknown)
    ['{9F76FDE1-8E92-11D1-8808-00C04FC2C602}']
    function GetGuid(index: Integer; out guid: WideString): HResult; stdcall;
    function GetDescription(index: Integer; out ret: WideString): HResult; stdcall;
    function GetName(index: Integer; out ret: WideString): HResult; stdcall;
    function GetMonitorHandle(index: Integer; out ret: Integer): HResult; stdcall;
    function GetCount(out count: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMVisual
// Flags:     (0)
// GUID:      {9F76FE0F-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMVisual = interface(IUnknown)
    ['{9F76FE0F-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMFace2
// Flags:     (0)
// GUID:      {9F76FE32-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMFace2 = interface(IUnknown)
    ['{9F76FE32-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
    function AddVertex(x: Single; y: Single; z: Single): HResult; stdcall;
    function AddVertexAndNormalIndexed(vertexIndex: Integer; normalIndex: Integer): HResult; stdcall;
    function GetColor(out retV: Integer): HResult; stdcall;
    function GetMaterial(out retV: Direct3DRMMaterial2): HResult; stdcall;
    function GetNormal(var val: D3DVECTOR): HResult; stdcall;
    function GetTexture(out ref: Direct3DRMTexture3): HResult; stdcall;
    function GetTextureCoordinateIndex(which: Integer; out retV: SYSINT): HResult; stdcall;
    function GetTextureCoordinates(vertex: Integer; var u: Single; var v: Single): HResult; stdcall;
    function GetVertex(idx: Integer; var vert: D3DVECTOR; var norm: D3DVECTOR): HResult; stdcall;
    function GetVertexCount(out retV: SYSINT): HResult; stdcall;
    function GetVertexIndex(which: Integer; out retV: SYSINT): HResult; stdcall;
    function GetVertices(VertexCount: Integer; var coord: PSafeArray; var normals: PSafeArray): HResult; stdcall;
    function GetVerticesJava(vertex_cnt: Integer; var coord: Single; var normals: Single): HResult; stdcall;
    function SetColor(c: Integer): HResult; stdcall;
    function SetColorRGB(r: Single; g: Single; b: Single): HResult; stdcall;
    function SetMaterial(const ref: Direct3DRMMaterial2): HResult; stdcall;
    function SetTexture(const ref: Direct3DRMTexture3): HResult; stdcall;
    function SetTextureCoordinates(vertex: Integer; u: Single; v: Single): HResult; stdcall;
    function SetTextureTopology(wrap_u: CONST_DBOOLFLAGS; wrap_v: CONST_DBOOLFLAGS): HResult; stdcall;
    function GetTextureTopology(var wrap_u: CONST_DBOOLFLAGS; var wrap_v: CONST_DBOOLFLAGS): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMMaterial2
// Flags:     (0)
// GUID:      {9F76FE21-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMMaterial2 = interface(IUnknown)
    ['{9F76FE21-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
    function SetPower(power: Single): HResult; stdcall;
    function SetSpecular(r: Single; g: Single; b: Single): HResult; stdcall;
    function SetEmissive(r: Single; g: Single; b: Single): HResult; stdcall;
    function SetAmbient(r: Single; g: Single; b: Single): HResult; stdcall;
    function GetPower(out power: Single): HResult; stdcall;
    function GetSpecular(out r: Single; out g: Single; out b: Single): HResult; stdcall;
    function GetEmissive(out r: Single; out g: Single; out b: Single): HResult; stdcall;
    function GetAmbient(out r: Single; out g: Single; out b: Single): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMLight
// Flags:     (0)
// GUID:      {9F76FE03-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMLight = interface(IUnknown)
    ['{9F76FE03-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
    function SetType(t: CONST_D3DRMLIGHTTYPE): HResult; stdcall;
    function SetColor(c: Integer): HResult; stdcall;
    function SetColorRGB(r: Single; g: Single; b: Single): HResult; stdcall;
    function SetRange(rng: Single): HResult; stdcall;
    function SetUmbra(u: Single): HResult; stdcall;
    function SetPenumbra(p: Single): HResult; stdcall;
    function SetConstantAttenuation(atn: Single): HResult; stdcall;
    function SetLinearAttenuation(atn: Single): HResult; stdcall;
    function SetQuadraticAttenuation(atn: Single): HResult; stdcall;
    function GetRange(out retV: Single): HResult; stdcall;
    function GetUmbra(out retV: Single): HResult; stdcall;
    function GetPenumbra(out retV: Single): HResult; stdcall;
    function GetConstantAttenuation(out retV: Single): HResult; stdcall;
    function GetLinearAttenuation(out retV: Single): HResult; stdcall;
    function GetQuadraticAttenuation(out retV: Single): HResult; stdcall;
    function GetColor(out value: Integer): HResult; stdcall;
    function GetType(out retV: CONST_D3DRMLIGHTTYPE): HResult; stdcall;
    function SetEnableFrame(const f: Direct3DRMFrame3): HResult; stdcall;
    function GetEnableFrame(out retV: Direct3DRMFrame3): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMFrame3
// Flags:     (0)
// GUID:      {9F76FE25-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMFrame3 = interface(IUnknown)
    ['{9F76FE25-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
    function AddVisual(const v: Direct3DRMVisual): HResult; stdcall;
    function DeleteVisual(const v: Direct3DRMVisual): HResult; stdcall;
    function AddLight(const val: Direct3DRMLight): HResult; stdcall;
    function DeleteLight(const l: Direct3DRMLight): HResult; stdcall;
    function AddChild(const child: Direct3DRMFrame3): HResult; stdcall;
    function DeleteChild(const c: Direct3DRMFrame3): HResult; stdcall;
    function GetTransform(const referenceFrame: Direct3DRMFrame3; var val: PSafeArray): HResult; stdcall;
    function AddTransform(t: CONST_D3DRMCOMBINETYPE; var val: PSafeArray): HResult; stdcall;
    function AddTranslation(t: CONST_D3DRMCOMBINETYPE; x: Single; y: Single; z: Single): HResult; stdcall;
    function AddScale(combineType: CONST_D3DRMCOMBINETYPE; sx: Single; sy: Single; sz: Single): HResult; stdcall;
    function AddRotation(combineType: CONST_D3DRMCOMBINETYPE; x: Single; y: Single; z: Single; 
                         theta: Single): HResult; stdcall;
    function AddMoveCallback(const frameMoveImplementation: Direct3DRMFrameMoveCallback3; 
                             const userArgument: IDispatch; flags: CONST_D3DRMCALLBACKORDERFLAGS): HResult; stdcall;
    function DeleteMoveCallback(const frameMoveImplementation: Direct3DRMFrameMoveCallback3; 
                                const userArgument: IDispatch): HResult; stdcall;
    function Transform(var D: D3DVECTOR; var s: D3DVECTOR): HResult; stdcall;
    function TransformVectors(const reference: Direct3DRMFrame3; num: Integer; 
                              var DstVectors: PSafeArray; var SrcVectors: PSafeArray): HResult; stdcall;
    function InverseTransform(var D: D3DVECTOR; var s: D3DVECTOR): HResult; stdcall;
    function InverseTransformVectors(const reference: Direct3DRMFrame3; num: Integer; 
                                     var DstVectors: PSafeArray; var SrcVectors: PSafeArray): HResult; stdcall;
    function GetAxes(var dir: D3DVECTOR; var up: D3DVECTOR): HResult; stdcall;
    function GetBox(var box: D3DRMBOX): HResult; stdcall;
    function GetBoxEnable(out b: CONST_DBOOLFLAGS): HResult; stdcall;
    function GetChildren(out children: Direct3DRMFrameArray): HResult; stdcall;
    function GetColor(out retV: Integer): HResult; stdcall;
    function GetHierarchyBox(var box: D3DRMBOX): HResult; stdcall;
    function GetInheritAxes(out b: CONST_DBOOLFLAGS): HResult; stdcall;
    function GetLights(out lights: Direct3DRMLightArray): HResult; stdcall;
    function GetMaterial(var ret: Direct3DRMMaterial2): HResult; stdcall;
    function GetMaterialMode(out retV: CONST_D3DRMMATERIALMODE): HResult; stdcall;
    function GetOrientation(const ref: Direct3DRMFrame3; var dir: D3DVECTOR; var up: D3DVECTOR): HResult; stdcall;
    function GetMaterialOverride(var override: D3DRMMATERIALOVERRIDE): HResult; stdcall;
    function GetMaterialOverrideTexture(out ret: Direct3DRMTexture3): HResult; stdcall;
    function GetParent(out retV: Direct3DRMFrame3): HResult; stdcall;
    function GetPosition(const ref: Direct3DRMFrame3; var position: D3DVECTOR): HResult; stdcall;
    function GetRotation(const ref: Direct3DRMFrame3; var axis: D3DVECTOR; out theta: Single): HResult; stdcall;
    function GetScene(out retV: Direct3DRMFrame3): HResult; stdcall;
    function GetSceneBackground(out retV: Integer): HResult; stdcall;
    function GetSceneBackgroundDepth(out retV: DirectDrawSurface7): HResult; stdcall;
    function GetSceneFogColor(out retV: Integer): HResult; stdcall;
    function GetSceneFogEnable(out bEnable: CONST_DBOOLFLAGS): HResult; stdcall;
    function GetSceneFogMode(out retV: CONST_D3DRMFOGMODE): HResult; stdcall;
    function GetSceneFogMethod(out method: CONST_D3DRMFOGMETHOD): HResult; stdcall;
    function GetSceneFogParams(var start: Single; var end_: Single; var density: Single): HResult; stdcall;
    function GetSortMode(out retV: CONST_D3DRMSORTMODE): HResult; stdcall;
    function GetTexture(out ref: Direct3DRMTexture3): HResult; stdcall;
    function GetVelocity(const ref: Direct3DRMFrame3; var vel: D3DVECTOR; 
                         includeRotationalVelocity: CONST_DBOOLFLAGS): HResult; stdcall;
    function GetVisuals(out visuals: Direct3DRMVisualArray): HResult; stdcall;
    function GetVisual(index: Integer; out visualArray: Direct3DRMVisual): HResult; stdcall;
    function GetVisualCount(out vis: Integer): HResult; stdcall;
    function GetTraversalOptions(out ret: CONST_D3DRMTRAVERALFLAGS): HResult; stdcall;
    function GetZBufferMode(out ret: CONST_D3DRMZBUFFERMODE): HResult; stdcall;
    function LoadFromFile(const filename: WideString; id: OleVariant; flags: CONST_D3DRMLOADFLAGS; 
                          const loadTextureImplementation: Direct3DRMLoadTextureCallback3; 
                          const userArgument: IDispatch): HResult; stdcall;
    function LookAt(const tgt: Direct3DRMFrame3; const reference: Direct3DRMFrame3; 
                    contraint: CONST_D3DRMFRAMECONSTRAINT): HResult; stdcall;
    function Move(delta: Single): HResult; stdcall;
    function RayPick(const refer: Direct3DRMFrame3; var ray: D3DRMRAY; 
                     flags: CONST_D3DRMRAYPICKFLAGS; out retV: Direct3DRMPick2Array): HResult; stdcall;
    function Save(const name: WideString; format: CONST_D3DRMXOFFORMAT; flags: CONST_D3DRMSAVEFLAGS): HResult; stdcall;
    function SetAxes(dx: Single; dy: Single; dz: Single; ux: Single; uy: Single; uz: Single): HResult; stdcall;
    function SetBox(var box: D3DRMBOX): HResult; stdcall;
    function SetBoxEnable(boxEnable: CONST_DBOOLFLAGS): HResult; stdcall;
    function SetColor(c: Integer): HResult; stdcall;
    function SetColorRGB(r: Single; g: Single; b: Single): HResult; stdcall;
    function SetInheritAxes(inheritFromParent: CONST_DBOOLFLAGS): HResult; stdcall;
    function SetMaterial(const mat: Direct3DRMMaterial2): HResult; stdcall;
    function SetMaterialMode(val: CONST_D3DRMMATERIALMODE): HResult; stdcall;
    function SetMaterialOverride(var override: D3DRMMATERIALOVERRIDE): HResult; stdcall;
    function SetMaterialOverrideTexture(const tex: Direct3DRMTexture3): HResult; stdcall;
    function SetOrientation(const reference: Direct3DRMFrame3; dx: Single; dy: Single; dz: Single; 
                            ux: Single; uy: Single; uz: Single): HResult; stdcall;
    function SetPosition(const reference: Direct3DRMFrame3; x: Single; y: Single; z: Single): HResult; stdcall;
    function SetQuaternion(const reference: Direct3DRMFrame3; var quat: D3DRMQUATERNION): HResult; stdcall;
    function SetRotation(const reference: Direct3DRMFrame3; x: Single; y: Single; z: Single; 
                         theta: Single): HResult; stdcall;
    function SetSceneBackground(c: Integer): HResult; stdcall;
    function SetSceneBackgroundDepth(const s: DirectDrawSurface7): HResult; stdcall;
    function SetSceneBackgroundImage(const i: Direct3DRMTexture3): HResult; stdcall;
    function SetSceneBackgroundRGB(r: Single; g: Single; b: Single): HResult; stdcall;
    function SetSceneFogColor(c: Integer): HResult; stdcall;
    function SetSceneFogEnable(bEnable: CONST_DBOOLFLAGS): HResult; stdcall;
    function SetSceneFogMethod(method: CONST_D3DRMFOGMETHOD): HResult; stdcall;
    function SetSceneFogMode(c: CONST_D3DRMFOGMODE): HResult; stdcall;
    function SetSceneFogParams(start: Single; end_: Single; density: Single): HResult; stdcall;
    function SetSortMode(val: CONST_D3DRMSORTMODE): HResult; stdcall;
    function SetTexture(const t: Direct3DRMTexture3): HResult; stdcall;
    function SetTraversalOptions(flags: CONST_D3DRMTRAVERALFLAGS): HResult; stdcall;
    function SetVelocity(const reference: Direct3DRMFrame3; x: Single; y: Single; z: Single; 
                         with_rotation: CONST_DBOOLFLAGS): HResult; stdcall;
    function SetZbufferMode(val: CONST_D3DRMZBUFFERMODE): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMFrameMoveCallback3
// Flags:     (0)
// GUID:      {9F76FE33-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMFrameMoveCallback3 = interface(IUnknown)
    ['{9F76FE33-8E92-11D1-8808-00C04FC2C602}']
    function CallbackRMFrameMove(const f: Direct3DRMFrame3; const arg: IDispatch; delta: Single): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMFrameArray
// Flags:     (0)
// GUID:      {9F76FE14-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMFrameArray = interface(IUnknown)
    ['{9F76FE14-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetSize(out retV: Integer): HResult; stdcall;
    function GetElement(index: Integer; out ppFrame: Direct3DRMFrame3): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMLightArray
// Flags:     (0)
// GUID:      {9F76FE16-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMLightArray = interface(IUnknown)
    ['{9F76FE16-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetSize(out retV: Integer): HResult; stdcall;
    function GetElement(index: Integer; out retV: Direct3DRMLight): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMVisualArray
// Flags:     (0)
// GUID:      {9F76FE15-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMVisualArray = interface(IUnknown)
    ['{9F76FE15-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetSize(out retV: Integer): HResult; stdcall;
    function GetElement(index: Integer; out retV: Direct3DRMVisual): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMPick2Array
// Flags:     (0)
// GUID:      {9F76FE19-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMPick2Array = interface(IUnknown)
    ['{9F76FE19-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetSize(out retV: Integer): HResult; stdcall;
    function GetPickVisual(index: Integer; var pickDesc: D3DRMPICKDESC2; 
                           out visual: Direct3DRMVisual): HResult; stdcall;
    function GetPickFrame(index: Integer; var pickDesc: D3DRMPICKDESC2; 
                          out frameArray: Direct3DRMFrameArray): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMMesh
// Flags:     (0)
// GUID:      {9F76FE06-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMMesh = interface(IUnknown)
    ['{9F76FE06-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
    function SetGroupColor(id: Integer; val: Integer): HResult; stdcall;
    function SetGroupColorRGB(id: Integer; r: Single; g: Single; b: Single): HResult; stdcall;
    function SetGroupMapping(id: Integer; value: CONST_D3DRMMAPPINGFLAGS): HResult; stdcall;
    function SetGroupQuality(id: Integer; value: CONST_D3DRMRENDERQUALITY): HResult; stdcall;
    function SetGroupMaterial(id: Integer; const val: Direct3DRMMaterial2): HResult; stdcall;
    function SetGroupTexture(id: Integer; const val: Direct3DRMTexture3): HResult; stdcall;
    function GetGroupCount(out retV: Integer): HResult; stdcall;
    function GetGroupColor(id: Integer; out retV: Integer): HResult; stdcall;
    function GetGroupMapping(id: Integer; out retV: CONST_D3DRMMAPPINGFLAGS): HResult; stdcall;
    function GetGroupQuality(id: Integer; out retV: CONST_D3DRMRENDERQUALITY): HResult; stdcall;
    function GetGroupMaterial(id: Integer; out retV: Direct3DRMMaterial2): HResult; stdcall;
    function GetGroupTexture(id: Integer; out retV: Direct3DRMTexture3): HResult; stdcall;
    function ScaleMesh(sx: Single; sy: Single; sz: Single): HResult; stdcall;
    function Translate(tx: Single; ty: Single; tz: Single): HResult; stdcall;
    function GetBox(var vector: D3DRMBOX): HResult; stdcall;
    function GetSizes(id: Integer; out cnt1: Integer; out cnt2: Integer; out cnt3: Integer; 
                      out cnt4: Integer): HResult; stdcall;
    function SetVertex(id: Integer; idx: Integer; var values: D3DRMVERTEX): HResult; stdcall;
    function GetVertex(id: Integer; idx: Integer; var ret: D3DRMVERTEX): HResult; stdcall;
    function GetVertexCount(id: Integer; out cnt: Integer): HResult; stdcall;
    function AddGroup(VertexCount: Integer; faceCount: Integer; verticesPerFace: Integer; 
                      var fdata: PSafeArray; out retId: Integer): HResult; stdcall;
    function GetGroupData(id: Integer; var psa: PSafeArray): HResult; stdcall;
    function GetGroupDataSize(id: Integer; out retval: Integer): HResult; stdcall;
    function SetVertices(id: Integer; idx: Integer; count: Integer; var vertexArray: PSafeArray): HResult; stdcall;
    function GetVertices(id: Integer; idx: Integer; count: Integer; var vertexArray: PSafeArray): HResult; stdcall;
    function AddGroupJava(vcnt: Integer; fcnt: Integer; vPerFace: Integer; var fdata: Integer; 
                          out retId: Integer): HResult; stdcall;
    function GetGroupDataJava(id: Integer; size: Integer; var fdata: Integer): HResult; stdcall;
    function SetVerticesJava(id: Integer; idx: Integer; cnt: Integer; var vertexArray: Single): HResult; stdcall;
    function GetVerticesJava(id: Integer; idx: Integer; cnt: Integer; var vertexArray: Single): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMWrap
// Flags:     (0)
// GUID:      {9F76FE08-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMWrap = interface(IUnknown)
    ['{9F76FE08-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
    function Apply(const visual: Direct3DRMObject): HResult; stdcall;
    function ApplyRelative(const f: Direct3DRMFrame3; const visual: Direct3DRMObject): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMObjectArray
// Flags:     (0)
// GUID:      {9F76FE11-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMObjectArray = interface(IUnknown)
    ['{9F76FE11-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetSize(out retV: Integer): HResult; stdcall;
    function GetElement(index: Integer; out retV: Direct3DRMObject): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMDeviceArray
// Flags:     (0)
// GUID:      {9F76FE12-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMDeviceArray = interface(IUnknown)
    ['{9F76FE12-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetSize(out retV: Integer): HResult; stdcall;
    function GetElement(index: Integer; out lplpD3DRMDevice: Direct3DRMDevice3): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMDevice3
// Flags:     (0)
// GUID:      {9F76FE27-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMDevice3 = interface(IUnknown)
    ['{9F76FE27-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
    function AddUpdateCallback(const updateCallbackImplementation: Direct3DRMDeviceUpdateCallback3; 
                               const userArgument: IDispatch): HResult; stdcall;
    function DeleteUpdateCallback(const updateCallbackImplementation: Direct3DRMDeviceUpdateCallback3; 
                                  const userArgument: IDispatch): HResult; stdcall;
    function FindPreferredTextureFormat(bitDepth: CONST_DDBITDEPTHFLAGS; 
                                        flags: CONST_D3DRMFPTFFLAGS; var ddpf: DDPIXELFORMAT): HResult; stdcall;
    function GetBufferCount(out retV: Integer): HResult; stdcall;
    function GetColorModel(out retV: CONST_D3DCOLORMODEL): HResult; stdcall;
    function GetDither(out ditherEnabled: CONST_DBOOLFLAGS): HResult; stdcall;
    function GetHeight(out w: SYSINT): HResult; stdcall;
    function GetQuality(out retV: CONST_D3DRMRENDERQUALITY): HResult; stdcall;
    function GetRenderMode(out retV: CONST_D3DRMRENDERMODEFLAGS): HResult; stdcall;
    function GetShades(out numShades: Integer): HResult; stdcall;
    function GetTextureQuality(out retV: CONST_D3DRMTEXTUREQUALITY): HResult; stdcall;
    function GetTrianglesDrawn(out retV: Integer): HResult; stdcall;
    function GetViewports(out views: Direct3DRMViewportArray): HResult; stdcall;
    function GetWireframeOptions(out retV: CONST_D3DRMWIREFRAMEFLAGS): HResult; stdcall;
    function GetWidth(out w: SYSINT): HResult; stdcall;
    function SetBufferCount(count: Integer): HResult; stdcall;
    function SetDither(ditherEnabled: CONST_DBOOLFLAGS): HResult; stdcall;
    function SetQuality(q: CONST_D3DRMRENDERQUALITY): HResult; stdcall;
    function SetRenderMode(flags: CONST_D3DRMRENDERMODEFLAGS): HResult; stdcall;
    function SetShades(numShades: SYSINT): HResult; stdcall;
    function SetTextureQuality(D: CONST_D3DRMTEXTUREQUALITY): HResult; stdcall;
    function Update: HResult; stdcall;
    function HandleActivate(wparam: Integer): HResult; stdcall;
    function HandlePaint(hdc: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMDeviceUpdateCallback3
// Flags:     (0)
// GUID:      {9F76FE34-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMDeviceUpdateCallback3 = interface(IUnknown)
    ['{9F76FE34-8E92-11D1-8808-00C04FC2C602}']
    function CallbackRMUpdate(const f: Direct3DRMDevice3; const arg: IDispatch; n: SYSINT; 
                              var Update: D3DRECT): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMViewportArray
// Flags:     (0)
// GUID:      {9F76FE13-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMViewportArray = interface(IUnknown)
    ['{9F76FE13-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetSize(out retV: Integer): HResult; stdcall;
    function GetElement(index: Integer; out lplpD3DRMViewport: Direct3DRMViewport2): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMViewport2
// Flags:     (0)
// GUID:      {9F76FE20-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMViewport2 = interface(IUnknown)
    ['{9F76FE20-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
    function Clear(flags: CONST_D3DRMVIEWPORTCLEARFLAGS): HResult; stdcall;
    function Render(const rootFrame: Direct3DRMFrame3): HResult; stdcall;
    function GetCamera(out val: Direct3DRMFrame3): HResult; stdcall;
    function GetDevice(out val: Direct3DRMDevice3): HResult; stdcall;
    function SetFront(v: Single): HResult; stdcall;
    function SetBack(v: Single): HResult; stdcall;
    function SetField(v: Single): HResult; stdcall;
    function SetUniformScaling(flag: CONST_DBOOLFLAGS): HResult; stdcall;
    function SetCamera(const f: Direct3DRMFrame3): HResult; stdcall;
    function SetProjection(val: CONST_D3DRMPROJECTIONTYPE): HResult; stdcall;
    function Transform(out D: D3DRMVECTOR4D; var s: D3DVECTOR): HResult; stdcall;
    function InverseTransform(out D: D3DVECTOR; var s: D3DRMVECTOR4D): HResult; stdcall;
    function Configure(x: Integer; y: Integer; width: Integer; height: Integer): HResult; stdcall;
    function ForceUpdate(x1: Integer; y1: Integer; x2: Integer; y2: Integer): HResult; stdcall;
    function SetPlane(Left: Single; Right: Single; Bottom: Single; Top: Single): HResult; stdcall;
    function GetPlane(var l: Single; var r: Single; var b: Single; var t: Single): HResult; stdcall;
    function Pick(x: Integer; y: Integer; out retV: Direct3DRMPickArray): HResult; stdcall;
    function GetUniformScaling(out retV: CONST_DBOOLFLAGS): HResult; stdcall;
    function GetX(out retV: Integer): HResult; stdcall;
    function GetY(out retV: Integer): HResult; stdcall;
    function GetHeight(out w: Integer): HResult; stdcall;
    function GetWidth(out w: Integer): HResult; stdcall;
    function GetField(out retV: Single): HResult; stdcall;
    function GetBack(out retV: Single): HResult; stdcall;
    function GetFront(out retV: Single): HResult; stdcall;
    function GetProjection(out retV: CONST_D3DRMPROJECTIONTYPE): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMPickArray
// Flags:     (0)
// GUID:      {9F76FE17-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMPickArray = interface(IUnknown)
    ['{9F76FE17-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetSize(out retV: Integer): HResult; stdcall;
    function GetPickVisual(index: Integer; var pickDesc: D3DRMPICKDESC; out visual: Direct3DRMVisual): HResult; stdcall;
    function GetPickFrame(index: Integer; var pickDesc: D3DRMPICKDESC; 
                          out frameArray: Direct3DRMFrameArray): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMFaceArray
// Flags:     (0)
// GUID:      {9F76FE18-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMFaceArray = interface(IUnknown)
    ['{9F76FE18-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetSize(out retV: Integer): HResult; stdcall;
    function GetElement(index: Integer; out retV: Direct3DRMFace2): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMAnimationArray
// Flags:     (0)
// GUID:      {9F76FE35-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMAnimationArray = interface(IUnknown)
    ['{9F76FE35-8E92-11D1-8808-00C04FC2C602}']
    function GetSize(out ret: Integer): HResult; stdcall;
    function GetElement(index: Integer; out anim: Direct3DRMAnimation2): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMAnimation2
// Flags:     (0)
// GUID:      {9F76FE22-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMAnimation2 = interface(IUnknown)
    ['{9F76FE22-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
    function SetOptions(flags: CONST_D3DRMANIMATIONFLAGS): HResult; stdcall;
    function AddRotateKey(time: Single; var q: D3DRMQUATERNION): HResult; stdcall;
    function AddPositionKey(time: Single; x: Single; y: Single; z: Single): HResult; stdcall;
    function AddScaleKey(time: Single; x: Single; y: Single; z: Single): HResult; stdcall;
    function DeleteKey(time: Single): HResult; stdcall;
    function SetFrame(const frame: Direct3DRMFrame3): HResult; stdcall;
    function GetFrame(out frame: Direct3DRMFrame3): HResult; stdcall;
    function SetTime(time: Single): HResult; stdcall;
    function GetOptions(out options: CONST_D3DRMANIMATIONFLAGS): HResult; stdcall;
    function AddKey(var key: D3DRMANIMATIONKEY): HResult; stdcall;
    function DeleteKeyById(id: Integer): HResult; stdcall;
    function GetKeys(timeMin: Single; timeMax: Single; var keyArray: PSafeArray): HResult; stdcall;
    function GetKeysCount(timeMin: Single; timeMax: Single; out count: Integer): HResult; stdcall;
    function ModifyKey(var key: D3DRMANIMATIONKEY): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMShadow2
// Flags:     (0)
// GUID:      {9F76FE36-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMShadow2 = interface(IUnknown)
    ['{9F76FE36-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
    function SetOptions(flags: CONST_D3DRMSHADOWFLAGS): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMAnimationSet2
// Flags:     (0)
// GUID:      {9F76FE23-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMAnimationSet2 = interface(IUnknown)
    ['{9F76FE23-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
    function AddAnimation(const aid: Direct3DRMAnimation2): HResult; stdcall;
    function DeleteAnimation(const aid: Direct3DRMAnimation2): HResult; stdcall;
    function GetAnimations(out ret: Direct3DRMAnimationArray): HResult; stdcall;
    function LoadFromFile(const filename: WideString; id: OleVariant; flags: CONST_D3DRMLOADFLAGS; 
                          const loadTextureImplementation: Direct3DRMLoadTextureCallback3; 
                          const userArgument: IDispatch; const parentFrame: Direct3DRMFrame3): HResult; stdcall;
    function SetTime(time: Single): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRM3
// Flags:     (0)
// GUID:      {9F76FE24-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRM3 = interface(IUnknown)
    ['{9F76FE24-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function CreateDeviceFromClipper(const lpDDClipper: DirectDrawClipper; const guid: WideString; 
                                     width: SYSINT; height: SYSINT; out retV: Direct3DRMDevice3): HResult; stdcall;
    function CreateFrame(const parent: Direct3DRMFrame3; out retV: Direct3DRMFrame3): HResult; stdcall;
    function CreateLightRGB(lt: CONST_D3DRMLIGHTTYPE; vred: Single; vgreen: Single; vblue: Single; 
                            out retV: Direct3DRMLight): HResult; stdcall;
    function CreateLight(lt: CONST_D3DRMLIGHTTYPE; color: Integer; out retV: Direct3DRMLight): HResult; stdcall;
    function CreateMeshBuilder(out retV: Direct3DRMMeshBuilder3): HResult; stdcall;
    function CreateMaterial(D: Single; out val: Direct3DRMMaterial2): HResult; stdcall;
    function LoadTexture(const name: WideString; out retval: Direct3DRMTexture3): HResult; stdcall;
    function CreateViewport(const dev: Direct3DRMDevice3; const fr: Direct3DRMFrame3; x: Integer; 
                            y: Integer; w: Integer; h: Integer; out retval: Direct3DRMViewport2): HResult; stdcall;
    function SetDefaultTextureColors(numTextureColors: Integer): HResult; stdcall;
    function SetDefaultTextureShades(numTextureShades: Integer): HResult; stdcall;
    function CreateAnimationSet(out retval: Direct3DRMAnimationSet2): HResult; stdcall;
    function CreateMesh(out retV: Direct3DRMMesh): HResult; stdcall;
    function CreateFace(out retV: Direct3DRMFace2): HResult; stdcall;
    function CreateAnimation(out retV: Direct3DRMAnimation2): HResult; stdcall;
    function Tick(tic: Single): HResult; stdcall;
    function CreateDeviceFromSurface(const g: WideString; const dd: DirectDraw4; 
                                     const ddS: DirectDrawSurface4; 
                                     flags: CONST_D3DRMCREATEDEVICEFLAGS; 
                                     out retval: Direct3DRMDevice3): HResult; stdcall;
    function CreateTextureFromSurface(const ddS: DirectDrawSurface4; out retV: Direct3DRMTexture3): HResult; stdcall;
    function CreateWrap(t: CONST_D3DRMWRAPTYPE; const f: Direct3DRMFrame3; ox: Single; oy: Single; 
                        oz: Single; dx: Single; dy: Single; dz: Single; ux: Single; uy: Single; 
                        uz: Single; ou: Single; ov: Single; su: Single; sv: Single; 
                        out retV: Direct3DRMWrap): HResult; stdcall;
    function GetSearchPath(out name: WideString): HResult; stdcall;
    function GetDevices(out retval: Direct3DRMDeviceArray): HResult; stdcall;
    function GetNamedObject(const name: WideString; out retval: Direct3DRMObject): HResult; stdcall;
    function SetSearchPath(const name: WideString): HResult; stdcall;
    function AddSearchPath(const name: WideString): HResult; stdcall;
    function EnumerateObjects(const enumerateObjectsImplementation: Direct3DRMEnumerateObjectsCallback; 
                              const userArgument: IDispatch): HResult; stdcall;
    function LoadFromFile(const filename: WideString; id: OleVariant; var guidArray: PSafeArray; 
                          count: Integer; options: CONST_D3DRMLOADFLAGS; 
                          const loadCallbackImplementation: Direct3DRMLoadCallback; 
                          const loadArgument: IDispatch; 
                          const loadTextureImplementation: Direct3DRMLoadTextureCallback3; 
                          const loadTextureArgument: IDispatch; const parentFrame: Direct3DRMFrame3): HResult; stdcall;
    function CreateShadow(const visual: Direct3DRMVisual; const Light: Direct3DRMLight; px: Single; 
                          py: Single; pz: Single; nx: Single; ny: Single; nz: Single; 
                          out retV: Direct3DRMShadow2): HResult; stdcall;
    function CreateProgressiveMesh(out retV: Direct3DRMProgressiveMesh): HResult; stdcall;
    function CreateClippedVisual(const vis: Direct3DRMVisual; out ret: Direct3DRMClippedVisual): HResult; stdcall;
    function GetOptions(out options: CONST_D3DRMHANDEDNESS): HResult; stdcall;
    function SetOptions(options: CONST_D3DRMHANDEDNESS): HResult; stdcall;
    function CreateInterpolatorMesh(out ret: Direct3DRMMeshInterpolator): HResult; stdcall;
    function CreateInterpolatorTexture(out ret: Direct3DRMTextureInterpolator): HResult; stdcall;
    function CreateInterpolatorMaterial(out ret: Direct3DRMMaterialInterpolator): HResult; stdcall;
    function CreateInterpolatorFrame(out ret: Direct3DRMFrameInterpolator): HResult; stdcall;
    function CreateInterpolatorViewport(out ret: Direct3DRMViewportInterpolator): HResult; stdcall;
    function CreateInterpolatorLight(out ret: Direct3DRMLightInterpolator): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMMeshBuilder3
// Flags:     (0)
// GUID:      {9F76FE26-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMMeshBuilder3 = interface(IUnknown)
    ['{9F76FE26-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
    function AddFace(const f: Direct3DRMFace2): HResult; stdcall;
    function AddFaces(vc: Integer; var verexArray: PSafeArray; nc: Integer; 
                      var normalArray: PSafeArray; var data: PSafeArray; 
                      out array_: Direct3DRMFaceArray): HResult; stdcall;
    function AddFacesIndexed(flags: CONST_D3DRMADDFACESFLAGS; var indexArray: PSafeArray; 
                             out newFaceIndex: Integer): HResult; stdcall;
    function AddFrame(const frame: Direct3DRMFrame3): HResult; stdcall;
    function AddMesh(const mesh: Direct3DRMMesh): HResult; stdcall;
    function AddMeshBuilder(const meshbuilder: Direct3DRMMeshBuilder3; 
                            flags: CONST_D3DRMADDMESHBUILDERFLAGS): HResult; stdcall;
    function AddNormal(x: Single; y: Single; z: Single; out index: SYSINT): HResult; stdcall;
    function AddTriangles(format: CONST_D3DRMADDTRIANGLESVT; VertexCount: Integer; var data: Pointer): HResult; stdcall;
    function AddVertex(x: Single; y: Single; z: Single; out index: SYSINT): HResult; stdcall;
    function CreateFace(out retV: Direct3DRMFace2): HResult; stdcall;
    function CreateMesh(out retV: Direct3DRMMesh): HResult; stdcall;
    function CreateSubMesh(out retV: Direct3DRMMeshBuilder3): HResult; stdcall;
    function DeleteFace(const face: Direct3DRMFace2): HResult; stdcall;
    function DeleteNormals(id: Integer; count: Integer): HResult; stdcall;
    function DeleteSubMesh(const mesh: Direct3DRMMeshBuilder3): HResult; stdcall;
    function DeleteVertices(id: Integer; count: Integer): HResult; stdcall;
    function Empty: HResult; stdcall;
    function EnableMesh(flags: CONST_D3DRMADDMESHBUILDERFLAGS): HResult; stdcall;
    function GenerateNormals(angle: Single; flags: CONST_D3DRMGENERATENORMALSFLAGS): HResult; stdcall;
    function GetBox(var retV: D3DRMBOX): HResult; stdcall;
    function GetColorSource(out data: CONST_D3DRMCOLORSOURCE): HResult; stdcall;
    function GetEnable(out flags: CONST_D3DRMADDMESHBUILDERFLAGS): HResult; stdcall;
    function GetFace(id: Integer; out retV: Direct3DRMFace2): HResult; stdcall;
    function GetFaceCount(out retV: SYSINT): HResult; stdcall;
    function GetFaces(out retV: Direct3DRMFaceArray): HResult; stdcall;
    function GetGeometry(var verexArray: PSafeArray; var normalArray: PSafeArray; 
                         var faceData: PSafeArray): HResult; stdcall;
    function GetNormal(index: Integer; var desc: D3DVECTOR): HResult; stdcall;
    function GetNormalCount(out normalCount: Integer): HResult; stdcall;
    function GetParentMesh(flags: CONST_D3DRMPARENTINGFLAGS; out vis: Direct3DRMMeshBuilder3): HResult; stdcall;
    function GetPerspective(out retV: Integer): HResult; stdcall;
    function GetQuality(out retV: CONST_D3DRMRENDERQUALITY): HResult; stdcall;
    function GetSubMeshes(count: Integer; var arrayOfMeshBuilders: PSafeArray): HResult; stdcall;
    function GetSubMeshCount(out count: Integer): HResult; stdcall;
    function GetTextureCoordinates(idx: Integer; var u: Single; var v: Single): HResult; stdcall;
    function GetVertex(id: Integer; var vec: D3DVECTOR): HResult; stdcall;
    function GetVertexColor(index: Integer; out retV: Integer): HResult; stdcall;
    function GetVertexCount(out retV: SYSINT): HResult; stdcall;
    function GetFaceDataSize(out faceCount: Integer): HResult; stdcall;
    function LoadFromFile(const filename: WideString; id: OleVariant; flags: CONST_D3DRMLOADFLAGS; 
                          const loadTextureImplementation: Direct3DRMLoadTextureCallback3; 
                          const userArgument: IDispatch): HResult; stdcall;
    function Optimize: HResult; stdcall;
    function Save(const fname: WideString; xFormat: CONST_D3DRMXOFFORMAT; Save: CONST_D3DRMSAVEFLAGS): HResult; stdcall;
    function ScaleMesh(sx: Single; sy: Single; sz: Single): HResult; stdcall;
    function SetColor(col: Integer): HResult; stdcall;
    function SetColorRGB(red: Single; green: Single; blue: Single): HResult; stdcall;
    function SetColorSource(val: CONST_D3DRMCOLORSOURCE): HResult; stdcall;
    function SetMaterial(const mat: Direct3DRMMaterial2): HResult; stdcall;
    function SetNormal(idx: Integer; x: Single; y: Single; z: Single): HResult; stdcall;
    function SetPerspective(perspectiveEnabled: CONST_DBOOLFLAGS): HResult; stdcall;
    function SetQuality(q: CONST_D3DRMRENDERQUALITY): HResult; stdcall;
    function SetTexture(const tex: Direct3DRMTexture3): HResult; stdcall;
    function SetTextureCoordinates(idx: Integer; u: Single; v: Single): HResult; stdcall;
    function SetTextureTopology(wrap_u: CONST_DBOOLFLAGS; wrap_v: CONST_DBOOLFLAGS): HResult; stdcall;
    function SetVertex(idx: Integer; x: Single; y: Single; z: Single): HResult; stdcall;
    function SetVertexColor(idx: Integer; c: Integer): HResult; stdcall;
    function SetVertexColorRGB(idx: Integer; r: Single; g: Single; b: Single): HResult; stdcall;
    function Translate(tx: Single; ty: Single; tz: Single): HResult; stdcall;
    function AddFacesJava(vc: Integer; var ver: Single; nc: Integer; var norm: Single; 
                          var data: Integer; out array_: Direct3DRMFaceArray): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMProgressiveMesh
// Flags:     (0)
// GUID:      {9F76FE31-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMProgressiveMesh = interface(IUnknown)
    ['{9F76FE31-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
    function LoadFromFile(const sFile: WideString; id: OleVariant; options: CONST_D3DRMLOADFLAGS; 
                          const loadTextureImplementation: Direct3DRMLoadTextureCallback3; 
                          const userArgument: IDispatch): HResult; stdcall;
    function GetLoadStatus(var loadStatus: D3DRMPMESHLOADSTATUS): HResult; stdcall;
    function SetMinRenderDetail(val: Single): HResult; stdcall;
    function Abort: HResult; stdcall;
    function GetFaceDetail(out count: Integer): HResult; stdcall;
    function GetVertexDetail(out count: Integer): HResult; stdcall;
    function SetFaceDetail(count: Integer): HResult; stdcall;
    function SetVertexDetail(count: Integer): HResult; stdcall;
    function GetFaceDetailRange(var min: Integer; var max: Integer): HResult; stdcall;
    function GetVertexDetailRange(var min: Integer; var max: Integer): HResult; stdcall;
    function GetDetail(out detail: Single): HResult; stdcall;
    function SetDetail(detail: Single): HResult; stdcall;
    function RegisterEvents(hEvent: Integer; flags: Integer; reserved: Integer): HResult; stdcall;
    function CreateMesh(out mesh: Direct3DRMMesh): HResult; stdcall;
    function Duplicate(out mesh: Direct3DRMProgressiveMesh): HResult; stdcall;
    function GetBox(var box: D3DRMBOX): HResult; stdcall;
    function SetQuality(quality: CONST_D3DRMRENDERQUALITY): HResult; stdcall;
    function GetQuality(out quality: CONST_D3DRMRENDERQUALITY): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMClippedVisual
// Flags:     (0)
// GUID:      {9F76FE30-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMClippedVisual = interface(IUnknown)
    ['{9F76FE30-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AddDestroyCallback(const fn: Direct3DRMCallback; const arg: IDispatch): HResult; stdcall;
    function DeleteDestroyCallback(const fn: Direct3DRMCallback; const args: IDispatch): HResult; stdcall;
    function CloneObject(out retV: Direct3DRMObject): HResult; stdcall;
    function SetAppData(data: Integer): HResult; stdcall;
    function GetAppData(out data: Integer): HResult; stdcall;
    function SetName(const name: WideString): HResult; stdcall;
    function GetName(out name: WideString): HResult; stdcall;
    function GetClassName(out name: WideString): HResult; stdcall;
    function AddPlane(const ref: Direct3DRMFrame3; var point: D3DVECTOR; var normal: D3DVECTOR; 
                      out ret: Integer): HResult; stdcall;
    function DeletePlane(id: Integer): HResult; stdcall;
    function GetPlane(id: Integer; const ref: Direct3DRMFrame3; var point: D3DVECTOR; 
                      var normal: D3DVECTOR): HResult; stdcall;
    function GetPlaneIds(count: Integer; var arrayOfIds: PSafeArray): HResult; stdcall;
    function GetPlaneIdsCount(out count: Integer): HResult; stdcall;
    function SetPlane(id: Integer; const ref: Direct3DRMFrame3; var point: D3DVECTOR; 
                      var normal: D3DVECTOR): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMMeshInterpolator
// Flags:     (0)
// GUID:      {5F4637E3-62AC-11D2-90B1-00C04FC2C602}
// *********************************************************************//
  Direct3DRMMeshInterpolator = interface(IUnknown)
    ['{5F4637E3-62AC-11D2-90B1-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AttachObject(const rmObject: Direct3DRMObject): HResult; stdcall;
    function DetachObject(const rmObject: Direct3DRMObject): HResult; stdcall;
    function GetAttachedObjects(out rmArray: Direct3DRMObjectArray): HResult; stdcall;
    function SetIndex(val: Single): HResult; stdcall;
    function GetIndex(out val: Single): HResult; stdcall;
    function Interpolate(val: Single; const rmObject: Direct3DRMObject; 
                         options: CONST_D3DRMINTERPOLATIONFLAGS): HResult; stdcall;
    function Translate(tx: Single; ty: Single; tz: Single): HResult; stdcall;
    function SetVertices(id: Integer; idx: Integer; count: Integer; var vertexArray: PSafeArray): HResult; stdcall;
    function SetGroupColor(id: Integer; val: Integer): HResult; stdcall;
    function SetGroupColorRGB(id: Integer; r: Single; g: Single; b: Single): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMTextureInterpolator
// Flags:     (0)
// GUID:      {5F4637E5-62AC-11D2-90B1-00C04FC2C602}
// *********************************************************************//
  Direct3DRMTextureInterpolator = interface(IUnknown)
    ['{5F4637E5-62AC-11D2-90B1-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AttachObject(const rmObject: Direct3DRMObject): HResult; stdcall;
    function DetachObject(const rmObject: Direct3DRMObject): HResult; stdcall;
    function GetAttachedObjects(out rmArray: Direct3DRMObjectArray): HResult; stdcall;
    function SetIndex(val: Single): HResult; stdcall;
    function GetIndex(out val: Single): HResult; stdcall;
    function Interpolate(val: Single; const rmObject: Direct3DRMObject; 
                         options: CONST_D3DRMINTERPOLATIONFLAGS): HResult; stdcall;
    function SetDecalOrigin(x: Integer; y: Integer): HResult; stdcall;
    function SetDecalSize(width: Single; height: Single): HResult; stdcall;
    function SetDecalTransparentColor(tcolor: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMMaterialInterpolator
// Flags:     (0)
// GUID:      {5F4637E6-62AC-11D2-90B1-00C04FC2C602}
// *********************************************************************//
  Direct3DRMMaterialInterpolator = interface(IUnknown)
    ['{5F4637E6-62AC-11D2-90B1-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AttachObject(const rmObject: Direct3DRMObject): HResult; stdcall;
    function DetachObject(const rmObject: Direct3DRMObject): HResult; stdcall;
    function GetAttachedObjects(out rmArray: Direct3DRMObjectArray): HResult; stdcall;
    function SetIndex(val: Single): HResult; stdcall;
    function GetIndex(out val: Single): HResult; stdcall;
    function Interpolate(val: Single; const rmObject: Direct3DRMObject; 
                         options: CONST_D3DRMINTERPOLATIONFLAGS): HResult; stdcall;
    function SetPower(power: Single): HResult; stdcall;
    function SetSpecular(red: Single; green: Single; blue: Single): HResult; stdcall;
    function SetEmissive(red: Single; green: Single; blue: Single): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMFrameInterpolator
// Flags:     (0)
// GUID:      {5F4637E2-62AC-11D2-90B1-00C04FC2C602}
// *********************************************************************//
  Direct3DRMFrameInterpolator = interface(IUnknown)
    ['{5F4637E2-62AC-11D2-90B1-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AttachObject(const rmObject: Direct3DRMObject): HResult; stdcall;
    function DetachObject(const rmObject: Direct3DRMObject): HResult; stdcall;
    function GetAttachedObjects(out rmArray: Direct3DRMObjectArray): HResult; stdcall;
    function SetIndex(val: Single): HResult; stdcall;
    function GetIndex(out val: Single): HResult; stdcall;
    function Interpolate(val: Single; const rmObject: Direct3DRMObject; 
                         options: CONST_D3DRMINTERPOLATIONFLAGS): HResult; stdcall;
    function SetPosition(const reference: Direct3DRMFrame3; x: Single; y: Single; z: Single): HResult; stdcall;
    function SetQuaternion(const reference: Direct3DRMFrame3; var quat: D3DRMQUATERNION): HResult; stdcall;
    function SetRotation(const reference: Direct3DRMFrame3; x: Single; y: Single; z: Single; 
                         theta: Single): HResult; stdcall;
    function SetVelocity(const reference: Direct3DRMFrame3; x: Single; y: Single; z: Single; 
                         with_rotation: CONST_DBOOLFLAGS): HResult; stdcall;
    function SetOrientation(const reference: Direct3DRMFrame3; dx: Single; dy: Single; dz: Single; 
                            ux: Single; uy: Single; uz: Single): HResult; stdcall;
    function SetSceneBackground(c: Integer): HResult; stdcall;
    function SetSceneFogColor(c: Integer): HResult; stdcall;
    function SetSceneBackgroundRGB(r: Single; g: Single; b: Single): HResult; stdcall;
    function SetSceneFogParams(start: Single; end_: Single; density: Single): HResult; stdcall;
    function SetColor(c: Integer): HResult; stdcall;
    function SetColorRGB(r: Single; g: Single; b: Single): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMViewportInterpolator
// Flags:     (0)
// GUID:      {5F4637E1-62AC-11D2-90B1-00C04FC2C602}
// *********************************************************************//
  Direct3DRMViewportInterpolator = interface(IUnknown)
    ['{5F4637E1-62AC-11D2-90B1-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AttachObject(const rmObject: Direct3DRMObject): HResult; stdcall;
    function DetachObject(const rmObject: Direct3DRMObject): HResult; stdcall;
    function GetAttachedObjects(out rmArray: Direct3DRMObjectArray): HResult; stdcall;
    function SetIndex(val: Single): HResult; stdcall;
    function GetIndex(out val: Single): HResult; stdcall;
    function Interpolate(val: Single; const rmObject: Direct3DRMObject; 
                         options: CONST_D3DRMINTERPOLATIONFLAGS): HResult; stdcall;
    function SetFront(val: Single): HResult; stdcall;
    function SetBack(val: Single): HResult; stdcall;
    function SetField(val: Single): HResult; stdcall;
    function SetPlane(Left: Single; Right: Single; Bottom: Single; Top: Single): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMLightInterpolator
// Flags:     (0)
// GUID:      {5F4637E4-62AC-11D2-90B1-00C04FC2C602}
// *********************************************************************//
  Direct3DRMLightInterpolator = interface(IUnknown)
    ['{5F4637E4-62AC-11D2-90B1-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AttachObject(const rmObject: Direct3DRMObject): HResult; stdcall;
    function DetachObject(const rmObject: Direct3DRMObject): HResult; stdcall;
    function GetAttachedObjects(out rmArray: Direct3DRMObjectArray): HResult; stdcall;
    function SetIndex(val: Single): HResult; stdcall;
    function GetIndex(out val: Single): HResult; stdcall;
    function Interpolate(val: Single; const rmObject: Direct3DRMObject; 
                         options: CONST_D3DRMINTERPOLATIONFLAGS): HResult; stdcall;
    function SetColor(c: Integer): HResult; stdcall;
    function SetColorRGB(r: Single; g: Single; b: Single): HResult; stdcall;
    function SetRange(rng: Single): HResult; stdcall;
    function SetUmbra(u: Single): HResult; stdcall;
    function SetPenumbra(p: Single): HResult; stdcall;
    function SetConstantAttenuation(atn: Single): HResult; stdcall;
    function SetLinearAttenuation(atn: Single): HResult; stdcall;
    function SetQuadraticAttenuation(atn: Single): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectSound
// Flags:     (0)
// GUID:      {9F76FB00-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectSound = interface(IUnknown)
    ['{9F76FB00-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function CreateSoundBuffer(var bufferDesc: DSBUFFERDESC; var format: WAVEFORMATEX; 
                               out soundBuffer: DirectSoundBuffer): HResult; stdcall;
    function CreateSoundBufferFromFile(const filename: WideString; var bufferDesc: DSBUFFERDESC; 
                                       out format: WAVEFORMATEX; out soundBuffer: DirectSoundBuffer): HResult; stdcall;
    function CreateSoundBufferFromResource(const dll: WideString; const resourceName: WideString; 
                                           var bufferDesc: DSBUFFERDESC; out format: WAVEFORMATEX; 
                                           out soundBuffer: DirectSoundBuffer): HResult; stdcall;
    function GetCaps(var caps: DSCAPS): HResult; stdcall;
    function DuplicateSoundBuffer(const original: DirectSoundBuffer; 
                                  out Duplicate: DirectSoundBuffer): HResult; stdcall;
    function SetCooperativeLevel(hwnd: Integer; level: CONST_DSSCLFLAGS): HResult; stdcall;
    function GetSpeakerConfig(out speakerConfig: CONST_DSSPEAKERFLAGS): HResult; stdcall;
    function SetSpeakerConfig(speakerConfig: CONST_DSSPEAKERFLAGS): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectSoundBuffer
// Flags:     (0)
// GUID:      {9F76FB01-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectSoundBuffer = interface(IUnknown)
    ['{9F76FB01-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetDirectSound3DListener(out lpdsl: DirectSound3DListener): HResult; stdcall;
    function GetDirectSound3DBuffer(out lpdsb: DirectSound3DBuffer): HResult; stdcall;
    function GetCaps(var caps: DSBCAPS): HResult; stdcall;
    function GetCurrentPosition(out cursors: DSCURSORS): HResult; stdcall;
    function GetFormat(var format: WAVEFORMATEX): HResult; stdcall;
    function GetVolume(out volume: Integer): HResult; stdcall;
    function GetPan(out pan: Integer): HResult; stdcall;
    function GetFrequency(out frequency: Integer): HResult; stdcall;
    function GetStatus(out status: CONST_DSBSTATUSFLAGS): HResult; stdcall;
    function Initialize(const DirectSound: DirectSound; var bufferDesc: DSBUFFERDESC; var wbuf: Byte): HResult; stdcall;
    function WriteBuffer(start: Integer; size: Integer; var buffer: Pointer; 
                         flags: CONST_DSBLOCKFLAGS): HResult; stdcall;
    function ReadBuffer(start: Integer; size: Integer; var buffer: Pointer; 
                        flags: CONST_DSBLOCKFLAGS): HResult; stdcall;
    function Play(flags: CONST_DSBPLAYFLAGS): HResult; stdcall;
    function SetCurrentPosition(newPosition: Integer): HResult; stdcall;
    function SetFormat(var format: WAVEFORMATEX): HResult; stdcall;
    function SetVolume(volume: Integer): HResult; stdcall;
    function SetPan(pan: Integer): HResult; stdcall;
    function SetFrequency(frequency: Integer): HResult; stdcall;
    function Stop: HResult; stdcall;
    function restore: HResult; stdcall;
    function SetNotificationPositions(nElements: Integer; var psa: PSafeArray): HResult; stdcall;
    function SaveToFile(const filename: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectSound3DListener
// Flags:     (0)
// GUID:      {9F76FB02-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectSound3DListener = interface(IUnknown)
    ['{9F76FB02-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetAllParameters(var listener: DS3DLISTENER): HResult; stdcall;
    function GetDistanceFactor(out distanceFactor: Single): HResult; stdcall;
    function GetDopplerFactor(out dopplerFactor: Single): HResult; stdcall;
    function GetOrientation(var orientFront: D3DVECTOR; var orientTop: D3DVECTOR): HResult; stdcall;
    function GetPosition(out position: D3DVECTOR): HResult; stdcall;
    function GetRolloffFactor(out rolloffFactor: Single): HResult; stdcall;
    function GetVelocity(out velocity: D3DVECTOR): HResult; stdcall;
    function SetAllParameters(var listener: DS3DLISTENER; applyFlag: CONST_DS3DAPPLYFLAGS): HResult; stdcall;
    function SetDistanceFactor(distanceFactor: Single; applyFlag: CONST_DS3DAPPLYFLAGS): HResult; stdcall;
    function SetDopplerFactor(dopplerFactor: Single; applyFlag: CONST_DS3DAPPLYFLAGS): HResult; stdcall;
    function SetOrientation(xFront: Single; yFront: Single; zFront: Single; xTop: Single; 
                            yTop: Single; zTop: Single; applyFlag: CONST_DS3DAPPLYFLAGS): HResult; stdcall;
    function SetPosition(x: Single; y: Single; z: Single; applyFlag: CONST_DS3DAPPLYFLAGS): HResult; stdcall;
    function SetRolloffFactor(rolloffFactor: Single; applyFlag: CONST_DS3DAPPLYFLAGS): HResult; stdcall;
    function SetVelocity(x: Single; y: Single; z: Single; applyFlag: CONST_DS3DAPPLYFLAGS): HResult; stdcall;
    function CommitDeferredSettings: HResult; stdcall;
    function GetDirectSoundBuffer(out retval: DirectSoundBuffer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectSound3DBuffer
// Flags:     (0)
// GUID:      {9F76FB03-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectSound3DBuffer = interface(IUnknown)
    ['{9F76FB03-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetDirectSound3DListener(out retval: DirectSound3DListener): HResult; stdcall;
    function GetDirectSoundBuffer(out retval: DirectSoundBuffer): HResult; stdcall;
    function GetAllParameters(var buffer: DS3DBUFFER): HResult; stdcall;
    function GetConeAngles(var inCone: Integer; var outCone: Integer): HResult; stdcall;
    function GetConeOrientation(var orientation: D3DVECTOR): HResult; stdcall;
    function GetConeOutsideVolume(out coneOutsideVolume: Integer): HResult; stdcall;
    function GetMaxDistance(out maxDistance: Single): HResult; stdcall;
    function GetMinDistance(out minDistance: Single): HResult; stdcall;
    function GetMode(out mode: CONST_DS3DMODEFLAGS): HResult; stdcall;
    function GetPosition(var position: D3DVECTOR): HResult; stdcall;
    function GetVelocity(var velocity: D3DVECTOR): HResult; stdcall;
    function SetAllParameters(var buffer: DS3DBUFFER; applyFlag: CONST_DS3DAPPLYFLAGS): HResult; stdcall;
    function SetConeAngles(inCone: Integer; outCone: Integer; applyFlag: CONST_DS3DAPPLYFLAGS): HResult; stdcall;
    function SetConeOrientation(x: Single; y: Single; z: Single; applyFlag: CONST_DS3DAPPLYFLAGS): HResult; stdcall;
    function SetConeOutsideVolume(coneOutsideVolume: Integer; applyFlag: CONST_DS3DAPPLYFLAGS): HResult; stdcall;
    function SetMaxDistance(maxDistance: Single; applyFlag: CONST_DS3DAPPLYFLAGS): HResult; stdcall;
    function SetMinDistance(minDistance: Single; applyFlag: CONST_DS3DAPPLYFLAGS): HResult; stdcall;
    function SetMode(mode: CONST_DS3DMODEFLAGS; applyFlag: CONST_DS3DAPPLYFLAGS): HResult; stdcall;
    function SetPosition(x: Single; y: Single; z: Single; applyFlag: CONST_DS3DAPPLYFLAGS): HResult; stdcall;
    function SetVelocity(x: Single; y: Single; z: Single; applyFlag: CONST_DS3DAPPLYFLAGS): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectSoundCapture
// Flags:     (0)
// GUID:      {9F76FB04-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectSoundCapture = interface(IUnknown)
    ['{9F76FB04-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function CreateCaptureBuffer(var bufferDesc: DSCBUFFERDESC; out ret: DirectSoundCaptureBuffer): HResult; stdcall;
    function GetCaps(var caps: DSCCAPS): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectSoundCaptureBuffer
// Flags:     (0)
// GUID:      {9F76FB05-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectSoundCaptureBuffer = interface(IUnknown)
    ['{9F76FB05-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetCaps(var caps: DSCBCAPS): HResult; stdcall;
    function GetCurrentPosition(var cursors: DSCURSORS): HResult; stdcall;
    function GetFormat(var waveformat: WAVEFORMATEX): HResult; stdcall;
    function GetStatus(out status: CONST_DSCBSTATUSFLAGS): HResult; stdcall;
    function Initialize(const captureBuffer: DirectSoundCaptureBuffer; var bufferDesc: DSCBUFFERDESC): HResult; stdcall;
    function start(flags: CONST_DSCBSTARTFLAGS): HResult; stdcall;
    function Stop: HResult; stdcall;
    function WriteBuffer(start: Integer; size: Integer; var buffer: Pointer; 
                         flags: CONST_DSCBLOCKFLAGS): HResult; stdcall;
    function ReadBuffer(start: Integer; size: Integer; var buffer: Pointer; 
                        flags: CONST_DSCBLOCKFLAGS): HResult; stdcall;
    function SetNotificationPositions(nElements: Integer; var psa: PSafeArray): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectSoundEnum
// Flags:     (0)
// GUID:      {9F76FB07-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectSoundEnum = interface(IUnknown)
    ['{9F76FB07-8E92-11D1-8808-00C04FC2C602}']
    function GetGuid(index: Integer; out guid: WideString): HResult; stdcall;
    function GetDescription(index: Integer; out guid: WideString): HResult; stdcall;
    function GetName(index: Integer; out guid: WideString): HResult; stdcall;
    function GetCount(out count: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectInput
// Flags:     (0)
// GUID:      {9F76FA02-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectInput = interface(IUnknown)
    ['{9F76FA02-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function CreateDevice(const guid: WideString; out dev: DirectInputDevice): HResult; stdcall;
    function GetDIEnumDevices(deviceType: CONST_DIDEVICETYPE; flags: CONST_DIENUMDEVICESFLAGS; 
                              out retval: DirectInputEnumDevices): HResult; stdcall;
    function GetDeviceStatus(const guid: WideString; out status: WordBool): HResult; stdcall;
    function RunControlPanel(hwndOwner: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectInputDevice
// Flags:     (0)
// GUID:      {9F76FA03-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectInputDevice = interface(IUnknown)
    ['{9F76FA03-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function Acquire: HResult; stdcall;
    function GetDeviceObjectsEnum(flags: CONST_DIDFTFLAGS; out ppret: DirectInputEnumDeviceObjects): HResult; stdcall;
    function GetCapabilities(var caps: DIDEVCAPS): HResult; stdcall;
    function GetDeviceData(var deviceObjectDataArray: PSafeArray; flags: CONST_DIDGDDFLAGS; 
                           out c: Integer): HResult; stdcall;
    function GetDeviceInfo(out deviceInstance: DirectInputDeviceInstance): HResult; stdcall;
    function GetDeviceStateKeyboard(var state: DIKEYBOARDSTATE): HResult; stdcall;
    function GetDeviceStateMouse(var state: DIMOUSESTATE): HResult; stdcall;
    function GetDeviceStateJoystick(var state: DIJOYSTATE): HResult; stdcall;
    function GetDeviceStateJoystick2(var state: DIJOYSTATE2): HResult; stdcall;
    function GetDeviceState(cb: Integer; var state: Pointer): HResult; stdcall;
    function GetObjectInfo(Obj: Integer; how: CONST_DIPHFLAGS; 
                           out ret: DirectInputDeviceObjectInstance): HResult; stdcall;
    function GetProperty(const guid: WideString; out propertyInfo: Pointer): HResult; stdcall;
    function RunControlPanel(hwnd: Integer): HResult; stdcall;
    function SetCooperativeLevel(hwnd: Integer; flags: CONST_DISCLFLAGS): HResult; stdcall;
    function SetCommonDataFormat(format: CONST_DICOMMONDATAFORMATS): HResult; stdcall;
    function SetDataFormat(var format: DIDATAFORMAT; var formatArray: PSafeArray): HResult; stdcall;
    function SetEventNotification(hEvent: Integer): HResult; stdcall;
    function SetProperty(const guid: WideString; var propertyInfo: Pointer): HResult; stdcall;
    function Unacquire: HResult; stdcall;
    function Poll: HResult; stdcall;
    function CreateEffect(const effectGuid: WideString; var effectinfo: DIEFFECT; 
                          out ret: DirectInputEffect): HResult; stdcall;
    function CreateCustomEffect(var effectinfo: DIEFFECT; channels: Integer; samplePeriod: Integer; 
                                nSamples: Integer; var sampledata: PSafeArray; 
                                out ret: DirectInputEffect): HResult; stdcall;
    function SendDeviceData(count: Integer; var data: PSafeArray; flags: CONST_DISDDFLAGS; 
                            out retcount: Integer): HResult; stdcall;
    function SendForceFeedbackCommand(flags: CONST_DISFFCFLAGS): HResult; stdcall;
    function GetForceFeedbackState(out state: CONST_DIGFFSFLAGS): HResult; stdcall;
    function GetEffectsEnum(effType: CONST_DIEFTFLAGS; out ret: DirectInputEnumEffects): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectInputEnumDeviceObjects
// Flags:     (0)
// GUID:      {9F76FA08-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectInputEnumDeviceObjects = interface(IUnknown)
    ['{9F76FA08-8E92-11D1-8808-00C04FC2C602}']
    function GetItem(index: Integer; out info: DirectInputDeviceObjectInstance): HResult; stdcall;
    function GetCount(out count: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectInputDeviceObjectInstance
// Flags:     (0)
// GUID:      {9F76FA05-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectInputDeviceObjectInstance = interface(IUnknown)
    ['{9F76FA05-8E92-11D1-8808-00C04FC2C602}']
    function GetGuidType(out ret: WideString): HResult; stdcall;
    function GetOfs(out ret: Integer): HResult; stdcall;
    function GetType(out ret: Integer): HResult; stdcall;
    function GetFlags(out ret: CONST_DIDEVICEOBJINSTANCEFLAGS): HResult; stdcall;
    function GetName(out ret: WideString): HResult; stdcall;
    function GetCollectionNumber(out ret: Smallint): HResult; stdcall;
    function GetDesignatorIndex(out ret: Smallint): HResult; stdcall;
    function GetUsagePage(out ret: Smallint): HResult; stdcall;
    function GetUsage(out ret: Smallint): HResult; stdcall;
    function GetDimension(out ret: Integer): HResult; stdcall;
    function GetExponent(out ret: Smallint): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectInputDeviceInstance
// Flags:     (0)
// GUID:      {9F76FA04-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectInputDeviceInstance = interface(IUnknown)
    ['{9F76FA04-8E92-11D1-8808-00C04FC2C602}']
    function GetGuidInstance(out ret: WideString): HResult; stdcall;
    function GetGuidProduct(out ret: WideString): HResult; stdcall;
    function GetProductName(out ret: WideString): HResult; stdcall;
    function GetInstanceName(out ret: WideString): HResult; stdcall;
    function GetGuidFFDriver(out ret: WideString): HResult; stdcall;
    function GetUsagePage(out ret: Smallint): HResult; stdcall;
    function GetUsage(out ret: Smallint): HResult; stdcall;
    function GetDevType(out ret: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectInputEffect
// Flags:     (0)
// GUID:      {BCAA7DA9-F7EF-11D2-93FD-00C04FC2C602}
// *********************************************************************//
  DirectInputEffect = interface(IUnknown)
    ['{BCAA7DA9-F7EF-11D2-93FD-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function Download: HResult; stdcall;
    function GetEffectGuid(out guid: WideString): HResult; stdcall;
    function GetEffectStatus(out ret: Integer): HResult; stdcall;
    function start(iterations: Integer; flags: Integer): HResult; stdcall;
    function Stop: HResult; stdcall;
    function Unload: HResult; stdcall;
    function SetParameters(var effectinfo: DIEFFECT; flags: CONST_DIEPFLAGS): HResult; stdcall;
    function GetParameters(var effectinfo: DIEFFECT): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectInputEnumEffects
// Flags:     (0)
// GUID:      {BCAA7DAA-F7EF-11D2-93FD-00C04FC2C602}
// *********************************************************************//
  DirectInputEnumEffects = interface(IUnknown)
    ['{BCAA7DAA-F7EF-11D2-93FD-00C04FC2C602}']
    function GetCount(out ret: Integer): HResult; stdcall;
    function GetEffectGuid(i: Integer; out ret: WideString): HResult; stdcall;
    function GetType(i: Integer; out ret: CONST_DIEFTFLAGS): HResult; stdcall;
    function GetStaticParams(i: Integer; out ret: CONST_DIEPFLAGS): HResult; stdcall;
    function GetDynamicParams(i: Integer; out ret: CONST_DIEPFLAGS): HResult; stdcall;
    function GetName(i: Integer; out ret: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectInputEnumDevices
// Flags:     (0)
// GUID:      {9F76FA09-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  DirectInputEnumDevices = interface(IUnknown)
    ['{9F76FA09-8E92-11D1-8808-00C04FC2C602}']
    function GetItem(index: Integer; out info: DirectInputDeviceInstance): HResult; stdcall;
    function GetCount(out count: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: Direct3DRMInterpolator
// Flags:     (16) Hidden
// GUID:      {9F76FE29-8E92-11D1-8808-00C04FC2C602}
// *********************************************************************//
  Direct3DRMInterpolator = interface(IUnknown)
    ['{9F76FE29-8E92-11D1-8808-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AttachObject(const rmObject: Direct3DRMObject): HResult; stdcall;
    function DetachObject(const rmObject: Direct3DRMObject): HResult; stdcall;
    function GetAttachedObjects(out rmArray: Direct3DRMObjectArray): HResult; stdcall;
    function SetIndex(val: Single): HResult; stdcall;
    function GetIndex(out val: Single): HResult; stdcall;
    function Interpolate(val: Single; const rmObject: Direct3DRMObject; 
                         options: CONST_D3DRMINTERPOLATIONFLAGS): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectMusicLoader
// Flags:     (0)
// GUID:      {FAFA35A0-8B72-11D2-90B2-00C04FC2C602}
// *********************************************************************//
  DirectMusicLoader = interface(IUnknown)
    ['{FAFA35A0-8B72-11D2-90B2-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function LoadSegment(const filename: WideString; out ret: DirectMusicSegment): HResult; stdcall;
    function LoadStyle(const filename: WideString; out ret: DirectMusicStyle): HResult; stdcall;
    function LoadBand(const filename: WideString; out ret: DirectMusicBand): HResult; stdcall;
    function LoadCollection(const filename: WideString; out ret: DirectMusicCollection): HResult; stdcall;
    function LoadSegmentFromResource(const moduleName: WideString; const resourceName: WideString; 
                                     out ret: DirectMusicSegment): HResult; stdcall;
    function LoadStyleFromResource(const moduleName: WideString; const resourceName: WideString; 
                                   out ret: DirectMusicStyle): HResult; stdcall;
    function LoadBandFromResource(const moduleName: WideString; const resourceName: WideString; 
                                  out ret: DirectMusicBand): HResult; stdcall;
    function LoadCollectionFromResource(const moduleName: WideString; 
                                        const resourceName: WideString; 
                                        out ret: DirectMusicCollection): HResult; stdcall;
    function SetSearchDirectory(const dir: WideString): HResult; stdcall;
    function LoadChordMap(const filename: WideString; out ret: DirectMusicChordMap): HResult; stdcall;
    function LoadChordMapFromResource(const moduleName: WideString; const resourceName: WideString; 
                                      out ret: DirectMusicChordMap): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectMusicSegment
// Flags:     (0)
// GUID:      {FAFA35A1-8B72-11D2-90B2-00C04FC2C602}
// *********************************************************************//
  DirectMusicSegment = interface(IUnknown)
    ['{FAFA35A1-8B72-11D2-90B2-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function Clone(mtStart: Integer; mtEnd: Integer; out ppSegment: DirectMusicSegment): HResult; stdcall;
    function SetStartPoint(mtStart: Integer): HResult; stdcall;
    function GetStartPoint(out pmtStart: Integer): HResult; stdcall;
    function SetLoopPoints(mtStart: Integer; mtEnd: Integer): HResult; stdcall;
    function GetLoopPointStart(out pmtStart: Integer): HResult; stdcall;
    function GetLoopPointEnd(out pmtEnd: Integer): HResult; stdcall;
    function GetLength(out pmtLength: Integer): HResult; stdcall;
    function SetLength(mtLength: Integer): HResult; stdcall;
    function GetRepeats(out lRepeats: Integer): HResult; stdcall;
    function SetRepeats(lRepeats: Integer): HResult; stdcall;
    function Download(const performance: DirectMusicPerformance): HResult; stdcall;
    function Unload(const performance: DirectMusicPerformance): HResult; stdcall;
    function SetAutoDownloadEnable(b: WordBool): HResult; stdcall;
    function SetTempoEnable(b: WordBool): HResult; stdcall;
    function SetTimeSigEnable(b: WordBool): HResult; stdcall;
    function SetStandardMidiFile: HResult; stdcall;
    function ConnectToCollection(const c: DirectMusicCollection): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectMusicPerformance
// Flags:     (0)
// GUID:      {FAFA35A7-8B72-11D2-90B2-00C04FC2C602}
// *********************************************************************//
  DirectMusicPerformance = interface(IUnknown)
    ['{FAFA35A7-8B72-11D2-90B2-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function Init(const DirectSound: DirectSound; hwnd: Integer): HResult; stdcall;
    function CloseDown: HResult; stdcall;
    function PlaySegment(const segment: DirectMusicSegment; lFlags: Integer; startTime: Integer; 
                         out segmentState: DirectMusicSegmentState): HResult; stdcall;
    function Stop(const segment: DirectMusicSegment; const segmentState: DirectMusicSegmentState; 
                  mtTime: Integer; lFlags: Integer): HResult; stdcall;
    function GetSegmentState(mtTime: Integer; out ret: DirectMusicSegmentState): HResult; stdcall;
    function Invalidate(mtTime: Integer; flags: Integer): HResult; stdcall;
    function IsPlaying(const segment: DirectMusicSegment; 
                       const segmentState: DirectMusicSegmentState; out b: WordBool): HResult; stdcall;
    function AddNotificationType(type_: CONST_DMUS_NOTIFICATION_TYPE): HResult; stdcall;
    function RemoveNotificationType(type_: CONST_DMUS_NOTIFICATION_TYPE): HResult; stdcall;
    function SetNotificationHandle(hnd: Integer): HResult; stdcall;
    function GetNotificationPMSG(var message: DMUS_NOTIFICATION_PMSG; out success: WordBool): HResult; stdcall;
    function MusicToClockTime(mtTime: Integer; out ctTime: Integer): HResult; stdcall;
    function ClockToMusicTime(ctTime: Integer; out mtTime: Integer): HResult; stdcall;
    function GetMusicTime(out ret: Integer): HResult; stdcall;
    function GetClockTime(out ret: Integer): HResult; stdcall;
    function GetPrepareTime(out lMilliSeconds: Integer): HResult; stdcall;
    function GetBumperLength(out lMilliSeconds: Integer): HResult; stdcall;
    function GetLatencyTime(out ctTime: Integer): HResult; stdcall;
    function GetQueueTime(out ctTime: Integer): HResult; stdcall;
    function GetResolvedTime(ctTime: Integer; flags: Integer; out ret: Integer): HResult; stdcall;
    function SetPrepareTime(lMilliSeconds: Integer): HResult; stdcall;
    function SetBumperLength(lMilliSeconds: Integer): HResult; stdcall;
    function AdjustTime(tAmount: Integer): HResult; stdcall;
    function SetMasterAutoDownload(b: WordBool): HResult; stdcall;
    function GetMasterAutoDownload(out b: WordBool): HResult; stdcall;
    function SetMasterTempo(tempo: Single): HResult; stdcall;
    function GetMasterTempo(out tempo: Single): HResult; stdcall;
    function SetMasterVolume(vol: Integer): HResult; stdcall;
    function GetMasterVolume(out v: Integer): HResult; stdcall;
    function SetMasterGrooveLevel(level: Smallint): HResult; stdcall;
    function GetMasterGrooveLevel(out level: Smallint): HResult; stdcall;
    function Reset(resetflags: Integer): HResult; stdcall;
    function GetStyle(mtTime: Integer; var mtUntil: Integer; out ret: DirectMusicStyle): HResult; stdcall;
    function GetChordMap(mtTime: Integer; var mtUntil: Integer; out ret: DirectMusicChordMap): HResult; stdcall;
    function GetCommand(mtTime: Integer; var mtUntil: Integer; out command: Byte): HResult; stdcall;
    function GetGrooveLevel(mtTime: Integer; var mtUntil: Integer; out level: Byte): HResult; stdcall;
    function GetTempo(mtTime: Integer; var mtUntil: Integer; out tempo: Double): HResult; stdcall;
    function GetTimeSig(mtTime: Integer; var mtUntil: Integer; var timeSig: DMUS_TIMESIGNATURE): HResult; stdcall;
    function SendNotePMSG(lTime: Integer; flags: Integer; channel: Integer; var msg: DMUS_NOTE_PMSG): HResult; stdcall;
    function SendCurvePMSG(lTime: Integer; flags: Integer; channel: Integer; 
                           var msg: DMUS_CURVE_PMSG): HResult; stdcall;
    function SendMIDIPMSG(lTime: Integer; flags: Integer; channel: Integer; status: Byte; 
                          byte1: Byte; byte2: Byte): HResult; stdcall;
    function SendPatchPMSG(lTime: Integer; flags: Integer; channel: Integer; instrument: Byte; 
                           byte1: Byte; byte2: Byte): HResult; stdcall;
    function SendTempoPMSG(lTime: Integer; flags: Integer; tempo: Double): HResult; stdcall;
    function SendTransposePMSG(lTime: Integer; flags: Integer; channel: Integer; transpose: Smallint): HResult; stdcall;
    function SendTimeSigPMSG(lTime: Integer; flags: Integer; var timeSig: DMUS_TIMESIGNATURE): HResult; stdcall;
    function GetPortName(index: Integer; out name: WideString): HResult; stdcall;
    function GetPortCount(out c: Integer): HResult; stdcall;
    function GetPortCaps(index: Integer; var caps: DMUS_PORTCAPS): HResult; stdcall;
    function SetPort(index: Integer; numGroups: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectMusicSegmentState
// Flags:     (0)
// GUID:      {FAFA35A6-8B72-11D2-90B2-00C04FC2C602}
// *********************************************************************//
  DirectMusicSegmentState = interface(IUnknown)
    ['{FAFA35A6-8B72-11D2-90B2-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetRepeats(out repeats: Integer): HResult; stdcall;
    function GetSeek(out seek: Integer): HResult; stdcall;
    function GetStartPoint(out seek: Integer): HResult; stdcall;
    function GetStartTime(out seek: Integer): HResult; stdcall;
    function GetSegment(out segment: DirectMusicSegment): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectMusicStyle
// Flags:     (0)
// GUID:      {FAFA35A4-8B72-11D2-90B2-00C04FC2C602}
// *********************************************************************//
  DirectMusicStyle = interface(IUnknown)
    ['{FAFA35A4-8B72-11D2-90B2-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetBandName(index: Integer; out name: WideString): HResult; stdcall;
    function GetBandCount(out count: Integer): HResult; stdcall;
    function GetBand(const name: WideString; out ret: DirectMusicBand): HResult; stdcall;
    function GetDefaultBand(out ret: DirectMusicBand): HResult; stdcall;
    function GetMotifName(index: Integer; out name: WideString): HResult; stdcall;
    function GetMotifCount(out count: Integer): HResult; stdcall;
    function GetMotif(const name: WideString; out ret: DirectMusicSegment): HResult; stdcall;
    function GetTimeSignature(var pTimeSig: DMUS_TIMESIGNATURE): HResult; stdcall;
    function GetTempo(out pTempo: Double): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectMusicBand
// Flags:     (0)
// GUID:      {FAFA35A3-8B72-11D2-90B2-00C04FC2C602}
// *********************************************************************//
  DirectMusicBand = interface(IUnknown)
    ['{FAFA35A3-8B72-11D2-90B2-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function CreateSegment(out ret: DirectMusicSegment): HResult; stdcall;
    function Download(const performance: DirectMusicPerformance): HResult; stdcall;
    function Unload(const performance: DirectMusicPerformance): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectMusicChordMap
// Flags:     (0)
// GUID:      {FAFA35A5-8B72-11D2-90B2-00C04FC2C602}
// *********************************************************************//
  DirectMusicChordMap = interface(IUnknown)
    ['{FAFA35A5-8B72-11D2-90B2-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function GetScale(out scale: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectMusicCollection
// Flags:     (0)
// GUID:      {FAFA35A8-8B72-11D2-90B2-00C04FC2C602}
// *********************************************************************//
  DirectMusicCollection = interface(IUnknown)
    ['{FAFA35A8-8B72-11D2-90B2-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectMusicComposer
// Flags:     (0)
// GUID:      {FAFA35A2-8B72-11D2-90B2-00C04FC2C602}
// *********************************************************************//
  DirectMusicComposer = interface(IUnknown)
    ['{FAFA35A2-8B72-11D2-90B2-00C04FC2C602}']
    function InternalSetObject(const lpdd: IUnknown): HResult; stdcall;
    function InternalGetObject(out lpdd: IUnknown): HResult; stdcall;
    function AutoTransition(const performance: DirectMusicPerformance; 
                            const toSeg: DirectMusicSegment; lCommand: Integer; lFlags: Integer; 
                            const chordmap: DirectMusicChordMap; out ppTransSeg: DirectMusicSegment): HResult; stdcall;
    function ComposeSegmentFromTemplate(const style: DirectMusicStyle; 
                                        const templateSeg: DirectMusicSegment; activity: Smallint; 
                                        const chordmap: DirectMusicChordMap; 
                                        out SectionSeg: DirectMusicSegment): HResult; stdcall;
    function ComposeSegmentFromShape(const style: DirectMusicStyle; numberOfMeasures: Smallint; 
                                     shape: Smallint; activity: Smallint; bIntro: WordBool; 
                                     bEnd: WordBool; const chordmap: DirectMusicChordMap; 
                                     out SectionSeg: DirectMusicSegment): HResult; stdcall;
    function ComposeTransition(const fromSeg: DirectMusicSegment; const toSeg: DirectMusicSegment; 
                               mtTime: Integer; lCommand: Integer; lFlags: Integer; 
                               const chordmap: DirectMusicChordMap; 
                               out SectionSeg: DirectMusicSegment): HResult; stdcall;
    function ComposeTemplateFromShape(numMeasures: Smallint; shape: Smallint; bIntro: WordBool; 
                                      bEnd: WordBool; endLength: Smallint; 
                                      out TempSeg: DirectMusicSegment): HResult; stdcall;
    function ChangeChordMap(const segment: DirectMusicSegment; trackScale: WordBool; 
                            const chordmap: DirectMusicChordMap): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: DirectXEvent
// Flags:     (256) OleAutomation
// GUID:      {FAFA35B0-8B72-11D2-90B2-00C04FC2C602}
// *********************************************************************//
  DirectXEvent = interface(IUnknown)
    ['{FAFA35B0-8B72-11D2-90B2-00C04FC2C602}']
    function DXCallback(eventid: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDirectX7
// Flags:     (0)
// GUID:      {FAFA3599-8B72-11D2-90B2-00C04FC2C602}
// *********************************************************************//
  IDirectX7 = interface(IUnknown)
    ['{FAFA3599-8B72-11D2-90B2-00C04FC2C602}']
    function Direct3DRMCreate(out ret: Direct3DRM3): HResult; stdcall;
    function DirectDrawCreate(const guid: WideString; out ret: DirectDraw7): HResult; stdcall;
    function GetDDEnum(out ret: DirectDrawEnum): HResult; stdcall;
    function DirectSoundCreate(const guid: WideString; out ret: DirectSound): HResult; stdcall;
    function DirectSoundCaptureCreate(const guid: WideString; out ret: DirectSoundCapture): HResult; stdcall;
    function GetDSEnum(out retval: DirectSoundEnum): HResult; stdcall;
    function GetDSCaptureEnum(out retval: DirectSoundEnum): HResult; stdcall;
    function DirectInputCreate(out ret: DirectInput): HResult; stdcall;
    function DirectPlayCreate(const guid: WideString; out ret: DirectPlay4): HResult; stdcall;
    function DirectPlayLobbyCreate(out ret: DirectPlayLobby3): HResult; stdcall;
    function GetDPEnum(out retval: DirectPlayEnumServiceProviders): HResult; stdcall;
    function ColorGetAlpha(color: Integer; out ret: Single): HResult; stdcall;
    function ColorGetBlue(color: Integer; out ret: Single): HResult; stdcall;
    function ColorGetGreen(color: Integer; out ret: Single): HResult; stdcall;
    function ColorGetRed(color: Integer; out ret: Single): HResult; stdcall;
    function CreateColorRGB(r: Single; g: Single; b: Single; out color: Integer): HResult; stdcall;
    function CreateColorRGBA(r: Single; g: Single; b: Single; a: Single; out color: Integer): HResult; stdcall;
    function MatrixFromQuaternion(out matrix: D3DMATRIX; var quat: D3DRMQUATERNION): HResult; stdcall;
    function QuaternionRotation(out quat: D3DRMQUATERNION; var axis: D3DVECTOR; theta: Single): HResult; stdcall;
    function QuaternionMultiply(out quat: D3DRMQUATERNION; var quatA: D3DRMQUATERNION; 
                                var quatB: D3DRMQUATERNION): HResult; stdcall;
    function QuaternionSlerp(out quat: D3DRMQUATERNION; var quatA: D3DRMQUATERNION; 
                             var quatB: D3DRMQUATERNION; alpha: Single): HResult; stdcall;
    function VectorAdd(out v: D3DVECTOR; var vA: D3DVECTOR; var vB: D3DVECTOR): HResult; stdcall;
    function VectorCrossProduct(out v: D3DVECTOR; var vA: D3DVECTOR; var vB: D3DVECTOR): HResult; stdcall;
    function VectorDotProduct(var vA: D3DVECTOR; var vB: D3DVECTOR; out ret: Single): HResult; stdcall;
    function VectorModulus(var vA: D3DVECTOR; out ret: Single): HResult; stdcall;
    function VectorNormalize(var v: D3DVECTOR): HResult; stdcall;
    function VectorRandom(var v: D3DVECTOR): HResult; stdcall;
    function VectorReflect(out vDest: D3DVECTOR; var vRay: D3DVECTOR; var vNormal: D3DVECTOR): HResult; stdcall;
    function VectorRotate(out vDest: D3DVECTOR; var vA: D3DVECTOR; var vAxis: D3DVECTOR; 
                          theta: Single): HResult; stdcall;
    function VectorScale(out vDest: D3DVECTOR; var vA: D3DVECTOR; factor: Single): HResult; stdcall;
    function VectorSubtract(out v: D3DVECTOR; var vA: D3DVECTOR; var vB: D3DVECTOR): HResult; stdcall;
    function VectorCopy(var vDest: D3DVECTOR; var vSrc: D3DVECTOR): HResult; stdcall;
    function RotateXMatrix(var mDest: D3DMATRIX; radians: Single): HResult; stdcall;
    function RotateYMatrix(var mDest: D3DMATRIX; radians: Single): HResult; stdcall;
    function RotateZMatrix(var mDest: D3DMATRIX; radians: Single): HResult; stdcall;
    function ViewMatrix(var mDest: D3DMATRIX; var vFrom: D3DVECTOR; var vTo: D3DVECTOR; 
                        var vUp: D3DVECTOR; roll: Single): HResult; stdcall;
    function MatrixMultiply(var mDest: D3DMATRIX; var mA: D3DMATRIX; var mB: D3DMATRIX): HResult; stdcall;
    function ProjectionMatrix(var mDest: D3DMATRIX; nearPlane: Single; farplane: Single; fov: Single): HResult; stdcall;
    function CopyMatrix(var mDest: D3DMATRIX; var mSrc: D3DMATRIX): HResult; stdcall;
    function IdentityMatrix(var mDest: D3DMATRIX): HResult; stdcall;
    function ZeroMatrix(var mDest: D3DMATRIX): HResult; stdcall;
    function TickCount(out retV: Integer): HResult; stdcall;
    function SystemBpp(out retV: Integer): HResult; stdcall;
    function DirectMusicLoaderCreate(out ret: DirectMusicLoader): HResult; stdcall;
    function DirectMusicComposerCreate(out ret: DirectMusicComposer): HResult; stdcall;
    function DirectMusicPerformanceCreate(out ret: DirectMusicPerformance): HResult; stdcall;
    function GetWindowRect(hwnd: Integer; var r: RECT): HResult; stdcall;
    function CreateEvent(const event: DirectXEvent; out h: Integer): HResult; stdcall;
    function SetEvent(eventid: Integer): HResult; stdcall;
    function DestroyEvent(eventid: Integer): HResult; stdcall;
    function CreateD3DVertex(x: Single; y: Single; z: Single; nx: Single; ny: Single; nz: Single; 
                             tu: Single; tv: Single; var v: D3DVERTEX): HResult; stdcall;
    function CreateD3DLVertex(x: Single; y: Single; z: Single; color: Integer; specular: Integer; 
                              tu: Single; tv: Single; var v: D3DLVERTEX): HResult; stdcall;
    function CreateD3DTLVertex(sx: Single; sy: Single; sz: Single; rhw: Single; color: Integer; 
                               specular: Integer; tu: Single; tv: Single; var v: D3DTLVERTEX): HResult; stdcall;
    function DirectDraw4Create(const guid: WideString; out ret: DirectDraw4): HResult; stdcall;
    function CreateNewGuid(out retGuid: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// The Class CoDirectX7 provides a Create and CreateRemote method to          
// create instances of the default interface IDirectX7 exposed by              
// the CoClass DirectX7. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDirectX7 = class
    class function Create: IDirectX7;
    class function CreateRemote(const MachineName: string): IDirectX7;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TDirectX7
// Help String      : DirectX7
// Default Interface: IDirectX7
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  TDirectX7Properties= class;
{$ENDIF}
  TDirectX7 = class(TOleServer)
  private
    FIntf: IDirectX7;
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    FProps: TDirectX7Properties;
    function GetServerProperties: TDirectX7Properties;
{$ENDIF}
    function GetDefaultInterface: IDirectX7;
  protected
    procedure InitServerData; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IDirectX7);
    procedure Disconnect; override;
    function Direct3DRMCreate(out ret: Direct3DRM3): HResult;
    function DirectDrawCreate(const guid: WideString; out ret: DirectDraw7): HResult;
    function GetDDEnum(out ret: DirectDrawEnum): HResult;
    function DirectSoundCreate(const guid: WideString; out ret: DirectSound): HResult;
    function DirectSoundCaptureCreate(const guid: WideString; out ret: DirectSoundCapture): HResult;
    function GetDSEnum(out retval: DirectSoundEnum): HResult;
    function GetDSCaptureEnum(out retval: DirectSoundEnum): HResult;
    function DirectInputCreate(out ret: DirectInput): HResult;
    function DirectPlayCreate(const guid: WideString; out ret: DirectPlay4): HResult;
    function DirectPlayLobbyCreate(out ret: DirectPlayLobby3): HResult;
    function GetDPEnum(out retval: DirectPlayEnumServiceProviders): HResult;
    function ColorGetAlpha(color: Integer; out ret: Single): HResult;
    function ColorGetBlue(color: Integer; out ret: Single): HResult;
    function ColorGetGreen(color: Integer; out ret: Single): HResult;
    function ColorGetRed(color: Integer; out ret: Single): HResult;
    function CreateColorRGB(r: Single; g: Single; b: Single; out color: Integer): HResult;
    function CreateColorRGBA(r: Single; g: Single; b: Single; a: Single; out color: Integer): HResult;
    function MatrixFromQuaternion(out matrix: D3DMATRIX; var quat: D3DRMQUATERNION): HResult;
    function QuaternionRotation(out quat: D3DRMQUATERNION; var axis: D3DVECTOR; theta: Single): HResult;
    function QuaternionMultiply(out quat: D3DRMQUATERNION; var quatA: D3DRMQUATERNION; 
                                var quatB: D3DRMQUATERNION): HResult;
    function QuaternionSlerp(out quat: D3DRMQUATERNION; var quatA: D3DRMQUATERNION; 
                             var quatB: D3DRMQUATERNION; alpha: Single): HResult;
    function VectorAdd(out v: D3DVECTOR; var vA: D3DVECTOR; var vB: D3DVECTOR): HResult;
    function VectorCrossProduct(out v: D3DVECTOR; var vA: D3DVECTOR; var vB: D3DVECTOR): HResult;
    function VectorDotProduct(var vA: D3DVECTOR; var vB: D3DVECTOR; out ret: Single): HResult;
    function VectorModulus(var vA: D3DVECTOR; out ret: Single): HResult;
    function VectorNormalize(var v: D3DVECTOR): HResult;
    function VectorRandom(var v: D3DVECTOR): HResult;
    function VectorReflect(out vDest: D3DVECTOR; var vRay: D3DVECTOR; var vNormal: D3DVECTOR): HResult;
    function VectorRotate(out vDest: D3DVECTOR; var vA: D3DVECTOR; var vAxis: D3DVECTOR; 
                          theta: Single): HResult;
    function VectorScale(out vDest: D3DVECTOR; var vA: D3DVECTOR; factor: Single): HResult;
    function VectorSubtract(out v: D3DVECTOR; var vA: D3DVECTOR; var vB: D3DVECTOR): HResult;
    function VectorCopy(var vDest: D3DVECTOR; var vSrc: D3DVECTOR): HResult;
    function RotateXMatrix(var mDest: D3DMATRIX; radians: Single): HResult;
    function RotateYMatrix(var mDest: D3DMATRIX; radians: Single): HResult;
    function RotateZMatrix(var mDest: D3DMATRIX; radians: Single): HResult;
    function ViewMatrix(var mDest: D3DMATRIX; var vFrom: D3DVECTOR; var vTo: D3DVECTOR; 
                        var vUp: D3DVECTOR; roll: Single): HResult;
    function MatrixMultiply(var mDest: D3DMATRIX; var mA: D3DMATRIX; var mB: D3DMATRIX): HResult;
    function ProjectionMatrix(var mDest: D3DMATRIX; nearPlane: Single; farplane: Single; fov: Single): HResult;
    function CopyMatrix(var mDest: D3DMATRIX; var mSrc: D3DMATRIX): HResult;
    function IdentityMatrix(var mDest: D3DMATRIX): HResult;
    function ZeroMatrix(var mDest: D3DMATRIX): HResult;
    function TickCount(out retV: Integer): HResult;
    function SystemBpp(out retV: Integer): HResult;
    function DirectMusicLoaderCreate(out ret: DirectMusicLoader): HResult;
    function DirectMusicComposerCreate(out ret: DirectMusicComposer): HResult;
    function DirectMusicPerformanceCreate(out ret: DirectMusicPerformance): HResult;
    function GetWindowRect(hwnd: Integer; var r: RECT): HResult;
    function CreateEvent(const event: DirectXEvent; out h: Integer): HResult;
    function SetEvent(eventid: Integer): HResult;
    function DestroyEvent(eventid: Integer): HResult;
    function CreateD3DVertex(x: Single; y: Single; z: Single; nx: Single; ny: Single; nz: Single; 
                             tu: Single; tv: Single; var v: D3DVERTEX): HResult;
    function CreateD3DLVertex(x: Single; y: Single; z: Single; color: Integer; specular: Integer; 
                              tu: Single; tv: Single; var v: D3DLVERTEX): HResult;
    function CreateD3DTLVertex(sx: Single; sy: Single; sz: Single; rhw: Single; color: Integer; 
                               specular: Integer; tu: Single; tv: Single; var v: D3DTLVERTEX): HResult;
    function DirectDraw4Create(const guid: WideString; out ret: DirectDraw4): HResult;
    function CreateNewGuid(out retGuid: WideString): HResult;
    property DefaultInterface: IDirectX7 read GetDefaultInterface;
  published
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
    property Server: TDirectX7Properties read GetServerProperties;
{$ENDIF}
  end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
// *********************************************************************//
// OLE Server Properties Proxy Class
// Server Object    : TDirectX7
// (This object is used by the IDE's Property Inspector to allow editing
//  of the properties of this server)
// *********************************************************************//
 TDirectX7Properties = class(TPersistent)
  private
    FServer:    TDirectX7;
    function    GetDefaultInterface: IDirectX7;
    constructor Create(AServer: TDirectX7);
  protected
  public
    property DefaultInterface: IDirectX7 read GetDefaultInterface;
  published
  end;
{$ENDIF}


procedure Register;

resourcestring
  dtlServerPage = 'ActiveX';

  dtlOcxPage = 'ActiveX';

implementation

uses ComObj;

class function CoDirectX7.Create: IDirectX7;
begin
  Result := CreateComObject(CLASS_DirectX7) as IDirectX7;
end;

class function CoDirectX7.CreateRemote(const MachineName: string): IDirectX7;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DirectX7) as IDirectX7;
end;

procedure TDirectX7.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{E1211353-8E94-11D1-8808-00C04FC2C602}';
    IntfIID:   '{FAFA3599-8B72-11D2-90B2-00C04FC2C602}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TDirectX7.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IDirectX7;
  end;
end;

procedure TDirectX7.ConnectTo(svrIntf: IDirectX7);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TDirectX7.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TDirectX7.GetDefaultInterface: IDirectX7;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call ''Connect'' or ''ConnectTo'' before this operation');
  Result := FIntf;
end;

constructor TDirectX7.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps := TDirectX7Properties.Create(Self);
{$ENDIF}
end;

destructor TDirectX7.Destroy;
begin
{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
  FProps.Free;
{$ENDIF}
  inherited Destroy;
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
function TDirectX7.GetServerProperties: TDirectX7Properties;
begin
  Result := FProps;
end;
{$ENDIF}

function TDirectX7.Direct3DRMCreate(out ret: Direct3DRM3): HResult;
begin
  Result := DefaultInterface.Direct3DRMCreate(ret);
end;

function TDirectX7.DirectDrawCreate(const guid: WideString; out ret: DirectDraw7): HResult;
begin
  Result := DefaultInterface.DirectDrawCreate(guid, ret);
end;

function TDirectX7.GetDDEnum(out ret: DirectDrawEnum): HResult;
begin
  Result := DefaultInterface.GetDDEnum(ret);
end;

function TDirectX7.DirectSoundCreate(const guid: WideString; out ret: DirectSound): HResult;
begin
  Result := DefaultInterface.DirectSoundCreate(guid, ret);
end;

function TDirectX7.DirectSoundCaptureCreate(const guid: WideString; out ret: DirectSoundCapture): HResult;
begin
  Result := DefaultInterface.DirectSoundCaptureCreate(guid, ret);
end;

function TDirectX7.GetDSEnum(out retval: DirectSoundEnum): HResult;
begin
  Result := DefaultInterface.GetDSEnum(retval);
end;

function TDirectX7.GetDSCaptureEnum(out retval: DirectSoundEnum): HResult;
begin
  Result := DefaultInterface.GetDSCaptureEnum(retval);
end;

function TDirectX7.DirectInputCreate(out ret: DirectInput): HResult;
begin
  Result := DefaultInterface.DirectInputCreate(ret);
end;

function TDirectX7.DirectPlayCreate(const guid: WideString; out ret: DirectPlay4): HResult;
begin
  Result := DefaultInterface.DirectPlayCreate(guid, ret);
end;

function TDirectX7.DirectPlayLobbyCreate(out ret: DirectPlayLobby3): HResult;
begin
  Result := DefaultInterface.DirectPlayLobbyCreate(ret);
end;

function TDirectX7.GetDPEnum(out retval: DirectPlayEnumServiceProviders): HResult;
begin
  Result := DefaultInterface.GetDPEnum(retval);
end;

function TDirectX7.ColorGetAlpha(color: Integer; out ret: Single): HResult;
begin
  Result := DefaultInterface.ColorGetAlpha(color, ret);
end;

function TDirectX7.ColorGetBlue(color: Integer; out ret: Single): HResult;
begin
  Result := DefaultInterface.ColorGetBlue(color, ret);
end;

function TDirectX7.ColorGetGreen(color: Integer; out ret: Single): HResult;
begin
  Result := DefaultInterface.ColorGetGreen(color, ret);
end;

function TDirectX7.ColorGetRed(color: Integer; out ret: Single): HResult;
begin
  Result := DefaultInterface.ColorGetRed(color, ret);
end;

function TDirectX7.CreateColorRGB(r: Single; g: Single; b: Single; out color: Integer): HResult;
begin
  Result := DefaultInterface.CreateColorRGB(r, g, b, color);
end;

function TDirectX7.CreateColorRGBA(r: Single; g: Single; b: Single; a: Single; out color: Integer): HResult;
begin
  Result := DefaultInterface.CreateColorRGBA(r, g, b, a, color);
end;

function TDirectX7.MatrixFromQuaternion(out matrix: D3DMATRIX; var quat: D3DRMQUATERNION): HResult;
begin
  Result := DefaultInterface.MatrixFromQuaternion(matrix, quat);
end;

function TDirectX7.QuaternionRotation(out quat: D3DRMQUATERNION; var axis: D3DVECTOR; theta: Single): HResult;
begin
  Result := DefaultInterface.QuaternionRotation(quat, axis, theta);
end;

function TDirectX7.QuaternionMultiply(out quat: D3DRMQUATERNION; var quatA: D3DRMQUATERNION; 
                                      var quatB: D3DRMQUATERNION): HResult;
begin
  Result := DefaultInterface.QuaternionMultiply(quat, quatA, quatB);
end;

function TDirectX7.QuaternionSlerp(out quat: D3DRMQUATERNION; var quatA: D3DRMQUATERNION; 
                                   var quatB: D3DRMQUATERNION; alpha: Single): HResult;
begin
  Result := DefaultInterface.QuaternionSlerp(quat, quatA, quatB, alpha);
end;

function TDirectX7.VectorAdd(out v: D3DVECTOR; var vA: D3DVECTOR; var vB: D3DVECTOR): HResult;
begin
  Result := DefaultInterface.VectorAdd(v, vA, vB);
end;

function TDirectX7.VectorCrossProduct(out v: D3DVECTOR; var vA: D3DVECTOR; var vB: D3DVECTOR): HResult;
begin
  Result := DefaultInterface.VectorCrossProduct(v, vA, vB);
end;

function TDirectX7.VectorDotProduct(var vA: D3DVECTOR; var vB: D3DVECTOR; out ret: Single): HResult;
begin
  Result := DefaultInterface.VectorDotProduct(vA, vB, ret);
end;

function TDirectX7.VectorModulus(var vA: D3DVECTOR; out ret: Single): HResult;
begin
  Result := DefaultInterface.VectorModulus(vA, ret);
end;

function TDirectX7.VectorNormalize(var v: D3DVECTOR): HResult;
begin
  Result := DefaultInterface.VectorNormalize(v);
end;

function TDirectX7.VectorRandom(var v: D3DVECTOR): HResult;
begin
  Result := DefaultInterface.VectorRandom(v);
end;

function TDirectX7.VectorReflect(out vDest: D3DVECTOR; var vRay: D3DVECTOR; var vNormal: D3DVECTOR): HResult;
begin
  Result := DefaultInterface.VectorReflect(vDest, vRay, vNormal);
end;

function TDirectX7.VectorRotate(out vDest: D3DVECTOR; var vA: D3DVECTOR; var vAxis: D3DVECTOR; 
                                theta: Single): HResult;
begin
  Result := DefaultInterface.VectorRotate(vDest, vA, vAxis, theta);
end;

function TDirectX7.VectorScale(out vDest: D3DVECTOR; var vA: D3DVECTOR; factor: Single): HResult;
begin
  Result := DefaultInterface.VectorScale(vDest, vA, factor);
end;

function TDirectX7.VectorSubtract(out v: D3DVECTOR; var vA: D3DVECTOR; var vB: D3DVECTOR): HResult;
begin
  Result := DefaultInterface.VectorSubtract(v, vA, vB);
end;

function TDirectX7.VectorCopy(var vDest: D3DVECTOR; var vSrc: D3DVECTOR): HResult;
begin
  Result := DefaultInterface.VectorCopy(vDest, vSrc);
end;

function TDirectX7.RotateXMatrix(var mDest: D3DMATRIX; radians: Single): HResult;
begin
  Result := DefaultInterface.RotateXMatrix(mDest, radians);
end;

function TDirectX7.RotateYMatrix(var mDest: D3DMATRIX; radians: Single): HResult;
begin
  Result := DefaultInterface.RotateYMatrix(mDest, radians);
end;

function TDirectX7.RotateZMatrix(var mDest: D3DMATRIX; radians: Single): HResult;
begin
  Result := DefaultInterface.RotateZMatrix(mDest, radians);
end;

function TDirectX7.ViewMatrix(var mDest: D3DMATRIX; var vFrom: D3DVECTOR; var vTo: D3DVECTOR; 
                              var vUp: D3DVECTOR; roll: Single): HResult;
begin
  Result := DefaultInterface.ViewMatrix(mDest, vFrom, vTo, vUp, roll);
end;

function TDirectX7.MatrixMultiply(var mDest: D3DMATRIX; var mA: D3DMATRIX; var mB: D3DMATRIX): HResult;
begin
  Result := DefaultInterface.MatrixMultiply(mDest, mA, mB);
end;

function TDirectX7.ProjectionMatrix(var mDest: D3DMATRIX; nearPlane: Single; farplane: Single; 
                                    fov: Single): HResult;
begin
  Result := DefaultInterface.ProjectionMatrix(mDest, nearPlane, farplane, fov);
end;

function TDirectX7.CopyMatrix(var mDest: D3DMATRIX; var mSrc: D3DMATRIX): HResult;
begin
  Result := DefaultInterface.CopyMatrix(mDest, mSrc);
end;

function TDirectX7.IdentityMatrix(var mDest: D3DMATRIX): HResult;
begin
  Result := DefaultInterface.IdentityMatrix(mDest);
end;

function TDirectX7.ZeroMatrix(var mDest: D3DMATRIX): HResult;
begin
  Result := DefaultInterface.ZeroMatrix(mDest);
end;

function TDirectX7.TickCount(out retV: Integer): HResult;
begin
  Result := DefaultInterface.TickCount(retV);
end;

function TDirectX7.SystemBpp(out retV: Integer): HResult;
begin
  Result := DefaultInterface.SystemBpp(retV);
end;

function TDirectX7.DirectMusicLoaderCreate(out ret: DirectMusicLoader): HResult;
begin
  Result := DefaultInterface.DirectMusicLoaderCreate(ret);
end;

function TDirectX7.DirectMusicComposerCreate(out ret: DirectMusicComposer): HResult;
begin
  Result := DefaultInterface.DirectMusicComposerCreate(ret);
end;

function TDirectX7.DirectMusicPerformanceCreate(out ret: DirectMusicPerformance): HResult;
begin
  Result := DefaultInterface.DirectMusicPerformanceCreate(ret);
end;

function TDirectX7.GetWindowRect(hwnd: Integer; var r: RECT): HResult;
begin
  Result := DefaultInterface.GetWindowRect(hwnd, r);
end;

function TDirectX7.CreateEvent(const event: DirectXEvent; out h: Integer): HResult;
begin
  Result := DefaultInterface.CreateEvent(event, h);
end;

function TDirectX7.SetEvent(eventid: Integer): HResult;
begin
  Result := DefaultInterface.SetEvent(eventid);
end;

function TDirectX7.DestroyEvent(eventid: Integer): HResult;
begin
  Result := DefaultInterface.DestroyEvent(eventid);
end;

function TDirectX7.CreateD3DVertex(x: Single; y: Single; z: Single; nx: Single; ny: Single; 
                                   nz: Single; tu: Single; tv: Single; var v: D3DVERTEX): HResult;
begin
  Result := DefaultInterface.CreateD3DVertex(x, y, z, nx, ny, nz, tu, tv, v);
end;

function TDirectX7.CreateD3DLVertex(x: Single; y: Single; z: Single; color: Integer; 
                                    specular: Integer; tu: Single; tv: Single; var v: D3DLVERTEX): HResult;
begin
  Result := DefaultInterface.CreateD3DLVertex(x, y, z, color, specular, tu, tv, v);
end;

function TDirectX7.CreateD3DTLVertex(sx: Single; sy: Single; sz: Single; rhw: Single; 
                                     color: Integer; specular: Integer; tu: Single; tv: Single; 
                                     var v: D3DTLVERTEX): HResult;
begin
  Result := DefaultInterface.CreateD3DTLVertex(sx, sy, sz, rhw, color, specular, tu, tv, v);
end;

function TDirectX7.DirectDraw4Create(const guid: WideString; out ret: DirectDraw4): HResult;
begin
  Result := DefaultInterface.DirectDraw4Create(guid, ret);
end;

function TDirectX7.CreateNewGuid(out retGuid: WideString): HResult;
begin
  Result := DefaultInterface.CreateNewGuid(retGuid);
end;

{$IFDEF LIVE_SERVER_AT_DESIGN_TIME}
constructor TDirectX7Properties.Create(AServer: TDirectX7);
begin
  inherited Create;
  FServer := AServer;
end;

function TDirectX7Properties.GetDefaultInterface: IDirectX7;
begin
  Result := FServer.DefaultInterface;
end;

{$ENDIF}

procedure Register;
begin
  RegisterComponents(dtlServerPage, [TDirectX7]);
end;

end.
